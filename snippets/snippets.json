{
    "Module documentation header": {
        "prefix": "modoc",
        "body": ["!------------------------------------------------------------------------------",
            "! ${1:Institution}, ${2:Affiliation}",
            "!------------------------------------------------------------------------------",
            "!",
            "! MODULE: ${3: Module name}",
            "!",
            "!> @author",
            "!> ${4:Author Name}",
            "!",
            "! DESCRIPTION:",
            "!> ${5: Short module description}",
            "!",
            "! REVISION HISTORY:",
            "! dd Mmm yyyy - Initial Version",
            "! TODO_dd_mmm_yyyy - TODO_describe_appropriate_changes - TODO_name",
            "!------------------------------------------------------------------------------"
        ],
        "description": "Add module documentation header"
    },
    "beg": {
        "prefix": "beg",
        "body": "begin\n\n\t${1:; begin your script}\n\nend\n",
        "description": "Begin NCL script block"
    },
    "do": {
        "prefix": "do",
        "body": "do ${1:i} = ${2:0}, ${3:n}\n\t${4:; write loop content}\nend do\n",
        "description": "NCL do loop"
    },
    "if": {
        "prefix": "if",
        "body": "if (${1:conditions}) then\n\t${2:; write branch}\nend if\n",
        "description": "NCL if condition"
    },
    "ifel": {
        "prefix": "ifelse",
        "body": "if (${1:conditions}) then\n\t${2:; write branch}\nelse\n\t${3:; write else branch}\nend if\n",
        "description": "NCL if-else condition"
    },
    "elif": {
        "prefix": "elseif",
        "body": "else if (${1:conditions}) then \n\t${2:; write branch}"
    },
    "load": {
        "prefix": "load",
        "body": "load \"\\$NCARG_ROOT/lib/ncarg/nclscripts/csm/gsn_code.ncl\"\nload \"\\$NCARG_ROOT/lib/ncarg/nclscripts/csm/gsn_csm.ncl\"\nload \"\\$NCARG_ROOT/lib/ncarg/nclscripts/csm/contributed.ncl\"\n",
        "description": "Load NCL library scripts"
    },
    "setvalues ": {
        "prefix": "setvalues",
        "body": "setvalues ${1:obj_reference}\n\t${2:;resource_string :  value_expression}\nend setvalues\n",
        "description": "setvalues"
    },
    "getvalues ": {
        "prefix": "getvalues",
        "body": "getvalues ${1:obj_reference}\n\t${2:;resource_string :  value_expression}\nend getvalues\n",
        "description": "getvalues"
    },
    "dowhile": {
        "prefix": "do",
        "body": "do (${1:conditions})\n\t${2:; write loop content}\nend do\n",
        "description": "NCL do while loop"
    },
    "external": {
        "prefix": "external",
        "body": "external"
    },
    "function": {
        "prefix": "func",
        "body": "function ${1:function_name} (${2:declaration_list})",
        "description": "Function and procedure definitions"
    },
    "record": {
        "prefix": "record",
        "body": "record"
    },
    "local": {
        "prefix": "local",
        "body": "local"
    },
    "break": {
        "prefix": "break",
        "body": "break"
    },
    "byte": {
        "prefix": "byte",
        "body": "byte"
    },
    "character": {
        "prefix": "character",
        "body": "character"
    },
    "continue": {
        "prefix": "continue",
        "body": "continue"
    },
    "create": {
        "prefix": "create",
        "body": "create"
    },
    "defaultapp": {
        "prefix": "defaultapp",
        "body": "defaultapp"
    },
    "double": {
        "prefix": "double",
        "body": "double"
    },
    "end": {
        "prefix": "end",
        "body": "end"
    },
    "enumeric": {
        "prefix": "enumeric",
        "body": "enumeric"
    },
    "False": {
        "prefix": "False",
        "body": "False"
    },
    "file": {
        "prefix": "file",
        "body": "file"
    },
    "float": {
        "prefix": "float",
        "body": "float"
    },
    "graphic": {
        "prefix": "graphic",
        "body": "graphic"
    },
    "group": {
        "prefix": "group",
        "body": "group"
    },
    "integer": {
        "prefix": "integer",
        "body": "integer"
    },
    "int64": {
        "prefix": "int64",
        "body": "int64"
    },
    "list": {
        "prefix": "list",
        "body": "list"
    },
    "logical": {
        "prefix": "logical",
        "body": "logical"
    },
    "long": {
        "prefix": "long",
        "body": "long"
    },
    "numeric": {
        "prefix": "numeric",
        "body": "numeric"
    },
    "noparent": {
        "prefix": "noparent",
        "body": "noparent"
    },
    "procedure": {
        "prefix": "procedure",
        "body": "procedure"
    },
    "quit": {
        "prefix": "quit",
        "body": "quit"
    },
    "QUIT": {
        "prefix": "QUIT",
        "body": "QUIT"
    },
    "return": {
        "prefix": "return",
        "body": "return"
    },
    "Quit": {
        "prefix": "Quit",
        "body": "Quit"
    },
    "short": {
        "prefix": "short",
        "body": "short"
    },
    "snumeric": {
        "prefix": "snumeric",
        "body": "snumeric"
    },
    "stop": {
        "prefix": "stop",
        "body": "stop"
    },
    "string": {
        "prefix": "string",
        "body": "string"
    },
    "then": {
        "prefix": "then",
        "body": "then"
    },
    "True": {
        "prefix": "True",
        "body": "True"
    },
    "ubyte": {
        "prefix": "ubyte",
        "body": "ubyte"
    },
    "uint": {
        "prefix": "uint",
        "body": "uint"
    },
    "uint64": {
        "prefix": "uint64",
        "body": "uint64"
    },
    "ulong": {
        "prefix": "ulong",
        "body": "ulong"
    },
    "ushort": {
        "prefix": "ushort",
        "body": "ushort"
    },
    "abs": {
        "prefix": "abs",
        "body": "abs(${1:value})",
        "description": "Returns the absolute value of numeric data."
    },
    "acos": {
        "prefix": "acos",
        "body": "acos(${1:value})",
        "description": "Computes the inverse cosine of numeric types."
    },
    "actvpr_mnmx_fao56": {
        "prefix": "actvpr_mnmx_fao56",
        "body": "actvpr_mnmx_fao56(${1:tmin}, ${2:tmax}, ${3:rhmin}, ${4:rhmax}, ${5:iounit})",
        "description": "Compute actual vapor pressure via equation 17 as described in FAO 56."
    },
    "actvpr_rhmean_fao56": {
        "prefix": "actvpr_rhmean_fao56",
        "body": "actvpr_rhmean_fao56(${1:tmin}, ${2:tmax}, ${3:rhmean}, ${4:iounit})",
        "description": "Compute actual vapor pressure via equation 19 as described in FAO 56."
    },
    "add90LatX": {
        "prefix": "add90LatX",
        "body": "add90LatX(${1:Data})",
        "description": "Adds two fake pole points (90S and 90N) to the rightmost dimension of the given data."
    },
    "add90LatY": {
        "prefix": "add90LatY",
        "body": "add90LatY(${1:Data})",
        "description": "Adds two fake pole points (90S and 90N) to the leftmost dimension of the given data."
    },
    "addfile": {
        "prefix": "addfile",
        "body": "addfile(${1:file_path}, ${2:status})",
        "description": "Opens a data file that is (or is to be) written in a supported file format."
    },
    "addfiles": {
        "prefix": "addfiles",
        "body": "addfiles(${1:file_path}, ${2:status})",
        "description": "Creates a reference that spans multiple data files."
    },
    "addfiles_GetVar": {
        "prefix": "addfiles_GetVar",
        "body": "addfiles_GetVar(${1:f}, ${2:files}, ${3:name})",
        "description": "Creates a reference that spans multiple data files and returns metadata. (deprecated:  see addfiles)"
    },
    "advect_variable": {
        "prefix": "advect_variable",
        "body": "advect_variable(${1:u}, ${2:v}, ${3:x}, ${4:gridType}, ${5:longName}, ${6:units}, ${7:opt})",
        "description": "Use \"highly accurate\" spherical harmonics to estimate gradients and advect a variable horizontally  on a global rectilinear grid."
    },
    "advect_variable_cfd": {
        "prefix": "advect_variable_cfd",
        "body": "advect_variable_cfd(${1:u}, ${2:v}, ${3:x}, ${4:lat}, ${5:lon}, ${6:cyclic}, ${7:longName}, ${8:units}, ${9:opt})",
        "description": "Using centered-finite_differences (cfd) to estimate gradients, advect a variable horizontally  on a regional or global rectilinear grid."
    },
    "albedo_ccm": {
        "prefix": "albedo_ccm",
        "body": "albedo_ccm(${1:flux1}, ${2:flux2}, ${3:formula})",
        "description": "Computes albedo via CESM model radiation variables."
    },
    "all": {
        "prefix": "all",
        "body": "all(${1:logical_array})",
        "description": "Returns True if all the elements of the input evaluate as True."
    },
    "angmom_atm": {
        "prefix": "angmom_atm",
        "body": "angmom_atm(${1:u}, ${2:dp}, ${3:lat}, ${4:wgt})",
        "description": "Calculates the atmosphere's relative angular momentum."
    },
    "any": {
        "prefix": "any",
        "body": "any(${1:logical_array})",
        "description": "Returns True if any of the values of its input evaluate as True."
    },
    "area_conserve_remap": {
        "prefix": "area_conserve_remap",
        "body": "area_conserve_remap(${1:loni}, ${2:lati}, ${3:fi}, ${4:lono}, ${5:lato}, ${6:opt})",
        "description": "Performs areal conservative remapping from one rectilinear grid to another."
    },
    "area_conserve_remap_Wrap": {
        "prefix": "area_conserve_remap_Wrap",
        "body": "area_conserve_remap_Wrap(${1:loni}, ${2:lati}, ${3:fi}, ${4:lono}, ${5:lato}, ${6:opt})",
        "description": "Performs areal conservative remapping from one rectilinear grid to another and retains metadata."
    },
    "area_hi2lores": {
        "prefix": "area_hi2lores",
        "body": "area_hi2lores(${1:xi}, ${2:yi}, ${3:fi}, ${4:fiCyclicX}, ${5:wy}, ${6:xo}, ${7:yo}, ${8:foOption})",
        "description": "Interpolates from high resolution rectilinear grids to low resolution recitlinear grids using local area averaging."
    },
    "area_hi2lores_Wrap": {
        "prefix": "area_hi2lores_Wrap",
        "body": "area_hi2lores_Wrap(${1:xi}, ${2:yi}, ${3:fi}, ${4:fiCyclicX}, ${5:wy}, ${6:xo}, ${7:yo}, ${8:foOption})",
        "description": "Interpolates from high resolution rectilinear grids to low resolution rectilinear grids using local area averaging and retains metadata."
    },
    "area_poly_sphere": {
        "prefix": "area_poly_sphere",
        "body": "area_poly_sphere(${1:lat}, ${2:lon}, ${3:rsph})",
        "description": "Calculates the area enclosed by an arbitrary polygon on the sphere."
    },
    "array_append_record": {
        "prefix": "array_append_record",
        "body": "array_append_record(${1:x1}, ${2:x2}, ${3:opt})",
        "description": "Attaches [appends] additional records [leftmost dimension] to a previously existing array."
    },
    "asciiread": {
        "prefix": "asciiread",
        "body": "asciiread(${1:filepath}, ${2:dimensions}, ${3:datatype})",
        "description": "Reads a file that contains ASCII representations of basic data types."
    },
    "asciiwrite": {
        "prefix": "asciiwrite",
        "body": "asciiwrite(${1:filepath}, ${2:var})",
        "description": "Creates an ascii text file of numeric or string data type."
    },
    "asin": {
        "prefix": "asin",
        "body": "asin(${1:value})",
        "description": "Computes the inverse sine of numeric types."
    },
    "assignFillValue": {
        "prefix": "assignFillValue",
        "body": "assignFillValue(${1:var_from}, ${2:var_to})",
        "description": "Transfers the _FillValue attribute from one variable to another."
    },
    "atan": {
        "prefix": "atan",
        "body": "atan(${1:value})",
        "description": "Computes the inverse tangent of numeric types."
    },
    "atan2": {
        "prefix": "atan2",
        "body": "atan2(${1:y}, ${2:x})",
        "description": "Computes the inverse tangent of (y/x) for numeric types."
    },
    "attsetvalues": {
        "prefix": "attsetvalues",
        "body": "attsetvalues(${1:objects}, ${2:resources})",
        "description": "Applies resources to the given objects."
    },
    "avg": {
        "prefix": "avg",
        "body": "avg(${1:x})",
        "description": "Computes the average of a variable regardless of dimensionality."
    },
    "band_pass_area_time": {
        "prefix": "band_pass_area_time",
        "body": "band_pass_area_time(${1:x}, ${2:srate}, ${3:bpf}, ${4:wgty}, ${5:opt})",
        "description": "Create a time series of area averages; band-pass filter the resulting area-averaged time series and calculate other statistics."
    },
    "band_pass_area_time_plot": {
        "prefix": "band_pass_area_time_plot",
        "body": "band_pass_area_time_plot(${1:x}, ${2:time}, ${3:pltDir}, ${4:pltType}, ${5:pltName}, ${6:opt})",
        "description": "Generate a plot using the output from band_pass_area_time."
    },
    "band_pass_hovmueller": {
        "prefix": "band_pass_hovmueller",
        "body": "band_pass_hovmueller(${1:x}, ${2:srate}, ${3:bpf}, ${4:wgty}, ${5:opt})",
        "description": "Create a band-pass filtered time series suitable for a  time vs. longitude (Hovmueller) plot."
    },
    "band_pass_hovmueller_plot": {
        "prefix": "band_pass_hovmueller_plot",
        "body": "band_pass_hovmueller_plot(${1:x}, ${2:pltDir}, ${3:pltType}, ${4:pltName}, ${5:opt})",
        "description": "Generate a plot using the output from band_pass_hovmueller."
    },
    "band_pass_latlon_time": {
        "prefix": "band_pass_latlon_time",
        "body": "band_pass_latlon_time(${1:x}, ${2:srate}, ${3:bpf}, ${4:opt})",
        "description": "Create band-pass filtered series at each lat/lon grid point."
    },
    "band_pass_latlon_time_plot": {
        "prefix": "band_pass_latlon_time_plot",
        "body": "band_pass_latlon_time_plot(${1:x}, ${2:diro}, ${3:pltType}, ${4:pltName}, ${5:opt})",
        "description": "Generate a plot using the output from band_pass_latlon_time."
    },
    "beta_dfdy_rossby": {
        "prefix": "beta_dfdy_rossby",
        "body": "beta_dfdy_rossby(${1:lat}, ${2:opt})",
        "description": "Compute the Rossby parameter [beta=df/dy] which is the  meridional variation of the Coriolis parameter."
    },
    "betainc": {
        "prefix": "betainc",
        "body": "betainc(${1:x}, ${2:a}, ${3:b})",
        "description": "Evaluates the incomplete beta function."
    },
    "bin_avg": {
        "prefix": "bin_avg",
        "body": "bin_avg(${1:zlon}, ${2:zlat}, ${3:z}, ${4:glon}, ${5:glat}, ${6:opt})",
        "description": "Calculates gridded binned averages and counts on a rectilinear grid using randomly spaced data."
    },
    "bin_sum": {
        "prefix": "bin_sum",
        "body": "bin_sum(${1:gbin}, ${2:gknt}, ${3:glon}, ${4:glat}, ${5:zlon}, ${6:zlat}, ${7:z})",
        "description": "Calculates binned sums and counts over multiple invocations of the procedure on a rectilinear grid."
    },
    "bootstrap_correl": {
        "prefix": "bootstrap_correl",
        "body": "bootstrap_correl(${1:x}, ${2:y}, ${3:nBoot}, ${4:nDim}, ${5:opt})",
        "description": "Bootstrap estimates of sample cross correlations (ie, Pearson's correlation coefficient)  between two variables."
    },
    "bootstrap_diff": {
        "prefix": "bootstrap_diff",
        "body": "bootstrap_diff(${1:x}, ${2:y}, ${3:nBoot}, ${4:nDim}, ${5:opt})",
        "description": "Bootstrap mean differences from two samples."
    },
    "bootstrap_estimate": {
        "prefix": "bootstrap_estimate",
        "body": "bootstrap_estimate(${1:xBoot}, ${2:fpc}, ${3:opt})",
        "description": "Extract the user specified element from the bootstrapped values."
    },
    "bootstrap_regcoef": {
        "prefix": "bootstrap_regcoef",
        "body": "bootstrap_regcoef(${1:x}, ${2:y}, ${3:nBoot}, ${4:nDim}, ${5:opt})",
        "description": "Bootstrap estimates of linear regression coefficient."
    },
    "bootstrap_stat": {
        "prefix": "bootstrap_stat",
        "body": "bootstrap_stat(${1:z}, ${2:stat}, ${3:nBoot}, ${4:nDim}, ${5:opt})",
        "description": "Bootstrap estimates of a user specified statistic derived from a variable."
    },
    "box_percentile_plot": {
        "prefix": "box_percentile_plot",
        "body": "box_percentile_plot(${1:wks}, ${2:data}, ${3:res}, ${4:box_res}, ${5:line_res}, ${6:marker_res}, ${7:per_res})",
        "description": "Creates a box percentile plot. Documentation under construction"
    },
    "boxplot": {
        "prefix": "boxplot",
        "body": "boxplot(${1:wks}, ${2:x}, ${3:y}, ${4:boxOpts}, ${5:plotres}, ${6:lineres})",
        "description": "Creates a boxplot."
    },
    "brunt_vaisala_atm": {
        "prefix": "brunt_vaisala_atm",
        "body": "brunt_vaisala_atm(${1:th}, ${2:z}, ${3:opt}, ${4:dim})",
        "description": "Compute the Brunt-Vaisala frequency which is a measure of bouyancy in a continuously stratified atmosphere."
    },
    "bw_bandpass_filter": {
        "prefix": "bw_bandpass_filter",
        "body": "bw_bandpass_filter(${1:x}, ${2:fca}, ${3:fcb}, ${4:opt}, ${5:dims})",
        "description": "Applies a Butterworth bandpass filter optimized for narrow bandwidths to time series."
    },
    "byte2flt": {
        "prefix": "byte2flt",
        "body": "byte2flt(${1:x})",
        "description": "Converts values of type byte to values of type float."
    },
    "byte2flt_hdf": {
        "prefix": "byte2flt_hdf",
        "body": "byte2flt_hdf(${1:x})",
        "description": "Converts values of type byte to values of type float using the \"scale\" and \"offset\" attributes (if present)."
    },
    "calcDayAnomTLL": {
        "prefix": "calcDayAnomTLL",
        "body": "calcDayAnomTLL(${1:x}, ${2:yyyyddd}, ${3:clmDay})",
        "description": "Calculates daily anomalies from a daily data climatology."
    },
    "calcMonAnomLLLT": {
        "prefix": "calcMonAnomLLLT",
        "body": "calcMonAnomLLLT(${1:x}, ${2:xAve})",
        "description": "Calculates monthly anomalies by subtracting the long term mean from each point  (lev,lat,lon,time version)"
    },
    "calcMonAnomLLT": {
        "prefix": "calcMonAnomLLT",
        "body": "calcMonAnomLLT(${1:x}, ${2:xAve})",
        "description": "Calculates monthly anomalies by subtracting the long term mean from each point  (lat,lon,time version)"
    },
    "calcMonAnomTLL": {
        "prefix": "calcMonAnomTLL",
        "body": "calcMonAnomTLL(${1:x}, ${2:xAve})",
        "description": "Calculates monthly anomalies by subtracting the long term mean from each point  (time,lat,lon version)"
    },
    "calcMonAnomTLLL": {
        "prefix": "calcMonAnomTLLL",
        "body": "calcMonAnomTLLL(${1:x}, ${2:xAve})",
        "description": "Calculates monthly anomalies by subtracting the long term mean from each point:  (time,lev,lat,lon) version."
    },
    "calculate_daily_values": {
        "prefix": "calculate_daily_values",
        "body": "calculate_daily_values(${1:x}, ${2:arith}, ${3:nDim}, ${4:opt})",
        "description": "Calculate daily values [avg, sum, min, max] from high frequency temporal values."
    },
    "calculate_monthly_values": {
        "prefix": "calculate_monthly_values",
        "body": "calculate_monthly_values(${1:x}, ${2:arith}, ${3:nDim}, ${4:opt})",
        "description": "Calculate monthly values [avg, sum, min, max] from high frequency temporal values."
    },
    "calculate_segment_values": {
        "prefix": "calculate_segment_values",
        "body": "calculate_segment_values(${1:x}, ${2:arith}, ${3:nDim}, ${4:opt})",
        "description": "Calculate segment (eg, pentad [5-day], weekly [7-day]) values from high frequency temporal values."
    },
    "calendar_decode2": {
        "prefix": "calendar_decode2",
        "body": "calendar_decode2(${1:time}, ${2:option})",
        "description": "Translates numeric time coordinates to calendar times."
    },
    "calendar_decode2_fix": {
        "prefix": "calendar_decode2_fix",
        "body": "calendar_decode2_fix(${1:time}, ${2:option})",
        "description": "Translates numeric time coordinates to calendar times (temporary function; see the 6.4.0 release notes for details)."
    },
    "cancor": {
        "prefix": "cancor",
        "body": "cancor(${1:x}, ${2:y}, ${3:option})",
        "description": "Performs canonical correlation analysis between two sets of variables."
    },
    "cbinread": {
        "prefix": "cbinread",
        "body": "cbinread(${1:filename}, ${2:dsizes}, ${3:datatype})",
        "description": "Reads binary files created using the C block I/O function write."
    },
    "cbinwrite": {
        "prefix": "cbinwrite",
        "body": "cbinwrite(${1:filename}, ${2:var})",
        "description": "Creates a binary file in raw C block I/O format for a numeric data type."
    },
    "cd_calendar": {
        "prefix": "cd_calendar",
        "body": "cd_calendar(${1:time}, ${2:option})",
        "description": "Converts a mixed Julian/Gregorian date to a UT-referenced date."
    },
    "cd_convert": {
        "prefix": "cd_convert",
        "body": "cd_convert(${1:dateFrom}, ${2:unitsTo})",
        "description": "Converts a time variable from one set of units to another."
    },
    "cd_inv_calendar": {
        "prefix": "cd_inv_calendar",
        "body": "cd_inv_calendar(${1:year}, ${2:month}, ${3:day}, ${4:hour}, ${5:minute}, ${6:second}, ${7:units}, ${8:option})",
        "description": "Converts a UT-referenced date to a mixed Julian/Gregorian date."
    },
    "cd_inv_string": {
        "prefix": "cd_inv_string",
        "body": "cd_inv_string(${1:str_time}, ${2:time_format})",
        "description": "Converts string time values to numeric values, using the given format string."
    },
    "cd_string": {
        "prefix": "cd_string",
        "body": "cd_string(${1:time}, ${2:inFormat})",
        "description": "Converts time values into nicely formatted strings."
    },
    "cdfbin_p": {
        "prefix": "cdfbin_p",
        "body": "cdfbin_p(${1:s}, ${2:xn}, ${3:pr})",
        "description": "Calculates the binomial density of a cumulative distribution function."
    },
    "cdfbin_pr": {
        "prefix": "cdfbin_pr",
        "body": "cdfbin_pr(${1:p}, ${2:s}, ${3:xn})",
        "description": "Calculates the probability of success of each trial of a cumulative  distribution function."
    },
    "cdfbin_s": {
        "prefix": "cdfbin_s",
        "body": "cdfbin_s(${1:p}, ${2:xn}, ${3:pr})",
        "description": "Calculates the number of successes of a cumulative distribution function."
    },
    "cdfbin_xn": {
        "prefix": "cdfbin_xn",
        "body": "cdfbin_xn(${1:p}, ${2:s}, ${3:pr})",
        "description": "Calculates the number of binomial trials of a cumulative distribution function."
    },
    "cdfchi_p": {
        "prefix": "cdfchi_p",
        "body": "cdfchi_p(${1:x}, ${2:df})",
        "description": "Calculates the integral of a cumulative chi-square distribution function."
    },
    "cdfchi_x": {
        "prefix": "cdfchi_x",
        "body": "cdfchi_x(${1:p}, ${2:df})",
        "description": "Calculates the upper limit of integration of a cumulative chi-square  distribution function."
    },
    "cdfgam_p": {
        "prefix": "cdfgam_p",
        "body": "cdfgam_p(${1:x}, ${2:shape}, ${3:scale})",
        "description": "Calculates the integral of a cumulative gamma distribution  function."
    },
    "cdfgam_x": {
        "prefix": "cdfgam_x",
        "body": "cdfgam_x(${1:p}, ${2:shape}, ${3:scale})",
        "description": "Calculates the upper limit of integration of a cumulative gamma distribution  function."
    },
    "cdfnor_p": {
        "prefix": "cdfnor_p",
        "body": "cdfnor_p(${1:x}, ${2:mean}, ${3:sd})",
        "description": "Calculates the integral of a cumulative normal distribution function."
    },
    "cdfnor_x": {
        "prefix": "cdfnor_x",
        "body": "cdfnor_x(${1:p}, ${2:mean}, ${3:sd})",
        "description": "Calculates the upper limit of integration of a cumulative normal distribution function."
    },
    "cdft_p": {
        "prefix": "cdft_p",
        "body": "cdft_p(${1:t}, ${2:df})",
        "description": "Calculates the one-sided probability given a t-value and the degrees of freedom."
    },
    "cdft_t": {
        "prefix": "cdft_t",
        "body": "cdft_t(${1:p}, ${2:df})",
        "description": "Calculates the t-value given the one-sided probability and the degrees of freedom."
    },
    "ceemdan": {
        "prefix": "ceemdan",
        "body": "ceemdan(${1:x}, ${2:nimf}, ${3:nrep}, ${4:noise}, ${5:opt}, ${6:dims})",
        "description": "Complete Ensemble Empirical Mode Decomposition with Adaptive Noise."
    },
    "ceil": {
        "prefix": "ceil",
        "body": "ceil(${1:values})",
        "description": "Returns the smallest integral value greater than or equal to each input value."
    },
    "center_finite_diff": {
        "prefix": "center_finite_diff",
        "body": "center_finite_diff(${1:q}, ${2:r}, ${3:rCyclic}, ${4:opt})",
        "description": "Performs a centered finite difference operation on the rightmost dimension."
    },
    "center_finite_diff_n": {
        "prefix": "center_finite_diff_n",
        "body": "center_finite_diff_n(${1:q}, ${2:r}, ${3:rCyclic}, ${4:opt}, ${5:dim})",
        "description": "Performs a centered finite difference operation on the given dimension."
    },
    "cfftb": {
        "prefix": "cfftb",
        "body": "cfftb(${1:cf}, ${2:cfopt})",
        "description": "Performs a backward complex discrete fourier transform [Fourier Synthesis]."
    },
    "cfftf": {
        "prefix": "cfftf",
        "body": "cfftf(${1:xr}, ${2:xi}, ${3:opt})",
        "description": "Performs a forward complex discrete fourier transform of a real periodic sequence."
    },
    "cfftf_frq_reorder": {
        "prefix": "cfftf_frq_reorder",
        "body": "cfftf_frq_reorder(${1:cf})",
        "description": "Reorders the data returned by cfftf."
    },
    "changeCase": {
        "prefix": "changeCase",
        "body": "changeCase(${1:x}, ${2:case})",
        "description": "Changes the case of a string. (Deprecated:  see str_lower/str_upper.)"
    },
    "changeCaseChar": {
        "prefix": "changeCaseChar",
        "body": "changeCaseChar(${1:x})",
        "description": "Changes the case of each character in a string. (Deprecated:  see str_switch.)"
    },
    "charactertodouble": {
        "prefix": "charactertodouble",
        "body": "charactertodouble(${1:char_val})",
        "description": "Coerces values of type character to values of type double (deprecated; use todouble)."
    },
    "charactertofloat": {
        "prefix": "charactertofloat",
        "body": "charactertofloat(${1:char_val})",
        "description": "Coerces values of type character to values of type float (deprecated; use tofloat)."
    },
    "charactertointeger": {
        "prefix": "charactertointeger",
        "body": "charactertointeger(${1:char_val})",
        "description": "Coerces values of type character to values of type integer (deprecated; use tointeger)."
    },
    "charactertolong": {
        "prefix": "charactertolong",
        "body": "charactertolong(${1:char_val})",
        "description": "Coerces values of type character to values of NCL type long (deprecated; use tolong)."
    },
    "charactertoshort": {
        "prefix": "charactertoshort",
        "body": "charactertoshort(${1:char_val})",
        "description": "Coerces values of type character to values of type short (deprecated; use toshort)."
    },
    "charactertostring": {
        "prefix": "charactertostring",
        "body": "charactertostring(${1:char_val})",
        "description": "Coerces values of type character to values of type string (deprecated; use tostring)."
    },
    "chartodouble": {
        "prefix": "chartodouble",
        "body": "chartodouble(${1:char_val})",
        "description": "Coerces values of type character to values of type double (deprecated; use todouble)."
    },
    "chartofloat": {
        "prefix": "chartofloat",
        "body": "chartofloat(${1:char_val})",
        "description": "Coerces values of type character to values of type float (deprecated; use tofloat)."
    },
    "chartoint": {
        "prefix": "chartoint",
        "body": "chartoint(${1:char_val})",
        "description": "Coerces values of type character to values of type integer (deprecated; use toint)."
    },
    "chartointeger": {
        "prefix": "chartointeger",
        "body": "chartointeger(${1:char_val})",
        "description": "Coerces values of type character to values of type integer (deprecated; use tointeger)."
    },
    "chartolong": {
        "prefix": "chartolong",
        "body": "chartolong(${1:char_val})",
        "description": "Coerces values of type character to values of NCL type long (deprecated; use tolong)."
    },
    "chartoshort": {
        "prefix": "chartoshort",
        "body": "chartoshort(${1:char_val})",
        "description": "Coerces values of type character to values of type short (deprecated; use toshort)."
    },
    "chartostring": {
        "prefix": "chartostring",
        "body": "chartostring(${1:char_val})",
        "description": "Coerces values of type character to values of type string (deprecated; use tostring)."
    },
    "chiinv": {
        "prefix": "chiinv",
        "body": "chiinv(${1:p}, ${2:df})",
        "description": "Evaluates the inverse chi-squared distribution function."
    },
    "cla_sq": {
        "prefix": "cla_sq",
        "body": "cla_sq(${1:strLeft}, ${2:strRight})",
        "description": "Create a string that uses single quotes (sq) to enclose command line assignment (CLA) statements for later use by NCL's system procedure."
    },
    "clear": {
        "prefix": "clear",
        "body": "clear(${1:wks})",
        "description": "Clears the given workstation objects."
    },
    "clmDayHourTLL": {
        "prefix": "clmDayHourTLL",
        "body": "clmDayHourTLL(${1:x}, ${2:yyyydddhh}, ${3:hour}, ${4:opt_shape})",
        "description": "Calculates climatological day-hour means at user specified hours for each day of the year."
    },
    "clmDayHourTLLL": {
        "prefix": "clmDayHourTLLL",
        "body": "clmDayHourTLLL(${1:x}, ${2:yyyydddhh}, ${3:hour}, ${4:opt_shape})",
        "description": "Calculates climatological day-hour means at user specified hours for each day of the year."
    },
    "clmDayTLL": {
        "prefix": "clmDayTLL",
        "body": "clmDayTLL(${1:x}, ${2:yyyyddd})",
        "description": "Calculates long term daily means (daily climatology) from daily data."
    },
    "clmDayTLLL": {
        "prefix": "clmDayTLLL",
        "body": "clmDayTLLL(${1:x}, ${2:yyyyddd})",
        "description": "Calculates long term daily means (daily climatology) from daily data."
    },
    "clmMon2clmDay": {
        "prefix": "clmMon2clmDay",
        "body": "clmMon2clmDay(${1:xClmMon}, ${2:retOrder}, ${3:opt})",
        "description": "Create a daily climatology from a monthly climatology."
    },
    "clmMonLLLT": {
        "prefix": "clmMonLLLT",
        "body": "clmMonLLLT(${1:x})",
        "description": "Calculates long term monthly means (monthly climatology) from monthly data: (lev,lat,lon,time) version."
    },
    "clmMonLLT": {
        "prefix": "clmMonLLT",
        "body": "clmMonLLT(${1:x})",
        "description": "Calculates long term monthly means (monthly climatology) from monthly data (lat,lon,time version)"
    },
    "clmMonTLL": {
        "prefix": "clmMonTLL",
        "body": "clmMonTLL(${1:x})",
        "description": "Calculates long term monthly means (monthly climatology) from monthly data:  (time,lat,lon) version"
    },
    "clmMonTLLL": {
        "prefix": "clmMonTLLL",
        "body": "clmMonTLLL(${1:x})",
        "description": "Calculates long term monthly means (monthly climatology) from monthly data: (time,lev,lat,lon) version"
    },
    "closest_val": {
        "prefix": "closest_val",
        "body": "closest_val(${1:xval}, ${2:x})",
        "description": "Finds the index value in a monotonically increasing one-dimensional array closest to a desired value."
    },
    "cohsq_c2p": {
        "prefix": "cohsq_c2p",
        "body": "cohsq_c2p(${1:cohsq}, ${2:edof})",
        "description": "Given coherence-squared and the effective degrees-of-freedom, calculate the associated probability."
    },
    "cohsq_p2c": {
        "prefix": "cohsq_p2c",
        "body": "cohsq_p2c(${1:prob}, ${2:edof})",
        "description": "Calculate the value(s) of coherence-squared required for a specified significance level and effectiove degrees-of-freedom."
    },
    "color_index_to_rgba": {
        "prefix": "color_index_to_rgba",
        "body": "color_index_to_rgba(${1:color_indexes})",
        "description": "Converts an absolute color index to its equivalent RGBA quadruplet"
    },
    "ColorNegDashZeroPosContour": {
        "prefix": "ColorNegDashZeroPosContour",
        "body": "ColorNegDashZeroPosContour(${1:plot}, ${2:ncolor}, ${3:zcolor}, ${4:pcolor})",
        "description": "Sets the negative contours to dashed, and colors the negative, positive, and zero contours to user-specified colors."
    },
    "ColorShadeLeGeContour": {
        "prefix": "ColorShadeLeGeContour",
        "body": "ColorShadeLeGeContour(${1:plot}, ${2:lowval}, ${3:lowcolor}, ${4:highval}, ${5:highcolor})",
        "description": "Shades contour regions given low and high values and two colors. (Deprecated. Use gsn_contour_shade.)"
    },
    "conform": {
        "prefix": "conform",
        "body": "conform(${1:x}, ${2:r}, ${3:ndim})",
        "description": "Expands an array or scalar so that it conforms to the shape of the given variable."
    },
    "conform_dims": {
        "prefix": "conform_dims",
        "body": "conform_dims(${1:dims}, ${2:r}, ${3:ndim})",
        "description": "Expands an array or scalar so that it conforms to the shape of the given dimension sizes."
    },
    "copy_VarAtts": {
        "prefix": "copy_VarAtts",
        "body": "copy_VarAtts(${1:var_from}, ${2:var_to})",
        "description": "Copies all of a variable's attributes from one variable to another."
    },
    "copy_VarCoords": {
        "prefix": "copy_VarCoords",
        "body": "copy_VarCoords(${1:var_from}, ${2:var_to})",
        "description": "Copies all  named dimensions and coordinate variables from one variable to another."
    },
    "copy_VarCoords_1": {
        "prefix": "copy_VarCoords_1",
        "body": "copy_VarCoords_1(${1:var_from}, ${2:var_to})",
        "description": "Copies all  named dimensions and coordinate variables from one variable to another except for the rightmost dimension."
    },
    "copy_VarCoords_2": {
        "prefix": "copy_VarCoords_2",
        "body": "copy_VarCoords_2(${1:var_from}, ${2:var_to})",
        "description": "Copies all  named dimensions and coordinate variables from one variable to another except for the rightmost two dimensions."
    },
    "copy_VarMeta": {
        "prefix": "copy_VarMeta",
        "body": "copy_VarMeta(${1:var_from}, ${2:var_to})",
        "description": "Copies all  attributes,  named dimensions  and  coordinate variables  from one variable to another."
    },
    "copyatt": {
        "prefix": "copyatt",
        "body": "copyatt(${1:var_to}, ${2:var_from})",
        "description": "Copies all attributes, named dimensions and coordinate variables from one variable to another (deprecated version)."
    },
    "coriolis_param": {
        "prefix": "coriolis_param",
        "body": "coriolis_param(${1:lat})",
        "description": "Calculate the Coriolis parameter."
    },
    "cos": {
        "prefix": "cos",
        "body": "cos(${1:value})",
        "description": "Computes the cosine of numeric types."
    },
    "cosh": {
        "prefix": "cosh",
        "body": "cosh(${1:value})",
        "description": "Computes the hyperbolic cosine of numeric types."
    },
    "count_unique_values": {
        "prefix": "count_unique_values",
        "body": "count_unique_values(${1:x})",
        "description": "Counts the number of unique values in the given array."
    },
    "count_unique_values_n": {
        "prefix": "count_unique_values_n",
        "body": "count_unique_values_n(${1:x}, ${2:dim})",
        "description": "Counts the number of unique values in the given array, across the given dimension."
    },
    "covcorm": {
        "prefix": "covcorm",
        "body": "covcorm(${1:x}, ${2:iopt})",
        "description": "Calculates a covariance or correlation matrix."
    },
    "covcorm_xy": {
        "prefix": "covcorm_xy",
        "body": "covcorm_xy(${1:x}, ${2:y}, ${3:iopt})",
        "description": "Calculates a covariance or correlation matrix given two separate 'n x m' arrays."
    },
    "craybinnumrec": {
        "prefix": "craybinnumrec",
        "body": "craybinnumrec(${1:path})",
        "description": "Returns the number of unformatted sequential access Fortran records in a Cray COS blocked binary file."
    },
    "craybinrecread": {
        "prefix": "craybinrecread",
        "body": "craybinrecread(${1:path}, ${2:rec_num}, ${3:rec_dims}, ${4:rec_type})",
        "description": "Reads COS blocked unformatted sequential access Fortran binary files."
    },
    "create_graphic": {
        "prefix": "create_graphic",
        "body": "create_graphic(${1:name}, ${2:class}, ${3:parent}, ${4:resources})",
        "description": "Creates a graphic object"
    },
    "crop_water_need": {
        "prefix": "crop_water_need",
        "body": "crop_water_need(${1:pet}, ${2:act_evaptr}, ${3:opt})",
        "description": "Compute \"crop water need\", the quantity of water needed to attain maximum crop productivity."
    },
    "crossp3": {
        "prefix": "crossp3",
        "body": "crossp3(${1:a}, ${2:b})",
        "description": "Compute cross product of multiple vectors of length 3."
    },
    "csa1": {
        "prefix": "csa1",
        "body": "csa1(${1:xi}, ${2:yi}, ${3:knots}, ${4:xo})",
        "description": "Calculates an approximating cubic spline for the input data, one 1-dimensional section at a time."
    },
    "csa1d": {
        "prefix": "csa1d",
        "body": "csa1d(${1:xi}, ${2:yi}, ${3:knots}, ${4:xo})",
        "description": "Calculates an approximating cubic spline for the input data, one 1-dimensional section at a time."
    },
    "csa1s": {
        "prefix": "csa1s",
        "body": "csa1s(${1:xi}, ${2:yi}, ${3:knots}, ${4:xo})",
        "description": "Calculates an approximating cubic spline for the input data, one 1-dimensional section at a time."
    },
    "csa1x": {
        "prefix": "csa1x",
        "body": "csa1x(${1:xi}, ${2:yi}, ${3:wts}, ${4:knots}, ${5:smth}, ${6:nderiv}, ${7:xo})",
        "description": "Calculates an approximating cubic spline for the input data, one 1-dimensional section at a time."
    },
    "csa1xd": {
        "prefix": "csa1xd",
        "body": "csa1xd(${1:xi}, ${2:yi}, ${3:wts}, ${4:knots}, ${5:smth}, ${6:nderiv}, ${7:xo})",
        "description": "Calculates an approximating cubic spline for the input data, one 1-dimensional section at a time."
    },
    "csa1xs": {
        "prefix": "csa1xs",
        "body": "csa1xs(${1:xi}, ${2:yi}, ${3:wts}, ${4:knots}, ${5:smth}, ${6:nderiv}, ${7:xo})",
        "description": "Calculates an approximating cubic spline for the input data, one 1-dimensional section at a time."
    },
    "csa2": {
        "prefix": "csa2",
        "body": "csa2(${1:xi}, ${2:yi}, ${3:zi}, ${4:knots}, ${5:xo}, ${6:yo})",
        "description": "Calculates an approximating cubic spline for two-dimensional input data."
    },
    "csa2d": {
        "prefix": "csa2d",
        "body": "csa2d(${1:xi}, ${2:yi}, ${3:zi}, ${4:knots}, ${5:xo}, ${6:yo})",
        "description": "Calculates an approximating cubic spline for two-dimensional input data."
    },
    "csa2l": {
        "prefix": "csa2l",
        "body": "csa2l(${1:xi}, ${2:yi}, ${3:zi}, ${4:knots}, ${5:xo}, ${6:yo})",
        "description": "Calculates an approximating cubic spline for two-dimensional input data."
    },
    "csa2ld": {
        "prefix": "csa2ld",
        "body": "csa2ld(${1:xi}, ${2:yi}, ${3:zi}, ${4:knots}, ${5:xo}, ${6:yo})",
        "description": "Calculates an approximating cubic spline for two-dimensional input data."
    },
    "csa2ls": {
        "prefix": "csa2ls",
        "body": "csa2ls(${1:xi}, ${2:yi}, ${3:zi}, ${4:knots}, ${5:xo}, ${6:yo})",
        "description": "Calculates an approximating cubic spline for two-dimensional input data."
    },
    "csa2lx": {
        "prefix": "csa2lx",
        "body": "csa2lx(${1:xi}, ${2:yi}, ${3:zi}, ${4:wts}, ${5:knots}, ${6:smth}, ${7:nderiv}, ${8:xo}, ${9:yo})",
        "description": "Calculates an approximating cubic spline for two-dimensional input data."
    },
    "csa2lxd": {
        "prefix": "csa2lxd",
        "body": "csa2lxd(${1:xi}, ${2:yi}, ${3:zi}, ${4:wts}, ${5:knots}, ${6:smth}, ${7:nderiv}, ${8:xo}, ${9:yo})",
        "description": "Calculates an approximating cubic spline for two-dimensional input data."
    },
    "csa2lxs": {
        "prefix": "csa2lxs",
        "body": "csa2lxs(${1:xi}, ${2:yi}, ${3:zi}, ${4:wts}, ${5:knots}, ${6:smth}, ${7:nderiv}, ${8:xo}, ${9:yo})",
        "description": "Calculates an approximating cubic spline for two-dimensional input data."
    },
    "csa2s": {
        "prefix": "csa2s",
        "body": "csa2s(${1:xi}, ${2:yi}, ${3:zi}, ${4:knots}, ${5:xo}, ${6:yo})",
        "description": "Calculates an approximating cubic spline for two-dimensional input data."
    },
    "csa2x": {
        "prefix": "csa2x",
        "body": "csa2x(${1:xi}, ${2:yi}, ${3:zi}, ${4:wts}, ${5:knots}, ${6:smth}, ${7:nderiv}, ${8:xo}, ${9:yo})",
        "description": "Calculates an approximating cubic spline for two-dimensional input data."
    },
    "csa2xd": {
        "prefix": "csa2xd",
        "body": "csa2xd(${1:xi}, ${2:yi}, ${3:zi}, ${4:wts}, ${5:knots}, ${6:smth}, ${7:nderiv}, ${8:xo}, ${9:yo})",
        "description": "Calculates an approximating cubic spline for two-dimensional input data."
    },
    "csa2xs": {
        "prefix": "csa2xs",
        "body": "csa2xs(${1:xi}, ${2:yi}, ${3:zi}, ${4:wts}, ${5:knots}, ${6:smth}, ${7:nderiv}, ${8:xo}, ${9:yo})",
        "description": "Calculates an approximating cubic spline for two-dimensional input data."
    },
    "csa3": {
        "prefix": "csa3",
        "body": "csa3(${1:xi}, ${2:yi}, ${3:zi}, ${4:ui}, ${5:knots}, ${6:xo}, ${7:yo}, ${8:zo})",
        "description": "Calculates an approximating cubic spline for three-dimensional input data."
    },
    "csa3d": {
        "prefix": "csa3d",
        "body": "csa3d(${1:xi}, ${2:yi}, ${3:zi}, ${4:ui}, ${5:knots}, ${6:xo}, ${7:yo}, ${8:zo})",
        "description": "Calculates an approximating cubic spline for three-dimensional input data."
    },
    "csa3l": {
        "prefix": "csa3l",
        "body": "csa3l(${1:xi}, ${2:yi}, ${3:zi}, ${4:ui}, ${5:knots}, ${6:xo}, ${7:yo}, ${8:zo})",
        "description": "Calculates an approximating cubic spline for three-dimensional input data."
    },
    "csa3ld": {
        "prefix": "csa3ld",
        "body": "csa3ld(${1:xi}, ${2:yi}, ${3:zi}, ${4:ui}, ${5:knots}, ${6:xo}, ${7:yo}, ${8:zo})",
        "description": "Calculates an approximating cubic spline for three-dimensional input data."
    },
    "csa3ls": {
        "prefix": "csa3ls",
        "body": "csa3ls(${1:xi}, ${2:yi}, ${3:zi}, ${4:ui}, ${5:knots}, ${6:xo}, ${7:yo}, ${8:zo})",
        "description": "Calculates an approximating cubic spline for three-dimensional input data."
    },
    "csa3lx": {
        "prefix": "csa3lx",
        "body": "csa3lx(${1:xi}, ${2:yi}, ${3:zi}, ${4:ui}, ${5:wts}, ${6:knots}, ${7:smth}, ${8:nderiv}, ${9:xo}, ${10:yo}, ${11:zo})",
        "description": "Calculates an approximating cubic spline for three-dimensional input data."
    },
    "csa3lxd": {
        "prefix": "csa3lxd",
        "body": "csa3lxd(${1:xi}, ${2:yi}, ${3:zi}, ${4:ui}, ${5:wts}, ${6:knots}, ${7:smth}, ${8:nderiv}, ${9:xo}, ${10:yo}, ${11:zo})",
        "description": "Calculates an approximating cubic spline for three-dimensional input data."
    },
    "csa3lxs": {
        "prefix": "csa3lxs",
        "body": "csa3lxs(${1:xi}, ${2:yi}, ${3:zi}, ${4:ui}, ${5:wts}, ${6:knots}, ${7:smth}, ${8:nderiv}, ${9:xo}, ${10:yo}, ${11:zo})",
        "description": "Calculates an approximating cubic spline for three-dimensional input data."
    },
    "csa3s": {
        "prefix": "csa3s",
        "body": "csa3s(${1:xi}, ${2:yi}, ${3:zi}, ${4:ui}, ${5:knots}, ${6:xo}, ${7:yo}, ${8:zo})",
        "description": "Calculates an approximating cubic spline for three-dimensional input data."
    },
    "csa3x": {
        "prefix": "csa3x",
        "body": "csa3x(${1:xi}, ${2:yi}, ${3:zi}, ${4:ui}, ${5:wts}, ${6:knots}, ${7:smth}, ${8:nderiv}, ${9:xo}, ${10:yo}, ${11:zo})",
        "description": "Calculates an approximating cubic spline for three-dimensional input data."
    },
    "csa3xd": {
        "prefix": "csa3xd",
        "body": "csa3xd(${1:xi}, ${2:yi}, ${3:zi}, ${4:ui}, ${5:wts}, ${6:knots}, ${7:smth}, ${8:nderiv}, ${9:xo}, ${10:yo}, ${11:zo})",
        "description": "Calculates an approximating cubic spline for three-dimensional input data."
    },
    "csa3xs": {
        "prefix": "csa3xs",
        "body": "csa3xs(${1:xi}, ${2:yi}, ${3:zi}, ${4:ui}, ${5:wts}, ${6:knots}, ${7:smth}, ${8:nderiv}, ${9:xo}, ${10:yo}, ${11:zo})",
        "description": "Calculates an approximating cubic spline for three-dimensional input data."
    },
    "csc2s": {
        "prefix": "csc2s",
        "body": "csc2s(${1:x}, ${2:y}, ${3:z})",
        "description": "Converts Cartesian coordinates on a unit sphere to spherical coordinates (lat/lon)."
    },
    "csgetp": {
        "prefix": "csgetp",
        "body": "csgetp(${1:pnam})",
        "description": "Retrieves control parameters for Cssgrid routines."
    },
    "cshstringtolist": {
        "prefix": "cshstringtolist",
        "body": "cshstringtolist(${1:cshlist})",
        "description": "Converts a comma delimited string from csh and breaks it up into separate strings."
    },
    "css2c": {
        "prefix": "css2c",
        "body": "css2c(${1:lat}, ${2:lon})",
        "description": "Converts spherical coordinates (lat/lon) to Cartesian coordinates on a unit sphere."
    },
    "cssetp": {
        "prefix": "cssetp",
        "body": "cssetp(${1:pnam}, ${2:pval})",
        "description": "Sets control parameters for Cssgrid routines."
    },
    "cssgrid": {
        "prefix": "cssgrid",
        "body": "cssgrid(${1:rlat}, ${2:rlon}, ${3:fval}, ${4:plat}, ${5:plon})",
        "description": "Uses tension splines to interpolate unstructured (randomly-spaced) data on a unit sphere to data values on a rectilinear grid."
    },
    "cssgrid_Wrap": {
        "prefix": "cssgrid_Wrap",
        "body": "cssgrid_Wrap(${1:rlat}, ${2:rlon}, ${3:fval}, ${4:plat}, ${5:plon})",
        "description": "Uses tension splines to interpolate unstructured (randomly-spaced) data on a unit sphere to data values on a rectilinear grid (retains metadata)."
    },
    "csstri": {
        "prefix": "csstri",
        "body": "csstri(${1:rlat}, ${2:rlon})",
        "description": "Calculates a Delaunay triangulation of data randomly positioned on the surface of a sphere."
    },
    "csvoro": {
        "prefix": "csvoro",
        "body": "csvoro(${1:rlati}, ${2:rloni}, ${3:index}, ${4:cflag}, ${5:rlato}, ${6:rlono}, ${7:alen}, ${8:nca}, ${9:numv}, ${10:nv})",
        "description": "Determines Voronoi polygons for data randomly positioned on a sphere and returns vertices for the one surrounding a specified input point."
    },
    "cumsum": {
        "prefix": "cumsum",
        "body": "cumsum(${1:x}, ${2:opt})",
        "description": "Calculates the cumulative sum."
    },
    "curvilinear_to_SCRIP": {
        "prefix": "curvilinear_to_SCRIP",
        "body": "curvilinear_to_SCRIP(${1:SCRIP_filename}, ${2:lat}, ${3:lon}, ${4:opt})",
        "description": "Writes the description of a curvilinear grid to a SCRIP file."
    },
    "cz2ccm": {
        "prefix": "cz2ccm",
        "body": "cz2ccm(${1:ps}, ${2:phis}, ${3:tv}, ${4:p0}, ${5:hyam}, ${6:hybm}, ${7:hyai}, ${8:hybi})",
        "description": "Computes geopotential height in hybrid coordinates."
    },
    "datatondc": {
        "prefix": "datatondc",
        "body": "datatondc(${1:plot}, ${2:x_in}, ${3:y_in}, ${4:x_out}, ${5:y_out})",
        "description": "Converts data units into normalized device coordinates (NDCs)."
    },
    "day_of_week": {
        "prefix": "day_of_week",
        "body": "day_of_week(${1:year}, ${2:month}, ${3:day})",
        "description": "Calculates the day of the week given month, day, and year (Gregorian calendar)."
    },
    "day_of_year": {
        "prefix": "day_of_year",
        "body": "day_of_year(${1:year}, ${2:month}, ${3:day})",
        "description": "Calculates the day of the year (sometimes erroneously referred to as 'julian day') given Gregorian calendar month, day, and year."
    },
    "daylight_fao56": {
        "prefix": "daylight_fao56",
        "body": "daylight_fao56(${1:jday}, ${2:lat})",
        "description": "Compute  maximum number of daylight hours as described in FAO 56."
    },
    "days_in_month": {
        "prefix": "days_in_month",
        "body": "days_in_month(${1:year}, ${2:month})",
        "description": "Calculates the number of days in a month given month and year."
    },
    "dble2flt": {
        "prefix": "dble2flt",
        "body": "dble2flt(${1:x})",
        "description": "Converts values of type double to values of type float and preserves metadata."
    },
    "decimalPlaces": {
        "prefix": "decimalPlaces",
        "body": "decimalPlaces(${1:x}, ${2:nplaces}, ${3:round})",
        "description": "Truncates or rounds to the number of decimal places specified."
    },
    "decomposeSymAsym": {
        "prefix": "decomposeSymAsym",
        "body": "decomposeSymAsym(${1:x}, ${2:iret})",
        "description": "Decompose a variable which is symmetric about the equator into symmetric and asymmetric parts."
    },
    "default_fillvalue": {
        "prefix": "default_fillvalue",
        "body": "default_fillvalue(${1:var_type})",
        "description": "Returns the default missing value for the given variable type."
    },
    "delete": {
        "prefix": "delete",
        "body": "delete(${1:data})",
        "description": "Deletes variables, attributes, and coordinate variables."
    },
    "delete_VarAtts": {
        "prefix": "delete_VarAtts",
        "body": "delete_VarAtts(${1:var}, ${2:atts})",
        "description": "Deletes one or more attributes  associated with a variable."
    },
    "demod_cmplx": {
        "prefix": "demod_cmplx",
        "body": "demod_cmplx(${1:x}, ${2:frqdem}, ${3:frqcut}, ${4:nwt}, ${5:ndim}, ${6:opt})",
        "description": "Perform a complex demodulation on a time series."
    },
    "depth_to_pres": {
        "prefix": "depth_to_pres",
        "body": "depth_to_pres(${1:z}, ${2:opt})",
        "description": "Convert ocean depth to pressure."
    },
    "destroy": {
        "prefix": "destroy",
        "body": "destroy(${1:objects})",
        "description": "Destroys objects from NCL."
    },
    "determinant": {
        "prefix": "determinant",
        "body": "determinant(${1:x})",
        "description": "Calculate the determinant of a small square real matrix  using a partial-pivoting Gaussian elimination scheme."
    },
    "dewtemp_trh": {
        "prefix": "dewtemp_trh",
        "body": "dewtemp_trh(${1:tk}, ${2:rh})",
        "description": "Calculates the dew point temperature given temperature and relative humidity."
    },
    "dgeevx_lapack": {
        "prefix": "dgeevx_lapack",
        "body": "dgeevx_lapack(${1:Q}, ${2:balanc}, ${3:jobvl}, ${4:jobvr}, ${5:sense}, ${6:opt})",
        "description": "Given a square (N,N) real nonsymmetric matrix, compute the eigenvalues and, optionally, the left and/or right eigenvectors via  the LAPACK subroutine  dgeevx."
    },
    "dim_acumrun_n": {
        "prefix": "dim_acumrun_n",
        "body": "dim_acumrun_n(${1:x}, ${2:lrun}, ${3:opt}, ${4:dims})",
        "description": "Calculates individual accumulated sums of sequences ('runs') of a specified length."
    },
    "dim_avg": {
        "prefix": "dim_avg",
        "body": "dim_avg(${1:x})",
        "description": "Computes the average of a variable's rightmost dimension at all other dimensions."
    },
    "dim_avg_n": {
        "prefix": "dim_avg_n",
        "body": "dim_avg_n(${1:x}, ${2:dims})",
        "description": "Computes the average of a variable's given dimension(s) at all other dimensions."
    },
    "dim_avg_n_Wrap": {
        "prefix": "dim_avg_n_Wrap",
        "body": "dim_avg_n_Wrap(${1:x}, ${2:dims})",
        "description": "Computes the average of a variable's given dimensions at all other dimensions and retains metadata."
    },
    "dim_avg_wgt": {
        "prefix": "dim_avg_wgt",
        "body": "dim_avg_wgt(${1:x}, ${2:w}, ${3:opt})",
        "description": "Computes the weighted average of a variable's rightmost dimension at all other dimensions."
    },
    "dim_avg_wgt_n": {
        "prefix": "dim_avg_wgt_n",
        "body": "dim_avg_wgt_n(${1:x}, ${2:w}, ${3:opt}, ${4:dim})",
        "description": "Computes the weighted average of a variable's given dimension at all other dimensions."
    },
    "dim_avg_wgt_n_Wrap": {
        "prefix": "dim_avg_wgt_n_Wrap",
        "body": "dim_avg_wgt_n_Wrap(${1:x}, ${2:w}, ${3:opt}, ${4:dim})",
        "description": "Computes the weighted average of a variable's given dimension at all other dimensions and retains metadata."
    },
    "dim_avg_wgt_Wrap": {
        "prefix": "dim_avg_wgt_Wrap",
        "body": "dim_avg_wgt_Wrap(${1:x}, ${2:w}, ${3:opt})",
        "description": "Computes the weighted average of a variable's rightmost dimension at all other dimensions and retains metadata."
    },
    "dim_avg_Wrap": {
        "prefix": "dim_avg_Wrap",
        "body": "dim_avg_Wrap(${1:x})",
        "description": "Computes the average of a variable's rightmost dimension at all other dimensions and retains metadata."
    },
    "dim_cumsum": {
        "prefix": "dim_cumsum",
        "body": "dim_cumsum(${1:x}, ${2:opt})",
        "description": "Calculates the cumulative sum along the rightmost dimension."
    },
    "dim_cumsum_n": {
        "prefix": "dim_cumsum_n",
        "body": "dim_cumsum_n(${1:x}, ${2:opt}, ${3:dims})",
        "description": "Calculates the cumulative sum along the given dimension(s)."
    },
    "dim_cumsum_n_Wrap": {
        "prefix": "dim_cumsum_n_Wrap",
        "body": "dim_cumsum_n_Wrap(${1:x}, ${2:opt}, ${3:dims})",
        "description": "Calculates the cumulative sum along the given dimension(s) and retains metadata."
    },
    "dim_cumsum_Wrap": {
        "prefix": "dim_cumsum_Wrap",
        "body": "dim_cumsum_Wrap(${1:x}, ${2:opt})",
        "description": "Calculates the cumulative sum along the rightmost dimension and retains metadata."
    },
    "dim_gamfit_n": {
        "prefix": "dim_gamfit_n",
        "body": "dim_gamfit_n(${1:x}, ${2:optgam}, ${3:dims})",
        "description": "Fit data to the two parameter gamma distribution."
    },
    "dim_gbits": {
        "prefix": "dim_gbits",
        "body": "dim_gbits(${1:npack}, ${2:ibit}, ${3:nbits}, ${4:nskip}, ${5:iter})",
        "description": "Unpacks bit chunks from the rightmost dimension of the input array."
    },
    "dim_max": {
        "prefix": "dim_max",
        "body": "dim_max(${1:x})",
        "description": "Finds the maximum of a variable's rightmost dimension at all other dimensions."
    },
    "dim_max_n": {
        "prefix": "dim_max_n",
        "body": "dim_max_n(${1:x}, ${2:dims})",
        "description": "Finds the maximum of a variable's given dimensions at all other dimensions."
    },
    "dim_max_n_Wrap": {
        "prefix": "dim_max_n_Wrap",
        "body": "dim_max_n_Wrap(${1:x}, ${2:dims})",
        "description": "Computes the maximum of a variable's given dimensions at all other dimensions and retains metadata."
    },
    "dim_maxind": {
        "prefix": "dim_maxind",
        "body": "dim_maxind(${1:arg}, ${2:dim})",
        "description": "Returns the index of the first occurrence of a maximum value within the specified dimension."
    },
    "dim_median": {
        "prefix": "dim_median",
        "body": "dim_median(${1:x})",
        "description": "Computes the median of a variable's rightmost dimension at all other dimensions."
    },
    "dim_median_n": {
        "prefix": "dim_median_n",
        "body": "dim_median_n(${1:x}, ${2:dims})",
        "description": "Computes the median of a variable's given dimensions at all other dimensions."
    },
    "dim_min": {
        "prefix": "dim_min",
        "body": "dim_min(${1:x})",
        "description": "Finds the minimum of a variable's rightmost dimension at all other dimensions."
    },
    "dim_min_n": {
        "prefix": "dim_min_n",
        "body": "dim_min_n(${1:x}, ${2:dims})",
        "description": "Finds the minimum of a variable's given dimensions at all other dimensions."
    },
    "dim_min_n_Wrap": {
        "prefix": "dim_min_n_Wrap",
        "body": "dim_min_n_Wrap(${1:x}, ${2:dims})",
        "description": "Computes the minimum of a variable's given dimensions at all other dimensions and retains metadata."
    },
    "dim_minind": {
        "prefix": "dim_minind",
        "body": "dim_minind(${1:arg}, ${2:dim})",
        "description": "Returns the index of the first occurrence of a minimum value within the specified dimension."
    },
    "dim_num": {
        "prefix": "dim_num",
        "body": "dim_num(${1:x})",
        "description": "Calculates the number of True values of a variable's rightmost dimension at all other dimensions."
    },
    "dim_num_n": {
        "prefix": "dim_num_n",
        "body": "dim_num_n(${1:x}, ${2:dims})",
        "description": "Calculates the number of True values of a variable's given dimensions at all other dimensions."
    },
    "dim_numrun_n": {
        "prefix": "dim_numrun_n",
        "body": "dim_numrun_n(${1:x}, ${2:opt}, ${3:dim})",
        "description": "Counts the number of \"runs\" (sequences) within a series containing zeros and ones."
    },
    "dim_pad_extend": {
        "prefix": "dim_pad_extend",
        "body": "dim_pad_extend(${1:x}, ${2:nExt}, ${3:dims}, ${4:opt})",
        "description": "Extend (i.e., expand, append, pad) an existing array  along the 'record dimension' to a user specified size."
    },
    "dim_pad_modulo": {
        "prefix": "dim_pad_modulo",
        "body": "dim_pad_modulo(${1:x}, ${2:nMod}, ${3:dims}, ${4:opt})",
        "description": "Pad (i.e., expand, append, extend) an existing array such that   the size of a specified dimension is a user specified 'modulo' length."
    },
    "dim_pqsort": {
        "prefix": "dim_pqsort",
        "body": "dim_pqsort(${1:x}, ${2:kflag})",
        "description": "Computes the permutation vector generated by sorting the n - 1th (rightmost) dimension."
    },
    "dim_pqsort_n": {
        "prefix": "dim_pqsort_n",
        "body": "dim_pqsort_n(${1:x}, ${2:kflag}, ${3:dim})",
        "description": "Computes the permutation vector generated by sorting the given dimension."
    },
    "dim_product": {
        "prefix": "dim_product",
        "body": "dim_product(${1:x})",
        "description": "Computes the product of a variable's rightmost dimension at all other dimensions."
    },
    "dim_product_n": {
        "prefix": "dim_product_n",
        "body": "dim_product_n(${1:x}, ${2:dims})",
        "description": "Computes the product of a variable's given dimension(s) at all other dimensions."
    },
    "dim_rmsd": {
        "prefix": "dim_rmsd",
        "body": "dim_rmsd(${1:x}, ${2:y})",
        "description": "Computes the root-mean-square-difference between two variables' rightmost  dimension at all other dimensions."
    },
    "dim_rmsd_n": {
        "prefix": "dim_rmsd_n",
        "body": "dim_rmsd_n(${1:x}, ${2:y}, ${3:dims})",
        "description": "Computes the root-mean-square-difference between two variables' given dimensions at all other dimensions."
    },
    "dim_rmsd_n_Wrap": {
        "prefix": "dim_rmsd_n_Wrap",
        "body": "dim_rmsd_n_Wrap(${1:x}, ${2:y}, ${3:dims})",
        "description": "Computes the root-mean-square-difference between two variables' given dimensions at all other dimensions."
    },
    "dim_rmsd_Wrap": {
        "prefix": "dim_rmsd_Wrap",
        "body": "dim_rmsd_Wrap(${1:x}, ${2:y})",
        "description": "Computes the root-mean-square-difference between two variables' rightmost  dimension at all other dimensions."
    },
    "dim_rmvmean": {
        "prefix": "dim_rmvmean",
        "body": "dim_rmvmean(${1:x})",
        "description": "Calculates and removes the mean of the (rightmost) dimension at all other dimensions."
    },
    "dim_rmvmean_n": {
        "prefix": "dim_rmvmean_n",
        "body": "dim_rmvmean_n(${1:x}, ${2:dims})",
        "description": "Calculates and removes the mean of the given dimension(s) at all other dimensions."
    },
    "dim_rmvmean_n_Wrap": {
        "prefix": "dim_rmvmean_n_Wrap",
        "body": "dim_rmvmean_n_Wrap(${1:x}, ${2:dims})",
        "description": "Calculates and removes the mean of the given dimensions at all other dimensions and retains metadata."
    },
    "dim_rmvmean_Wrap": {
        "prefix": "dim_rmvmean_Wrap",
        "body": "dim_rmvmean_Wrap(${1:x})",
        "description": "Calculates and removes the mean of the (rightmost) dimension at all other dimensions and retains metadata."
    },
    "dim_rmvmed": {
        "prefix": "dim_rmvmed",
        "body": "dim_rmvmed(${1:x})",
        "description": "Calculates and removes the median of the (rightmost) dimension at all other dimensions."
    },
    "dim_rmvmed_n": {
        "prefix": "dim_rmvmed_n",
        "body": "dim_rmvmed_n(${1:x}, ${2:dims})",
        "description": "Calculates and removes the median of the given dimension(s) at all other dimensions."
    },
    "dim_rmvmed_n_Wrap": {
        "prefix": "dim_rmvmed_n_Wrap",
        "body": "dim_rmvmed_n_Wrap(${1:x}, ${2:dims})",
        "description": "Calculates and removes the median of the given dimensions at all other dimensions and retains metadata."
    },
    "dim_rmvmed_Wrap": {
        "prefix": "dim_rmvmed_Wrap",
        "body": "dim_rmvmed_Wrap(${1:x})",
        "description": "Calculates and removes the median of the (rightmost) dimension at all other dimensions and retains metadata."
    },
    "dim_spi_n": {
        "prefix": "dim_spi_n",
        "body": "dim_spi_n(${1:x}, ${2:nrun}, ${3:opt}, ${4:dims})",
        "description": "Calculates the standardized precipitation index (SPI) by fitting a gamma or a Pearson Type III distribution to monthly precipitation values."
    },
    "dim_standardize": {
        "prefix": "dim_standardize",
        "body": "dim_standardize(${1:x}, ${2:opt})",
        "description": "Calculates standardized anomalies of the rightmost dimension at all other dimensions."
    },
    "dim_standardize_n": {
        "prefix": "dim_standardize_n",
        "body": "dim_standardize_n(${1:x}, ${2:opt}, ${3:dims})",
        "description": "Calculates standardized anomalies of the given dimension(s) at all other dimensions."
    },
    "dim_standardize_n_Wrap": {
        "prefix": "dim_standardize_n_Wrap",
        "body": "dim_standardize_n_Wrap(${1:x}, ${2:opt}, ${3:dims})",
        "description": "Calculates standardized anomalies of the given dimensions at all other dimensions and retains metadata."
    },
    "dim_standardize_Wrap": {
        "prefix": "dim_standardize_Wrap",
        "body": "dim_standardize_Wrap(${1:x}, ${2:opt})",
        "description": "Calculates standardized anomalies of the rightmost dimension at all other dimensions and retains metadata."
    },
    "dim_stat4": {
        "prefix": "dim_stat4",
        "body": "dim_stat4(${1:x})",
        "description": "Computes the first four moments (average, sample variance, skewness, and kurtosis) of the rightmost dimension for all other dimensions."
    },
    "dim_stat4_n": {
        "prefix": "dim_stat4_n",
        "body": "dim_stat4_n(${1:x}, ${2:dims})",
        "description": "Computes the first four moments (average, sample variance, skewness, and kurtosis) of the given dimension(s) for all other dimensions."
    },
    "dim_stddev": {
        "prefix": "dim_stddev",
        "body": "dim_stddev(${1:x})",
        "description": "Computes the sample standard deviation of a variable's rightmost dimension at all other dimensions."
    },
    "dim_stddev_n": {
        "prefix": "dim_stddev_n",
        "body": "dim_stddev_n(${1:x}, ${2:dims})",
        "description": "Computes the sample standard deviation of a variable's given dimension(s) at all other dimensions."
    },
    "dim_stddev_n_Wrap": {
        "prefix": "dim_stddev_n_Wrap",
        "body": "dim_stddev_n_Wrap(${1:x}, ${2:dims})",
        "description": "Computes the sample standard deviation of a variable's given dimension(s) at all other dimensions and retains metadata."
    },
    "dim_stddev_Wrap": {
        "prefix": "dim_stddev_Wrap",
        "body": "dim_stddev_Wrap(${1:x})",
        "description": "Computes the sample standard deviation of a variable's rightmost dimension at all  other dimensions and retains metadata."
    },
    "dim_sum": {
        "prefix": "dim_sum",
        "body": "dim_sum(${1:x})",
        "description": "Computes the arithmetic sum of a variable's rightmost dimension at all other dimensions."
    },
    "dim_sum_n": {
        "prefix": "dim_sum_n",
        "body": "dim_sum_n(${1:x}, ${2:dims})",
        "description": "Computes the arithmetic sum of a variable's given dimension(s) at all other dimensions."
    },
    "dim_sum_n_Wrap": {
        "prefix": "dim_sum_n_Wrap",
        "body": "dim_sum_n_Wrap(${1:x}, ${2:dims})",
        "description": "Computes the arithmetic sum of a variable's given dimensions at all other dimensions and retains metadata."
    },
    "dim_sum_wgt": {
        "prefix": "dim_sum_wgt",
        "body": "dim_sum_wgt(${1:x}, ${2:w}, ${3:opt})",
        "description": "Computes the weighted sum of a variable's rightmost dimension at all other dimensions."
    },
    "dim_sum_wgt_n": {
        "prefix": "dim_sum_wgt_n",
        "body": "dim_sum_wgt_n(${1:x}, ${2:w}, ${3:opt}, ${4:dim})",
        "description": "Computes the weighted sum of a variable's given dimension at all other dimensions."
    },
    "dim_sum_wgt_n_Wrap": {
        "prefix": "dim_sum_wgt_n_Wrap",
        "body": "dim_sum_wgt_n_Wrap(${1:x}, ${2:w}, ${3:opt}, ${4:dim})",
        "description": "Computes the weighted sum of a variable's given dimension at all other dimensions and retains metadata."
    },
    "dim_sum_wgt_Wrap": {
        "prefix": "dim_sum_wgt_Wrap",
        "body": "dim_sum_wgt_Wrap(${1:x}, ${2:w}, ${3:opt})",
        "description": "Computes the weighted sum of a variable's rightmost dimension at all other dimensions and retains metadata."
    },
    "dim_sum_Wrap": {
        "prefix": "dim_sum_Wrap",
        "body": "dim_sum_Wrap(${1:x})",
        "description": "Computes the arithmetic sum of a variable's rightmost dimension at all other dimensions and retains metadata."
    },
    "dim_variance": {
        "prefix": "dim_variance",
        "body": "dim_variance(${1:x})",
        "description": "Computes the unbiased estimates of the variance of a variable's rightmost dimension."
    },
    "dim_variance_n": {
        "prefix": "dim_variance_n",
        "body": "dim_variance_n(${1:x}, ${2:dims})",
        "description": "Computes the unbiased estimates of the variance of a variable's given dimension(s) at all other dimensions."
    },
    "dim_variance_n_Wrap": {
        "prefix": "dim_variance_n_Wrap",
        "body": "dim_variance_n_Wrap(${1:x}, ${2:dims})",
        "description": "Computes unbiased estimates of the variance of a variable's given dimension(s) at all other dimensions and retains metadata."
    },
    "dim_variance_Wrap": {
        "prefix": "dim_variance_Wrap",
        "body": "dim_variance_Wrap(${1:x})",
        "description": "Computes unbiased estimates of the variance of a variable's rightmost dimension at all other dimensions and retains metadata."
    },
    "dimsizes": {
        "prefix": "dimsizes",
        "body": "dimsizes(${1:var})",
        "description": "Returns the dimension sizes of the input variable."
    },
    "doubletobyte": {
        "prefix": "doubletobyte",
        "body": "doubletobyte(${1:double_val})",
        "description": "Coerces values of type double to values of type byte (deprecated; use tobyte)."
    },
    "doubletochar": {
        "prefix": "doubletochar",
        "body": "doubletochar(${1:double_val})",
        "description": "Coerces values of type double to values of type character (deprecated; use tochar)."
    },
    "doubletocharacter": {
        "prefix": "doubletocharacter",
        "body": "doubletocharacter(${1:double_val})",
        "description": "Coerces values of type double to values of type character (deprecated; use tochar)."
    },
    "doubletofloat": {
        "prefix": "doubletofloat",
        "body": "doubletofloat(${1:double_val})",
        "description": "Coerces values of type double to values of type float (deprecated; use tofloat)."
    },
    "doubletoint": {
        "prefix": "doubletoint",
        "body": "doubletoint(${1:double_val})",
        "description": "Coerces values of type double to values of type integer (deprecated; use toint)."
    },
    "doubletointeger": {
        "prefix": "doubletointeger",
        "body": "doubletointeger(${1:double_val})",
        "description": "Coerces values of type double to values of type integer (deprecated; use tointeger)."
    },
    "doubletolong": {
        "prefix": "doubletolong",
        "body": "doubletolong(${1:double_val})",
        "description": "Coerces values of type double to values of type long (deprecated; use tolong)."
    },
    "doubletoshort": {
        "prefix": "doubletoshort",
        "body": "doubletoshort(${1:double_val})",
        "description": "Coerces values of type double to values of type short (deprecated; use toshort)."
    },
    "dpres_hybrid_ccm": {
        "prefix": "dpres_hybrid_ccm",
        "body": "dpres_hybrid_ccm(${1:ps}, ${2:p0}, ${3:hyai}, ${4:hybi})",
        "description": "Calculates the pressure layer thicknesses of a hybrid coordinate system."
    },
    "dpres_hybrid_ccm_se": {
        "prefix": "dpres_hybrid_ccm_se",
        "body": "dpres_hybrid_ccm_se(${1:ps}, ${2:p0}, ${3:hyai}, ${4:hybi})",
        "description": "Calculates the pressure layer thickness at each mid-layer hybrid level for the spectral element model."
    },
    "dpres_plevel": {
        "prefix": "dpres_plevel",
        "body": "dpres_plevel(${1:plev}, ${2:psfc}, ${3:ptop}, ${4:iopt})",
        "description": "Calculates the pressure layer thicknesses of a constant pressure level coordinate system."
    },
    "dpres_plevel_Wrap": {
        "prefix": "dpres_plevel_Wrap",
        "body": "dpres_plevel_Wrap(${1:plev}, ${2:psfc}, ${3:ptop}, ${4:iopt})",
        "description": "Calculates the pressure layer thicknesses of a constant pressure level coordinate system."
    },
    "draw": {
        "prefix": "draw",
        "body": "draw(${1:objects})",
        "description": "Draws the given graphical objects."
    },
    "draw_color_palette": {
        "prefix": "draw_color_palette",
        "body": "draw_color_palette(${1:wks}, ${2:colors}, ${3:opt})",
        "description": "Draws the given colors or color map as a series of filled boxes."
    },
    "drawNDCGrid": {
        "prefix": "drawNDCGrid",
        "body": "drawNDCGrid(${1:wks})",
        "description": "Draws NDC grid lines at 0.1 NDC coordinate intervals and labels them."
    },
    "dsgetp": {
        "prefix": "dsgetp",
        "body": "dsgetp(${1:pnam})",
        "description": "Gets parameters for Dsgrid routines."
    },
    "dsgrid2": {
        "prefix": "dsgrid2",
        "body": "dsgrid2(${1:x}, ${2:y}, ${3:z}, ${4:xo}, ${5:yo})",
        "description": "Interpolates data from an unstructured (randomly-spaced) grid to a rectilinear grid using inverse distance weighted interpolation."
    },
    "dsgrid2d": {
        "prefix": "dsgrid2d",
        "body": "dsgrid2d(${1:x}, ${2:y}, ${3:z}, ${4:xo}, ${5:yo})",
        "description": "Interpolates double data from an unstructured (randomly-spaced) grid to a rectilinear grid using inverse distance weighted interpolation. (Deprecated version.)"
    },
    "dsgrid2s": {
        "prefix": "dsgrid2s",
        "body": "dsgrid2s(${1:x}, ${2:y}, ${3:z}, ${4:xo}, ${5:yo})",
        "description": "Interpolates float data from an unstructured (randomly-spaced) grid to a rectilinear grid using inverse distance weighted interpolation. (Deprecated version.)"
    },
    "dsgrid3": {
        "prefix": "dsgrid3",
        "body": "dsgrid3(${1:x}, ${2:y}, ${3:z}, ${4:u}, ${5:xo}, ${6:yo}, ${7:zo})",
        "description": "Interpolates data from an unstructured (randomly-spaced) grid to a 3D grid using inverse distance weighted interpolation."
    },
    "dsgrid3d": {
        "prefix": "dsgrid3d",
        "body": "dsgrid3d(${1:x}, ${2:y}, ${3:z}, ${4:u}, ${5:xo}, ${6:yo}, ${7:zo})",
        "description": "Interpolates double data from an unstructured (randomly-spaced) grid to a 3D grid using inverse distance weighted interpolation.  (Deprecated version.)"
    },
    "dsgrid3s": {
        "prefix": "dsgrid3s",
        "body": "dsgrid3s(${1:x}, ${2:y}, ${3:z}, ${4:u}, ${5:xo}, ${6:yo}, ${7:zo})",
        "description": "Interpolates float data from an unstructured (randomly-spaced) grid to a 3D grid using inverse distance weighted interpolation.  (Deprecated version.)"
    },
    "dspnt2": {
        "prefix": "dspnt2",
        "body": "dspnt2(${1:x}, ${2:y}, ${3:z}, ${4:xo}, ${5:yo})",
        "description": "Interpolates 2D data at specified points."
    },
    "dspnt2d": {
        "prefix": "dspnt2d",
        "body": "dspnt2d(${1:x}, ${2:y}, ${3:z}, ${4:xo}, ${5:yo})",
        "description": "Interpolates 2D data at specified points.   (Deprecated version.)"
    },
    "dspnt2s": {
        "prefix": "dspnt2s",
        "body": "dspnt2s(${1:x}, ${2:y}, ${3:z}, ${4:xo}, ${5:yo})",
        "description": "Interpolates 2D float data at specified points.   (Deprecated version.)"
    },
    "dspnt3": {
        "prefix": "dspnt3",
        "body": "dspnt3(${1:x}, ${2:y}, ${3:z}, ${4:u}, ${5:xo}, ${6:yo}, ${7:zo})",
        "description": "Interpolates 3D data at specified points."
    },
    "dspnt3d": {
        "prefix": "dspnt3d",
        "body": "dspnt3d(${1:x}, ${2:y}, ${3:z}, ${4:u}, ${5:xo}, ${6:yo}, ${7:zo})",
        "description": "Interpolates 3D double data at specified points. (Deprecated version.)"
    },
    "dspnt3s": {
        "prefix": "dspnt3s",
        "body": "dspnt3s(${1:x}, ${2:y}, ${3:z}, ${4:u}, ${5:xo}, ${6:yo}, ${7:zo})",
        "description": "Interpolates 3D float data at specified points. (Deprecated version.)"
    },
    "dssetp": {
        "prefix": "dssetp",
        "body": "dssetp(${1:pnam}, ${2:pval})",
        "description": "Sets parameters for Dsgrid routines."
    },
    "dtrend": {
        "prefix": "dtrend",
        "body": "dtrend(${1:y}, ${2:return_info})",
        "description": "Estimates and removes the least squares linear trend of the rightmost dimension from all grid points."
    },
    "dtrend_leftdim": {
        "prefix": "dtrend_leftdim",
        "body": "dtrend_leftdim(${1:y}, ${2:return_info})",
        "description": "Estimates and removes the least squares linear trend of the leftmost dimension from all grid points and retains metadata."
    },
    "dtrend_msg": {
        "prefix": "dtrend_msg",
        "body": "dtrend_msg(${1:x}, ${2:y}, ${3:remove_mean}, ${4:return_info})",
        "description": "Estimates and removes the least squares linear trend of the rightmost dimension from all grid points (missing values allowed)."
    },
    "dtrend_msg_n": {
        "prefix": "dtrend_msg_n",
        "body": "dtrend_msg_n(${1:x}, ${2:y}, ${3:remove_mean}, ${4:return_info}, ${5:dim})",
        "description": "Estimates and removes the least squares linear trend of the dim-th dimension from all grid points (missing values allowed)."
    },
    "dtrend_n": {
        "prefix": "dtrend_n",
        "body": "dtrend_n(${1:y}, ${2:return_info}, ${3:dim})",
        "description": "Estimates and removes the least squares linear trend of the given dimension from all grid points."
    },
    "dtrend_quadratic": {
        "prefix": "dtrend_quadratic",
        "body": "dtrend_quadratic(${1:y}, ${2:option})",
        "description": "Estimates and removes the least squares quadratic trend of the rightmost dimension from all grid points."
    },
    "dtrend_quadratic_msg_n": {
        "prefix": "dtrend_quadratic_msg_n",
        "body": "dtrend_quadratic_msg_n(${1:y}, ${2:remove_mean}, ${3:return_info}, ${4:dim})",
        "description": "Estimates and removes the least squares quadratic trend of the dim-th dimension from all grid points (missing values allowed)."
    },
    "dv2uvF": {
        "prefix": "dv2uvF",
        "body": "dv2uvF(${1:dv})",
        "description": "Computes the divergent (irrotational) wind components for a fixed grid via spherical harmonics."
    },
    "dv2uvf": {
        "prefix": "dv2uvf",
        "body": "dv2uvf(${1:dv}, ${2:ud}, ${3:vd})",
        "description": "Computes the divergent (irrotational) wind components for a fixed grid via spherical harmonics."
    },
    "dv2uvF_Wrap": {
        "prefix": "dv2uvF_Wrap",
        "body": "dv2uvF_Wrap(${1:dv})",
        "description": "Computes the divergent (irrotational) wind components for a fixed grid via spherical harmonics and retains metadata."
    },
    "dv2uvG": {
        "prefix": "dv2uvG",
        "body": "dv2uvG(${1:dv})",
        "description": "Computes the divergent (irrotational) wind components for a gaussian grid via spherical harmonics."
    },
    "dv2uvg": {
        "prefix": "dv2uvg",
        "body": "dv2uvg(${1:dv}, ${2:ud}, ${3:vd})",
        "description": "Computes the divergent (irrotational) wind components for a gaussian grid via spherical harmonics."
    },
    "dv2uvG_Wrap": {
        "prefix": "dv2uvG_Wrap",
        "body": "dv2uvG_Wrap(${1:dv})",
        "description": "Computes the divergent (irrotational) wind components for a gaussian grid via spherical harmonics and retains metadata."
    },
    "dz_height": {
        "prefix": "dz_height",
        "body": "dz_height(${1:z}, ${2:zsfc}, ${3:ztop}, ${4:iopt})",
        "description": "Calculates the height layer thicknesses at each grid point over varying surface terrain."
    },
    "eady_growth_rate": {
        "prefix": "eady_growth_rate",
        "body": "eady_growth_rate(${1:th}, ${2:u}, ${3:z}, ${4:lat}, ${5:opt}, ${6:dim})",
        "description": "Compute the maximum Eady growth rate."
    },
    "echo_off": {
        "prefix": "echo_off",
        "body": "echo_off()",
        "description": "Disables echoing of NCL statements as they are encountered."
    },
    "echo_on": {
        "prefix": "echo_on",
        "body": "echo_on()",
        "description": "Enables echoing of NCL statements as they are encountered."
    },
    "eemd": {
        "prefix": "eemd",
        "body": "eemd(${1:x}, ${2:nimf}, ${3:nrep}, ${4:noise}, ${5:opt}, ${6:dims})",
        "description": "Perform ensemble empirical mode decomposition (EEMD)."
    },
    "enthalpy": {
        "prefix": "enthalpy",
        "body": "enthalpy(${1:t}, ${2:w}, ${3:iounit})",
        "description": "Compute atmospheric enthalpy."
    },
    "eof2data": {
        "prefix": "eof2data",
        "body": "eof2data(${1:ev}, ${2:ev_ts})",
        "description": "Reconstructs a data set from EOFs and EOF time series."
    },
    "eof2data_n": {
        "prefix": "eof2data_n",
        "body": "eof2data_n(${1:ev}, ${2:ev_ts}, ${3:dim})",
        "description": "Reconstructs a data set from EOFs and EOF time series, given an index that specifies which dimension contains the time dimemsion."
    },
    "eof_varimax": {
        "prefix": "eof_varimax",
        "body": "eof_varimax(${1:evec})",
        "description": "Rotates EOFs using the using Kaiser row normalization and the varimax criterion  (deprecated version)."
    },
    "eofcor": {
        "prefix": "eofcor",
        "body": "eofcor(${1:data}, ${2:neval})",
        "description": "Calculates empirical orthogonal functions via a correlation matrix  (NCL's original function)."
    },
    "eofcor_pcmsg": {
        "prefix": "eofcor_pcmsg",
        "body": "eofcor_pcmsg(${1:data}, ${2:neval}, ${3:pcrit})",
        "description": "Calculates empirical orthogonal functions via a correlation matrix  (missing values allowed) (deprecated version)."
    },
    "eofcor_ts": {
        "prefix": "eofcor_ts",
        "body": "eofcor_ts(${1:data}, ${2:evec})",
        "description": "Calculates the time series of the amplitudes associated with each eigenvalue in an EOF which was calculated using a correlation matrix."
    },
    "eofcor_Wrap": {
        "prefix": "eofcor_Wrap",
        "body": "eofcor_Wrap(${1:data}, ${2:neval})",
        "description": "Calculates empirical orthogonal functions and retains metadata.  (NCL's original function)."
    },
    "eofcov": {
        "prefix": "eofcov",
        "body": "eofcov(${1:data}, ${2:neval})",
        "description": "Calculates empirical orthogonal functions via a covariance matrix  (original version)."
    },
    "eofcov_pcmsg": {
        "prefix": "eofcov_pcmsg",
        "body": "eofcov_pcmsg(${1:data}, ${2:neval}, ${3:pcrit})",
        "description": "Calculates empirical orthogonal functions via a covariance matrix  (missing values allowed)(deprecated version)."
    },
    "eofcov_ts": {
        "prefix": "eofcov_ts",
        "body": "eofcov_ts(${1:data}, ${2:evec})",
        "description": "Calculates the time series of the amplitudes associated with each eigenvalue in an EOF which was calculated using a covariance matrix."
    },
    "eofcov_Wrap": {
        "prefix": "eofcov_Wrap",
        "body": "eofcov_Wrap(${1:data}, ${2:neval})",
        "description": "Calculates empirical orthogonal functions and retains metadata.  (NCL's original EOF function)."
    },
    "eofunc": {
        "prefix": "eofunc",
        "body": "eofunc(${1:data}, ${2:neval}, ${3:optEOF})",
        "description": "Computes empirical orthogonal functions (EOFs, aka: Principal Component Analysis)."
    },
    "eofunc_n": {
        "prefix": "eofunc_n",
        "body": "eofunc_n(${1:data}, ${2:neval}, ${3:optEOF}, ${4:dim})",
        "description": "Computes empirical orthogonal functions (EOFs, aka: Principal Component Analysis), given an index that specifies which dimension contains the number of observations."
    },
    "eofunc_n_Wrap": {
        "prefix": "eofunc_n_Wrap",
        "body": "eofunc_n_Wrap(${1:data}, ${2:neval}, ${3:optEOF}, ${4:dim})",
        "description": "Computes empirical orthogonal functions (aka: Principal Component Analysis, Eigen Analysis) given an index that specifies which dimension contains the number of observations, and retains metadata."
    },
    "eofunc_north": {
        "prefix": "eofunc_north",
        "body": "eofunc_north(${1:eval}, ${2:N}, ${3:prinfo})",
        "description": "Use North et al (MWR, 1982) equation 24 to evaluate eigenvalue separation."
    },
    "eofunc_ts": {
        "prefix": "eofunc_ts",
        "body": "eofunc_ts(${1:data}, ${2:evec}, ${3:optETS})",
        "description": "Calculates the time series of the amplitudes associated with each eigenvalue in an EOF."
    },
    "eofunc_ts_n": {
        "prefix": "eofunc_ts_n",
        "body": "eofunc_ts_n(${1:data}, ${2:evec}, ${3:optETS}, ${4:dim})",
        "description": "Calculates the time series of the amplitudes associated with each eigenvalue in an EOF, given an index that specifies the time dimension."
    },
    "eofunc_ts_n_Wrap": {
        "prefix": "eofunc_ts_n_Wrap",
        "body": "eofunc_ts_n_Wrap(${1:data}, ${2:evec}, ${3:optETS}, ${4:dim})",
        "description": "Calculates the time series of the amplitudes associated with each eigenvalue in an EOF, given an index that specifies the time dimension, and retains metadata."
    },
    "eofunc_ts_Wrap": {
        "prefix": "eofunc_ts_Wrap",
        "body": "eofunc_ts_Wrap(${1:data}, ${2:evec}, ${3:optETS})",
        "description": "Calculates the time series of the amplitudes associated with each eigenvalue in an EOF and retains metadata."
    },
    "eofunc_varimax": {
        "prefix": "eofunc_varimax",
        "body": "eofunc_varimax(${1:evec}, ${2:optEVX})",
        "description": "Rotates EOFs using the using Kaiser row normalization and the varimax criterion."
    },
    "eofunc_varimax_reorder": {
        "prefix": "eofunc_varimax_reorder",
        "body": "eofunc_varimax_reorder(${1:evec_rot})",
        "description": "Reorder the results returned by eof_varimax into  descending order by percent variance explained."
    },
    "eofunc_varimax_Wrap": {
        "prefix": "eofunc_varimax_Wrap",
        "body": "eofunc_varimax_Wrap(${1:evec}, ${2:optEVX})",
        "description": "Rotates EOFs using the using Kaiser row normalization and the varimax criterion and retains metadata."
    },
    "eofunc_Wrap": {
        "prefix": "eofunc_Wrap",
        "body": "eofunc_Wrap(${1:data}, ${2:neval}, ${3:optEOF})",
        "description": "Computes empirical orthogonal functions (aka: Principal Component Analysis, Eigen Analysis) and retains metadata."
    },
    "epflux": {
        "prefix": "epflux",
        "body": "epflux(${1:u}, ${2:v}, ${3:t}, ${4:plvl}, ${5:lat}, ${6:opt})",
        "description": "Compute quasi-geostrophic Eliassen-Palm fluxes at isobaric levels using NCEP Reanalysis."
    },
    "epsZero": {
        "prefix": "epsZero",
        "body": "epsZero(${1:x}, ${2:eps})",
        "description": "Sets all values in input array to zero that are +/- a user supplied epsilon about zero."
    },
    "equiv_sample_size": {
        "prefix": "equiv_sample_size",
        "body": "equiv_sample_size(${1:x}, ${2:siglvl}, ${3:opt})",
        "description": "Estimates the number of independent values in a series of correlated values."
    },
    "erf": {
        "prefix": "erf",
        "body": "erf(${1:x})",
        "description": "Evaluates the real error function."
    },
    "erfc": {
        "prefix": "erfc",
        "body": "erfc(${1:x})",
        "description": "Evaluates the real complementary error function."
    },
    "esacr": {
        "prefix": "esacr",
        "body": "esacr(${1:x}, ${2:mxlag})",
        "description": "Computes sample auto-correlations."
    },
    "esacr_n": {
        "prefix": "esacr_n",
        "body": "esacr_n(${1:x}, ${2:mxlag}, ${3:dim})",
        "description": "Computes sample auto-correlations on the given dimension."
    },
    "esacv": {
        "prefix": "esacv",
        "body": "esacv(${1:x}, ${2:mxlag})",
        "description": "Computes sample auto-covariances"
    },
    "esccr": {
        "prefix": "esccr",
        "body": "esccr(${1:x}, ${2:y}, ${3:mxlag})",
        "description": "Computes sample cross-correlations."
    },
    "esccv": {
        "prefix": "esccv",
        "body": "esccv(${1:x}, ${2:y}, ${3:mxlag})",
        "description": "Computes sample cross-covariances."
    },
    "escorc": {
        "prefix": "escorc",
        "body": "escorc(${1:x}, ${2:y})",
        "description": "Computes the (Pearson) sample linear cross-correlations at lag 0 only."
    },
    "escorc_n": {
        "prefix": "escorc_n",
        "body": "escorc_n(${1:x}, ${2:y}, ${3:dims_x}, ${4:dims_y})",
        "description": "Computes the (Pearson) sample linear cross-correlations at lag 0 only, across the specified dimensions."
    },
    "escovc": {
        "prefix": "escovc",
        "body": "escovc(${1:x}, ${2:y})",
        "description": "Computes sample cross-covariances at lag 0 only."
    },
    "ESMF_regrid": {
        "prefix": "ESMF_regrid",
        "body": "ESMF_regrid(${1:data}, ${2:opt})",
        "description": "Regrids data from one lat/lon grid to another, using ESMF software."
    },
    "ESMF_regrid_gen_weights": {
        "prefix": "ESMF_regrid_gen_weights",
        "body": "ESMF_regrid_gen_weights(${1:srcGridFile}, ${2:dstGridFile}, ${3:wgtFile}, ${4:opt})",
        "description": "Writes a weight file using the offline ESMF weight generator."
    },
    "ESMF_regrid_with_weights": {
        "prefix": "ESMF_regrid_with_weights",
        "body": "ESMF_regrid_with_weights(${1:data}, ${2:wgtFile}, ${3:opt})",
        "description": "Using the provided weight file, regrids data from one lat/lon grid to another."
    },
    "exit": {
        "prefix": "exit",
        "body": "exit()",
        "description": "Forces an NCL script to exit immediately."
    },
    "exp": {
        "prefix": "exp",
        "body": "exp(${1:value})",
        "description": "Computes the value of e (the base of natural logarithms) raised to the power of the input."
    },
    "exp_tapersh": {
        "prefix": "exp_tapersh",
        "body": "exp_tapersh(${1:a}, ${2:b}, ${3:N}, ${4:r})",
        "description": "Performs tapering (filtering) of the spherical harmonic coefficients."
    },
    "exp_tapersh_wgts": {
        "prefix": "exp_tapersh_wgts",
        "body": "exp_tapersh_wgts(${1:M}, ${2:N}, ${3:r})",
        "description": "Calculates weights which can be used to perform tapering (filtering) of spherical harmonic coefficients."
    },
    "exp_tapershC": {
        "prefix": "exp_tapershC",
        "body": "exp_tapershC(${1:ab}, ${2:N}, ${3:r})",
        "description": "Performs tapering (filtering) of the spherical harmonic coefficients."
    },
    "exponential_curve_fit": {
        "prefix": "exponential_curve_fit",
        "body": "exponential_curve_fit(${1:x}, ${2:y}, ${3:dims}, ${4:opt})",
        "description": "Calculates the coefficients for a simple exponential curve fit of the form ' y = A*exp(B*x)' using least squares."
    },
    "extract_globalatts_hdf5": {
        "prefix": "extract_globalatts_hdf5",
        "body": "extract_globalatts_hdf5(${1:info}, ${2:key_word})",
        "description": "Extract value from 'KEYWORD,VALUE' pair returned by  getfilevaratts_hdf5."
    },
    "extval_frechet": {
        "prefix": "extval_frechet",
        "body": "extval_frechet(${1:x}, ${2:shape}, ${3:scale}, ${4:center}, ${5:opt})",
        "description": "Calculates the probability (PDF) and cumulative (CDF) distribution functions of the  Frechet Type II distribution given the shape, scale and location parameters."
    },
    "extval_gev": {
        "prefix": "extval_gev",
        "body": "extval_gev(${1:x}, ${2:shape}, ${3:scale}, ${4:center}, ${5:opt})",
        "description": "Calculates the probability (PDF) and cumulative (CDF) distribution functions of the  Generalized Extreme Value (GEV) distribution given the shape, scale and location parameters."
    },
    "extval_gumbel": {
        "prefix": "extval_gumbel",
        "body": "extval_gumbel(${1:x}, ${2:scale}, ${3:center}, ${4:opt})",
        "description": "Calculates the probability (PDF) and cumulative (CDF) distribution functions of the  Gumbel (Type I) distribution function given the scale and location parameters."
    },
    "extval_mlegam": {
        "prefix": "extval_mlegam",
        "body": "extval_mlegam(${1:x}, ${2:dims}, ${3:opt})",
        "description": "Estimates the location, shape, scale and other parameters for the Gamma distribution using maximum-likelihood estimation (MLE)."
    },
    "extval_mlegev": {
        "prefix": "extval_mlegev",
        "body": "extval_mlegev(${1:x}, ${2:dims}, ${3:opt})",
        "description": "Estimates the shape, scale and location parameters for the Generalized Extreme-Value (GEV) distribution using Maximum-Likelihood Estimation (MLE)."
    },
    "extval_pareto": {
        "prefix": "extval_pareto",
        "body": "extval_pareto(${1:x}, ${2:shape}, ${3:scale}, ${4:center}, ${5:ptype}, ${6:opt})",
        "description": "Calculates the probability (PDF) and cumulative (CDF) distribution functions of the  Pareto distributions (Generalized, Type I, TYpe II) given the shape, scale and location parameters."
    },
    "extval_recurrence_table": {
        "prefix": "extval_recurrence_table",
        "body": "extval_recurrence_table(${1:time}, ${2:x}, ${3:dims}, ${4:opt})",
        "description": "Calculates the recurrence interval (return period), cumulative and exceedence probabilities based upon a time series."
    },
    "extval_return_period": {
        "prefix": "extval_return_period",
        "body": "extval_return_period(${1:Tr}, ${2:Pr})",
        "description": "Calculates the period of an event (eg, flood, heat wave, drought)  occurring given an average event recurrence interval and specified probability level."
    },
    "extval_return_prob": {
        "prefix": "extval_return_prob",
        "body": "extval_return_prob(${1:Te}, ${2:Nr})",
        "description": "Calculates the probability of an event (eg, flood, heat wave, drought) given an average event interval and a specified exceedance period."
    },
    "extval_weibull": {
        "prefix": "extval_weibull",
        "body": "extval_weibull(${1:x}, ${2:shape}, ${3:scale}, ${4:center}, ${5:opt})",
        "description": "Calculates the probability (PDF) and cumulative (CDF) distribution functions of the  Weibull Type III distribution given the shape, scale and location parameters."
    },
    "ezfftb": {
        "prefix": "ezfftb",
        "body": "ezfftb(${1:cf}, ${2:xbar})",
        "description": "Perform a Fourier synthesis from real and imaginary coefficients."
    },
    "ezfftb_n": {
        "prefix": "ezfftb_n",
        "body": "ezfftb_n(${1:cf}, ${2:xbar}, ${3:dim})",
        "description": "Perform a Fourier synthesis from real and imaginary coefficients on the given dimension."
    },
    "ezfftf": {
        "prefix": "ezfftf",
        "body": "ezfftf(${1:x})",
        "description": "Perform a Fourier analysis on a real periodic sequence."
    },
    "ezfftf_n": {
        "prefix": "ezfftf_n",
        "body": "ezfftf_n(${1:x}, ${2:dim})",
        "description": "Performs a Fourier analysis on a real periodic sequence on the given dimension."
    },
    "f2fosh": {
        "prefix": "f2fosh",
        "body": "f2fosh(${1:grid})",
        "description": "Interpolates a scalar quantity from a fixed grid (including pole points) to a fixed-offset grid."
    },
    "f2fosh_Wrap": {
        "prefix": "f2fosh_Wrap",
        "body": "f2fosh_Wrap(${1:grid})",
        "description": "Interpolates a scalar quantity from a fixed grid (including pole points) to a fixed-offset grid (retains metadata)."
    },
    "f2foshv": {
        "prefix": "f2foshv",
        "body": "f2foshv(${1:ureg}, ${2:vreg}, ${3:uoff}, ${4:voff})",
        "description": "Interpolates a vector quantity on a fixed grid (including pole points) to a fixed-offset grid."
    },
    "f2foshv_Wrap": {
        "prefix": "f2foshv_Wrap",
        "body": "f2foshv_Wrap(${1:ureg}, ${2:vreg}, ${3:uoff}, ${4:voff})",
        "description": "Interpolates a vector quantity on a fixed grid (including pole points) to a fixed-offset grid (retains metadata)."
    },
    "f2fsh": {
        "prefix": "f2fsh",
        "body": "f2fsh(${1:grid}, ${2:outdims})",
        "description": "Interpolates a scalar quantity from one fixed grid to another."
    },
    "f2fsh_Wrap": {
        "prefix": "f2fsh_Wrap",
        "body": "f2fsh_Wrap(${1:grid}, ${2:outdims})",
        "description": "Interpolates a scalar quantity from one fixed grid to another (retains metadata)."
    },
    "f2fshv": {
        "prefix": "f2fshv",
        "body": "f2fshv(${1:ua}, ${2:va}, ${3:ub}, ${4:vb})",
        "description": "Interpolates a vector quantity from one fixed grid to another."
    },
    "f2fshv_Wrap": {
        "prefix": "f2fshv_Wrap",
        "body": "f2fshv_Wrap(${1:ua}, ${2:va}, ${3:ub}, ${4:vb})",
        "description": "Interpolates a vector quantity from one fixed grid to another (retains metadata)."
    },
    "f2gsh": {
        "prefix": "f2gsh",
        "body": "f2gsh(${1:grid}, ${2:outdims}, ${3:twave})",
        "description": "Interpolates a scalar quantity from a fixed grid to a Gaussian grid (with optional truncation)."
    },
    "f2gsh_Wrap": {
        "prefix": "f2gsh_Wrap",
        "body": "f2gsh_Wrap(${1:grid}, ${2:outdims}, ${3:twave})",
        "description": "Interpolates a scalar quantity from a fixed grid to a Gaussian grid (with optional truncation) (retains metadata)."
    },
    "f2gshv": {
        "prefix": "f2gshv",
        "body": "f2gshv(${1:ua}, ${2:va}, ${3:ub}, ${4:vb}, ${5:twave})",
        "description": "Interpolates a vector quantity on a fixed grid to a Gaussian grid (optional truncation)."
    },
    "f2gshv_Wrap": {
        "prefix": "f2gshv_Wrap",
        "body": "f2gshv_Wrap(${1:ua}, ${2:va}, ${3:ub}, ${4:vb}, ${5:twave})",
        "description": "Interpolates a vector quantity on a fixed grid to a Gaussian grid (optional truncation) (retains metadata)."
    },
    "fabs": {
        "prefix": "fabs",
        "body": "fabs(${1:value})",
        "description": "Computes the absolute value of numeric types."
    },
    "fbindirread": {
        "prefix": "fbindirread",
        "body": "fbindirread(${1:path}, ${2:rec_num}, ${3:rec_dims}, ${4:rec_type})",
        "description": "Reads binary records written by a Fortran direct access write or C write."
    },
    "fbindirSwap": {
        "prefix": "fbindirSwap",
        "body": "fbindirSwap(${1:in_file}, ${2:dims}, ${3:type}, ${4:out_file})",
        "description": "Reads byte-reversed data and writes output file that can be read by fbindirread or cbinread (deprecated)."
    },
    "fbindirwrite": {
        "prefix": "fbindirwrite",
        "body": "fbindirwrite(${1:path}, ${2:var})",
        "description": "Writes binary records to a file in manner analogous to fortran's \"access=direct\"."
    },
    "fbinnumrec": {
        "prefix": "fbinnumrec",
        "body": "fbinnumrec(${1:path})",
        "description": "Returns the number of unformatted sequential Fortran records in a binary file."
    },
    "fbinread": {
        "prefix": "fbinread",
        "body": "fbinread(${1:filepath}, ${2:rec_dims}, ${3:rec_type})",
        "description": "Reads one binary record that has been written using an UNFORMATTED FORTRAN write."
    },
    "fbinrecread": {
        "prefix": "fbinrecread",
        "body": "fbinrecread(${1:path}, ${2:rec_num}, ${3:rec_dims}, ${4:rec_type})",
        "description": "Reads unformatted sequential access Fortran binary files."
    },
    "fbinrecwrite": {
        "prefix": "fbinrecwrite",
        "body": "fbinrecwrite(${1:path}, ${2:rec_num}, ${3:var})",
        "description": "Writes a single unformatted sequential access Fortran record to a file."
    },
    "fbinseqSwap1": {
        "prefix": "fbinseqSwap1",
        "body": "fbinseqSwap1(${1:in_file}, ${2:out_file}, ${3:type}, ${4:dims})",
        "description": "Byte swaps Fortran sequential files (deprecated)."
    },
    "fbinseqSwap2": {
        "prefix": "fbinseqSwap2",
        "body": "fbinseqSwap2(${1:in_file}, ${2:out_file}, ${3:type}, ${4:dims})",
        "description": "Byte swaps Fortran sequential files (more memory friendly) (deprecated)."
    },
    "fbinwrite": {
        "prefix": "fbinwrite",
        "body": "fbinwrite(${1:filepath}, ${2:value})",
        "description": "Writes a single  binary record to a file in manner analogous to Fortran's \"form=unformatted, access=sequential\"."
    },
    "fft2db": {
        "prefix": "fft2db",
        "body": "fft2db(${1:coef})",
        "description": "Performs a two-dimensional discrete backward Fourier transform (Fourier synthesis)."
    },
    "fft2df": {
        "prefix": "fft2df",
        "body": "fft2df(${1:x})",
        "description": "Performs a two-dimensional forward real discrete Fourier transform (i.e., Fourier analysis) of a real periodic array."
    },
    "fftshift": {
        "prefix": "fftshift",
        "body": "fftshift(${1:x}, ${2:mode})",
        "description": "Rearranges an array in a manner similar to Matlab's fftshift function."
    },
    "fileattdef": {
        "prefix": "fileattdef",
        "body": "fileattdef(${1:thefile}, ${2:variable})",
        "description": "Defines global (file) attributes associated with a  supported file."
    },
    "filechunkdimdef": {
        "prefix": "filechunkdimdef",
        "body": "filechunkdimdef(${1:thefile}, ${2:dim_names}, ${3:dim_sizes}, ${4:dim_unlimited})",
        "description": "Defines chunking dimension names, dimension sizes, unlimited dimensions on a  supported file."
    },
    "filedimdef": {
        "prefix": "filedimdef",
        "body": "filedimdef(${1:thefile}, ${2:dim_names}, ${3:dim_sizes}, ${4:dim_unlimited})",
        "description": "Defines dimension names, dimension sizes, unlimited dimensions on a  supported file."
    },
    "fileexists": {
        "prefix": "fileexists",
        "body": "fileexists(${1:file_path})",
        "description": "Checks for existence of any UNIX file."
    },
    "filegrpdef": {
        "prefix": "filegrpdef",
        "body": "filegrpdef(${1:thefile}, ${2:grp_names})",
        "description": "Defines a list of group (names), for a supported file, or group."
    },
    "filevarattdef": {
        "prefix": "filevarattdef",
        "body": "filevarattdef(${1:thefile}, ${2:varnames}, ${3:variable})",
        "description": "Copies attributes from an input variable to one or more variables on a  supported file."
    },
    "filevarchunkdef": {
        "prefix": "filevarchunkdef",
        "body": "filevarchunkdef(${1:thefile}, ${2:var_name}, ${3:chunk_dim_sizes})",
        "description": "Defines a list of variable names, variable var_types, and variable dimension names for a supported file."
    },
    "filevarcompressleveldef": {
        "prefix": "filevarcompressleveldef",
        "body": "filevarcompressleveldef(${1:thefile}, ${2:var_name}, ${3:compressLevel})",
        "description": "Defines a list of variable names, variable var_types, and variable dimension names for a supported file."
    },
    "filevardef": {
        "prefix": "filevardef",
        "body": "filevardef(${1:thefile}, ${2:var_names}, ${3:var_types}, ${4:dim_names})",
        "description": "Defines a list of variable names, variable types, and variable dimension names for a supported file."
    },
    "filevardimsizes": {
        "prefix": "filevardimsizes",
        "body": "filevardimsizes(${1:thefile}, ${2:varname})",
        "description": "Returns the dimension sizes of a variable on the given file (deprecated; use getfilevardimsizes)."
    },
    "filwgts_lancos": {
        "prefix": "filwgts_lancos",
        "body": "filwgts_lancos(${1:nwt}, ${2:ihp}, ${3:fca}, ${4:fcb}, ${5:nsigma})",
        "description": "Calculates one-dimensional filter weights (deprecated)."
    },
    "filwgts_lanczos": {
        "prefix": "filwgts_lanczos",
        "body": "filwgts_lanczos(${1:nwt}, ${2:ihp}, ${3:fca}, ${4:fcb}, ${5:nsigma})",
        "description": "Calculates one-dimensional filter weights."
    },
    "filwgts_normal": {
        "prefix": "filwgts_normal",
        "body": "filwgts_normal(${1:nwt}, ${2:sigma}, ${3:option})",
        "description": "Calculates one-dimensional filter weights based upon the normal (gaussian) distribution."
    },
    "fire_index_haines": {
        "prefix": "fire_index_haines",
        "body": "fire_index_haines(${1:p}, ${2:t}, ${3:td}, ${4:opt})",
        "description": "Computes the Haines fire index (aka: Lower Atmosphere Severity Index) from a sounding."
    },
    "floattobyte": {
        "prefix": "floattobyte",
        "body": "floattobyte(${1:float_val})",
        "description": "Coerces values of type float to values of type byte."
    },
    "floattochar": {
        "prefix": "floattochar",
        "body": "floattochar(${1:float_val})",
        "description": "Coerces values of type float to values of type character."
    },
    "floattocharacter": {
        "prefix": "floattocharacter",
        "body": "floattocharacter(${1:float_val})",
        "description": "Coerces values of type float to values of type character."
    },
    "floattoint": {
        "prefix": "floattoint",
        "body": "floattoint(${1:float_val})",
        "description": "Coerces values of type float to values of type integer."
    },
    "floattointeger": {
        "prefix": "floattointeger",
        "body": "floattointeger(${1:float_val})",
        "description": "Coerces values of type float to values of type integer."
    },
    "floattolong": {
        "prefix": "floattolong",
        "body": "floattolong(${1:float_val})",
        "description": "Coerces values of type float to values of type long."
    },
    "floattoshort": {
        "prefix": "floattoshort",
        "body": "floattoshort(${1:float_val})",
        "description": "Coerces values of type float to values of type short."
    },
    "floor": {
        "prefix": "floor",
        "body": "floor(${1:values})",
        "description": "Returns the largest integral value less than or equal to each input value."
    },
    "flt2dble": {
        "prefix": "flt2dble",
        "body": "flt2dble(${1:x})",
        "description": "Converts values of type float to values of type double and preserves metadata."
    },
    "flt2string": {
        "prefix": "flt2string",
        "body": "flt2string(${1:x})",
        "description": "Converts values of type float to values of type string."
    },
    "fluxEddy": {
        "prefix": "fluxEddy",
        "body": "fluxEddy(${1:x}, ${2:y})",
        "description": "Calculates time averaged eddy flux quantities."
    },
    "fo2fsh": {
        "prefix": "fo2fsh",
        "body": "fo2fsh(${1:grid})",
        "description": "Interpolates a scalar quantity from a fixed-offset grid to a fixed grid."
    },
    "fo2fsh_Wrap": {
        "prefix": "fo2fsh_Wrap",
        "body": "fo2fsh_Wrap(${1:grid})",
        "description": "Interpolates a scalar quantity from a fixed-offset grid to a fixed grid (retains metadata)."
    },
    "fo2fshv": {
        "prefix": "fo2fshv",
        "body": "fo2fshv(${1:uoff}, ${2:voff}, ${3:ureg}, ${4:vreg})",
        "description": "Interpolates a vector quantity from a fixed-offset grid to a fixed grid."
    },
    "fo2fshv_Wrap": {
        "prefix": "fo2fshv_Wrap",
        "body": "fo2fshv_Wrap(${1:uoff}, ${2:voff}, ${3:ureg}, ${4:vreg})",
        "description": "Interpolates a vector quantity from a fixed-offset grid to a fixed grid (retains metadata)."
    },
    "fourier_info": {
        "prefix": "fourier_info",
        "body": "fourier_info(${1:x}, ${2:nhx}, ${3:sclPhase})",
        "description": "Performs Fourier analysis on one or more periodic series."
    },
    "frame": {
        "prefix": "frame",
        "body": "frame(${1:wks})",
        "description": "Updates and clears the given workstation objects."
    },
    "fspan": {
        "prefix": "fspan",
        "body": "fspan(${1:start}, ${2:finish}, ${3:npts})",
        "description": "Creates an array of evenly-spaced floating point numbers."
    },
    "ftcurv": {
        "prefix": "ftcurv",
        "body": "ftcurv(${1:xi}, ${2:yi}, ${3:xo})",
        "description": "Calculates an interpolatory spline through a sequence of functional values."
    },
    "ftcurvd": {
        "prefix": "ftcurvd",
        "body": "ftcurvd(${1:xi}, ${2:yi}, ${3:xo})",
        "description": "Calculates the derivatives of an interpolatory spline under tension."
    },
    "ftcurvi": {
        "prefix": "ftcurvi",
        "body": "ftcurvi(${1:xl}, ${2:xr}, ${3:xi}, ${4:yi})",
        "description": "Calculates integrals of an interpolatory spline under tension between two user-specified limits."
    },
    "ftcurvp": {
        "prefix": "ftcurvp",
        "body": "ftcurvp(${1:xi}, ${2:yi}, ${3:p}, ${4:xo})",
        "description": "Calculates an interpolatory spline under tension through a sequence of functional values for a periodic function."
    },
    "ftcurvpi": {
        "prefix": "ftcurvpi",
        "body": "ftcurvpi(${1:xl}, ${2:xr}, ${3:p}, ${4:xi}, ${5:yi})",
        "description": "Calculates an integral of an interpolatory spline between two specified points."
    },
    "ftcurvps": {
        "prefix": "ftcurvps",
        "body": "ftcurvps(${1:xi}, ${2:yi}, ${3:p}, ${4:d}, ${5:xo})",
        "description": "Calculates a smoothing spline."
    },
    "ftcurvs": {
        "prefix": "ftcurvs",
        "body": "ftcurvs(${1:xi}, ${2:yi}, ${3:d}, ${4:xo})",
        "description": "Calculates a smoothing spline."
    },
    "ftest": {
        "prefix": "ftest",
        "body": "ftest(${1:var1}, ${2:s1}, ${3:var2}, ${4:s2}, ${5:opt})",
        "description": "Applies F-test for variances and returns an estimate of the statistical significance."
    },
    "ftgetp": {
        "prefix": "ftgetp",
        "body": "ftgetp(${1:pnam})",
        "description": "Retrieves control parameters for Fitgrid routines."
    },
    "ftkurv": {
        "prefix": "ftkurv",
        "body": "ftkurv(${1:xi}, ${2:yi}, ${3:t}, ${4:xo}, ${5:yo})",
        "description": "Calculates an interpolatory spline for parametric curves."
    },
    "ftkurvd": {
        "prefix": "ftkurvd",
        "body": "ftkurvd(${1:xi}, ${2:yi}, ${3:t}, ${4:xo}, ${5:yo}, ${6:xd}, ${7:yd}, ${8:xdd}, ${9:ydd})",
        "description": "Calculates an interpolatory spline for parametric curves; it also calculates first and second derivatives of the interpolatory spline."
    },
    "ftkurvp": {
        "prefix": "ftkurvp",
        "body": "ftkurvp(${1:xi}, ${2:yi}, ${3:t}, ${4:xo}, ${5:yo})",
        "description": "Calculates an interpolatory spline under tension through a sequence of points in the plane forming a closed curve."
    },
    "ftkurvpd": {
        "prefix": "ftkurvpd",
        "body": "ftkurvpd(${1:xi}, ${2:yi}, ${3:t}, ${4:xo}, ${5:yo}, ${6:xd}, ${7:yd}, ${8:xdd}, ${9:ydd})",
        "description": "Calculates an interpolatory spline for closed parametric curves; it also calculates first and second derivatives of the interpolatory spline."
    },
    "ftsetp": {
        "prefix": "ftsetp",
        "body": "ftsetp(${1:pnam}, ${2:pval})",
        "description": "Sets control parameters for Fitgrid routines."
    },
    "ftsurf": {
        "prefix": "ftsurf",
        "body": "ftsurf(${1:xi}, ${2:yi}, ${3:zi}, ${4:xo}, ${5:yo})",
        "description": "Calculates an interpolatory surface passing through a rectangular grid of function values."
    },
    "g2fsh": {
        "prefix": "g2fsh",
        "body": "g2fsh(${1:grid}, ${2:outdims})",
        "description": "Interpolates a scalar quantity from a Gaussian grid to a fixed grid."
    },
    "g2fsh_Wrap": {
        "prefix": "g2fsh_Wrap",
        "body": "g2fsh_Wrap(${1:grid}, ${2:outdims})",
        "description": "Interpolates a scalar quantity from a Gaussian grid to a fixed grid (retains metadata)."
    },
    "g2fshv": {
        "prefix": "g2fshv",
        "body": "g2fshv(${1:ua}, ${2:va}, ${3:ub}, ${4:vb})",
        "description": "Interpolates a vector quantity from a Gaussian grid to a fixed grid."
    },
    "g2fshv_Wrap": {
        "prefix": "g2fshv_Wrap",
        "body": "g2fshv_Wrap(${1:ua}, ${2:va}, ${3:ub}, ${4:vb})",
        "description": "Interpolates a vector quantity from a Gaussian grid to a fixed grid (retains metadata)."
    },
    "g2gsh": {
        "prefix": "g2gsh",
        "body": "g2gsh(${1:grid}, ${2:outdims}, ${3:twave})",
        "description": "Interpolates a scalar quantity from one Gaussian grid to another (with optional truncation)."
    },
    "g2gsh_Wrap": {
        "prefix": "g2gsh_Wrap",
        "body": "g2gsh_Wrap(${1:grid}, ${2:outdims}, ${3:twave})",
        "description": "Interpolates a scalar quantity from one Gaussian grid to another (with optional truncation) (retains metadata)."
    },
    "g2gshv": {
        "prefix": "g2gshv",
        "body": "g2gshv(${1:ua}, ${2:va}, ${3:ub}, ${4:vb}, ${5:twave})",
        "description": "Interpolates a vector quantity from one Gaussian grid to another (with optional truncation)."
    },
    "g2gshv_Wrap": {
        "prefix": "g2gshv_Wrap",
        "body": "g2gshv_Wrap(${1:ua}, ${2:va}, ${3:ub}, ${4:vb}, ${5:twave})",
        "description": "Interpolates a vector quantity from one Gaussian grid to another (optional truncation) (retains metadata)."
    },
    "gamma": {
        "prefix": "gamma",
        "body": "gamma(${1:x})",
        "description": "Evaluates the complete gamma function."
    },
    "gammainc": {
        "prefix": "gammainc",
        "body": "gammainc(${1:x}, ${2:a})",
        "description": "Evaluates the incomplete gamma function."
    },
    "gaus": {
        "prefix": "gaus",
        "body": "gaus(${1:nlat})",
        "description": "Computes Gaussian latitudes and weights."
    },
    "gaus_lobat": {
        "prefix": "gaus_lobat",
        "body": "gaus_lobat(${1:nlat})",
        "description": "Computes Gaussian latitudes and weights using Gauss-Lobatto quadrature."
    },
    "gaus_lobat_wgt": {
        "prefix": "gaus_lobat_wgt",
        "body": "gaus_lobat_wgt(${1:lat})",
        "description": "Computes Gauss-Lobatto weights given a one-dimensional array of  Gauss-Lobatto latitudes."
    },
    "gc_aangle": {
        "prefix": "gc_aangle",
        "body": "gc_aangle(${1:lat}, ${2:lon})",
        "description": "Finds the acute angle between two great circles on the globe."
    },
    "gc_clkwise": {
        "prefix": "gc_clkwise",
        "body": "gc_clkwise(${1:lat}, ${2:lon})",
        "description": "Tests clockwise/counterclockwise ordering of points on spherical polygon."
    },
    "gc_dangle": {
        "prefix": "gc_dangle",
        "body": "gc_dangle(${1:lat}, ${2:lon})",
        "description": "Finds the directed angle between two great circles having a specified intersection point."
    },
    "gc_inout": {
        "prefix": "gc_inout",
        "body": "gc_inout(${1:plat}, ${2:plon}, ${3:lat}, ${4:lon})",
        "description": "Determines if a list of lat/lon specified points are inside or outside of spherical lat/lon polygon(s)."
    },
    "gc_latlon": {
        "prefix": "gc_latlon",
        "body": "gc_latlon(${1:lat1}, ${2:lon1}, ${3:lat2}, ${4:lon2}, ${5:npts}, ${6:iu})",
        "description": "Finds the great circle distance (true surface distance) between two points on the globe and interpolates points along the great circle."
    },
    "gc_onarc": {
        "prefix": "gc_onarc",
        "body": "gc_onarc(${1:p_lat}, ${2:p_lon}, ${3:lat}, ${4:lon})",
        "description": "Determines if a point on the globe lies on a specified great circle arc."
    },
    "gc_pnt2gc": {
        "prefix": "gc_pnt2gc",
        "body": "gc_pnt2gc(${1:p_lat}, ${2:p_lon}, ${3:lat}, ${4:lon})",
        "description": "Finds the angular distance from a point to a great circle."
    },
    "gc_qarea": {
        "prefix": "gc_qarea",
        "body": "gc_qarea(${1:lat}, ${2:lon})",
        "description": "Finds the area of a quadrilateral patch on the unit sphere."
    },
    "gc_tarea": {
        "prefix": "gc_tarea",
        "body": "gc_tarea(${1:lat}, ${2:lon})",
        "description": "Finds the area of a triangular patch on the unit sphere."
    },
    "generate_2d_array": {
        "prefix": "generate_2d_array",
        "body": "generate_2d_array(${1:mlow}, ${2:mhigh}, ${3:dlow}, ${4:dhigh}, ${5:iseed}, ${6:dsizes})",
        "description": "Generates a \"nice\" 2D array of pseudo random data, especially for use in 2D graphics."
    },
    "generate_sample_indices": {
        "prefix": "generate_sample_indices",
        "body": "generate_sample_indices(${1:N}, ${2:method})",
        "description": "Generate indices (subscripts) for resampling: with and without replacement."
    },
    "generate_unique_indices": {
        "prefix": "generate_unique_indices",
        "body": "generate_unique_indices(${1:N})",
        "description": "Generate unique random indices (subscripts)."
    },
    "genNormalDist": {
        "prefix": "genNormalDist",
        "body": "genNormalDist(${1:xAve}, ${2:xStd}, ${3:opt})",
        "description": "Generates a normal distribution."
    },
    "geolocation_circle": {
        "prefix": "geolocation_circle",
        "body": "geolocation_circle(${1:clat}, ${2:clon}, ${3:crad}, ${4:urad}, ${5:N}, ${6:opt})",
        "description": "Create latitudes and longitudes that define concentric circles at user specified distances from a central location."
    },
    "get1Dindex_Collapse": {
        "prefix": "get1Dindex_Collapse",
        "body": "get1Dindex_Collapse(${1:x}, ${2:exclude_value})",
        "description": "Returns a one dimensional array of subscript indices that DO NOT match the values contained in a user specified list."
    },
    "get1Dindex_Exclude": {
        "prefix": "get1Dindex_Exclude",
        "body": "get1Dindex_Exclude(${1:x}, ${2:exclude_value})",
        "description": "Returns a one dimensional array of subscript indices that DO NOT match the values contained in a user specified list."
    },
    "get_bitfield": {
        "prefix": "get_bitfield",
        "body": "get_bitfield(${1:packedvar}, ${2:startbit}, ${3:numbits})",
        "description": "Unpacks bit fields from an array."
    },
    "get_color_rgba": {
        "prefix": "get_color_rgba",
        "body": "get_color_rgba(${1:color_map}, ${2:levels}, ${3:values})",
        "description": "Chooses an RGB triplet or RGBA quadruplet for a scalar value, given a color map and a range of values."
    },
    "get_cpu_time": {
        "prefix": "get_cpu_time",
        "body": "get_cpu_time()",
        "description": "Returns the CPU time used by NCL."
    },
    "get_d2r": {
        "prefix": "get_d2r",
        "body": "get_d2r(${1:val})",
        "description": "Return a constant that converts degrees to radians."
    },
    "get_file_suffix": {
        "prefix": "get_file_suffix",
        "body": "get_file_suffix(${1:fileName}, ${2:opt})",
        "description": "Extract the suffix associated with a file name."
    },
    "get_isolines": {
        "prefix": "get_isolines",
        "body": "get_isolines(${1:contour_plot_id}, ${2:levels})",
        "description": "Retrieves the points that define a contour line."
    },
    "get_ncl_version": {
        "prefix": "get_ncl_version",
        "body": "get_ncl_version()",
        "description": "Returns the current NCL version."
    },
    "get_pi": {
        "prefix": "get_pi",
        "body": "get_pi(${1:val})",
        "description": "Return pi as a type float or double."
    },
    "get_r2d": {
        "prefix": "get_r2d",
        "body": "get_r2d(${1:val})",
        "description": "Return a constant that converts radians to degrees."
    },
    "get_script_name": {
        "prefix": "get_script_name",
        "body": "get_script_name()",
        "description": "Returns the name of a script of commands provided to NCL for execution."
    },
    "get_script_prefix_name": {
        "prefix": "get_script_prefix_name",
        "body": "get_script_prefix_name()",
        "description": "Returns the name of a script of commands provided to NCL for execution, if provided, with any script name tag removed."
    },
    "get_sphere_radius": {
        "prefix": "get_sphere_radius",
        "body": "get_sphere_radius()",
        "description": "Retrieves the radius of a sphere used in spherical harmonic routines."
    },
    "get_unique_values": {
        "prefix": "get_unique_values",
        "body": "get_unique_values(${1:x})",
        "description": "Returns the unique values of the given array."
    },
    "getbitsone": {
        "prefix": "getbitsone",
        "body": "getbitsone(${1:npack})",
        "description": "Unpacks one-bit chunks from the input array."
    },
    "getenv": {
        "prefix": "getenv",
        "body": "getenv(${1:env_name})",
        "description": "Returns the string value of a shell environment variable."
    },
    "getfileatts": {
        "prefix": "getfileatts",
        "body": "getfileatts(${1:thefile})",
        "description": "Returns a list of attribute names on the given file."
    },
    "getfiledimnames": {
        "prefix": "getfiledimnames",
        "body": "getfiledimnames(${1:thefile})",
        "description": "Returns a list of dimension names for the given file."
    },
    "getfiledims": {
        "prefix": "getfiledims",
        "body": "getfiledims(${1:thefile})",
        "description": "Returns a list of dimension names for the given file."
    },
    "getfiledimsizes": {
        "prefix": "getfiledimsizes",
        "body": "getfiledimsizes(${1:thefile})",
        "description": "Returns an array of dimension sizes on the given file."
    },
    "getfilegrpnames": {
        "prefix": "getfilegrpnames",
        "body": "getfilegrpnames(${1:thefile})",
        "description": "Returns an array of file group names on the given file."
    },
    "getfilepath": {
        "prefix": "getfilepath",
        "body": "getfilepath(${1:thefile})",
        "description": "Returns a string of the opened file's path."
    },
    "getfilevaratts": {
        "prefix": "getfilevaratts",
        "body": "getfilevaratts(${1:thefile}, ${2:varname})",
        "description": "Returns all attribute names associated with a variable on the given file."
    },
    "getfilevarchunkdimsizes": {
        "prefix": "getfilevarchunkdimsizes",
        "body": "getfilevarchunkdimsizes(${1:thefile}, ${2:varname})",
        "description": "Returns the chunk dimension sizes of variable on a given file which has chunk dimensions."
    },
    "getfilevardimnames": {
        "prefix": "getfilevardimnames",
        "body": "getfilevardimnames(${1:thefile}, ${2:varname})",
        "description": "Returns all dimension names associated with a variable on the given file."
    },
    "getfilevardims": {
        "prefix": "getfilevardims",
        "body": "getfilevardims(${1:thefile}, ${2:varname})",
        "description": "Returns all dimension names associated with a variable on the given file."
    },
    "getfilevardimsizes": {
        "prefix": "getfilevardimsizes",
        "body": "getfilevardimsizes(${1:thefile}, ${2:varname})",
        "description": "Returns the dimension sizes of a variable on a given file."
    },
    "getfilevarnames": {
        "prefix": "getfilevarnames",
        "body": "getfilevarnames(${1:thefile})",
        "description": "Returns an array of file variable names on the given file."
    },
    "getfilevartypes": {
        "prefix": "getfilevartypes",
        "body": "getfilevartypes(${1:thefile}, ${2:var})",
        "description": "Returns the types of the named variables stored in the given file."
    },
    "GetFillColor": {
        "prefix": "GetFillColor",
        "body": "GetFillColor(${1:cnlevels}, ${2:cmap}, ${3:value})",
        "description": "Chooses a color from a group of RGB triplets based upon a secondary scalar field (deprecated version)."
    },
    "GetFillColorIndex": {
        "prefix": "GetFillColorIndex",
        "body": "GetFillColorIndex(${1:cnlevels}, ${2:indices}, ${3:value})",
        "description": "Chooses from a list of color table indices based upon a secondary scalar field (deprecated version)."
    },
    "getFillValue": {
        "prefix": "getFillValue",
        "body": "getFillValue(${1:x})",
        "description": "Retrieves the _FillValue of a variable, if present, for use in a new statement."
    },
    "getind_latlon2d": {
        "prefix": "getind_latlon2d",
        "body": "getind_latlon2d(${1:lat2d}, ${2:lon2d}, ${3:lat}, ${4:lon})",
        "description": "Returns the indices (subscripts) of two-dimensional latitude/longitude arrays closest to a user-specified latitude/longitude coordinate pair."
    },
    "getvaratts": {
        "prefix": "getvaratts",
        "body": "getvaratts(${1:var})",
        "description": "Returns a list of attribute names for the given variable or file pointer."
    },
    "getvardimnames": {
        "prefix": "getvardimnames",
        "body": "getvardimnames(${1:var})",
        "description": "Returns a list of dimension names for the given variable."
    },
    "getvardims": {
        "prefix": "getvardims",
        "body": "getvardims(${1:var})",
        "description": "Returns a list of dimension names for the given variable."
    },
    "getvardimsizes": {
        "prefix": "getvardimsizes",
        "body": "getvardimsizes(${1:var})",
        "description": "Returns the dimension sizes of the input variable."
    },
    "getVarFillValue": {
        "prefix": "getVarFillValue",
        "body": "getVarFillValue(${1:x})",
        "description": "Retrieves the missing value  of a variable, otherwise, it returns the default _FillValue."
    },
    "grad_latlon_cfd": {
        "prefix": "grad_latlon_cfd",
        "body": "grad_latlon_cfd(${1:z}, ${2:lat}, ${3:lon}, ${4:cyclic}, ${5:opt})",
        "description": "Compute the meridional and zonal gradients of a variable on a global or limited area rectilinear grid."
    },
    "gradsf": {
        "prefix": "gradsf",
        "body": "gradsf(${1:z}, ${2:gzx}, ${3:gzy})",
        "description": "Computes the gradient of an array that is on a fixed grid using spherical harmonics."
    },
    "gradsg": {
        "prefix": "gradsg",
        "body": "gradsg(${1:z}, ${2:gzx}, ${3:gzy})",
        "description": "Computes the gradient of an array that is on a gaussian grid using spherical  harmonics."
    },
    "greg2jul": {
        "prefix": "greg2jul",
        "body": "greg2jul(${1:year}, ${2:month}, ${3:day}, ${4:hour})",
        "description": "Converts Gregorian dates to astronomical Julian days."
    },
    "grib_stime2itime": {
        "prefix": "grib_stime2itime",
        "body": "grib_stime2itime(${1:stime})",
        "description": "Converts grib initial_time (string) to time (integer)."
    },
    "grid2triple": {
        "prefix": "grid2triple",
        "body": "grid2triple(${1:x}, ${2:y}, ${3:z})",
        "description": "Converts a two-dimensional grid with one-dimensional coordinate variables to an array where each grid value is associated with its coordinates."
    },
    "gsn_add_annotation": {
        "prefix": "gsn_add_annotation",
        "body": "gsn_add_annotation(${1:plot_id}, ${2:graphic_id}, ${3:res})",
        "description": "Attaches the given annotation to the given plot."
    },
    "gsn_add_polygon": {
        "prefix": "gsn_add_polygon",
        "body": "gsn_add_polygon(${1:wks}, ${2:plot}, ${3:x}, ${4:y}, ${5:res})",
        "description": "Attaches a filled polygon to the given plot."
    },
    "gsn_add_polyline": {
        "prefix": "gsn_add_polyline",
        "body": "gsn_add_polyline(${1:wks}, ${2:plot}, ${3:x}, ${4:y}, ${5:res})",
        "description": "Attaches a polyline to the given plot."
    },
    "gsn_add_polymarker": {
        "prefix": "gsn_add_polymarker",
        "body": "gsn_add_polymarker(${1:wks}, ${2:plot}, ${3:x}, ${4:y}, ${5:res})",
        "description": "Attaches polymarkers to the given plot."
    },
    "gsn_add_shapefile_polygons": {
        "prefix": "gsn_add_shapefile_polygons",
        "body": "gsn_add_shapefile_polygons(${1:wks}, ${2:plot}, ${3:shp_name}, ${4:res})",
        "description": "Attaches shapefile polygon data to the given plot(s) using randomly-filled polygons."
    },
    "gsn_add_shapefile_polylines": {
        "prefix": "gsn_add_shapefile_polylines",
        "body": "gsn_add_shapefile_polylines(${1:wks}, ${2:plot}, ${3:shp_name}, ${4:res})",
        "description": "Attaches shapefile polyline or polygon data to the given plot(s) using polylines."
    },
    "gsn_add_shapefile_polymarkers": {
        "prefix": "gsn_add_shapefile_polymarkers",
        "body": "gsn_add_shapefile_polymarkers(${1:wks}, ${2:plot}, ${3:shp_name}, ${4:res})",
        "description": "Attaches shapefile point data to the given plot(s) using polymarkers."
    },
    "gsn_add_text": {
        "prefix": "gsn_add_text",
        "body": "gsn_add_text(${1:wks}, ${2:plot}, ${3:text}, ${4:x}, ${5:y}, ${6:res})",
        "description": "Attaches text strings to the given plot."
    },
    "gsn_attach_plots": {
        "prefix": "gsn_attach_plots",
        "body": "gsn_attach_plots(${1:base_plot}, ${2:plots}, ${3:res_base}, ${4:res_plots})",
        "description": "Attaches a series of plots to a base plot."
    },
    "gsn_blank_plot": {
        "prefix": "gsn_blank_plot",
        "body": "gsn_blank_plot(${1:wks}, ${2:res})",
        "description": "Draws a blank plot with tickmarks pointing inward."
    },
    "gsn_contour": {
        "prefix": "gsn_contour",
        "body": "gsn_contour(${1:wks}, ${2:data}, ${3:res})",
        "description": "Creates and draws a contour plot."
    },
    "gsn_contour_map": {
        "prefix": "gsn_contour_map",
        "body": "gsn_contour_map(${1:wks}, ${2:data}, ${3:res})",
        "description": "Creates and draws a contour plot over a map."
    },
    "gsn_contour_shade": {
        "prefix": "gsn_contour_shade",
        "body": "gsn_contour_shade(${1:plot}, ${2:lowval}, ${3:highval}, ${4:opt})",
        "description": "Shades contour regions given low and/or high values using colors or patterns."
    },
    "gsn_coordinates": {
        "prefix": "gsn_coordinates",
        "body": "gsn_coordinates(${1:wks}, ${2:plot}, ${3:data}, ${4:res})",
        "description": "Draws or attaches the data coordinate locations on the given plot as grid lines or markers."
    },
    "gsn_create_labelbar": {
        "prefix": "gsn_create_labelbar",
        "body": "gsn_create_labelbar(${1:wks}, ${2:nboxes}, ${3:labels}, ${4:res})",
        "description": "Creates a labelbar."
    },
    "gsn_create_legend": {
        "prefix": "gsn_create_legend",
        "body": "gsn_create_legend(${1:wks}, ${2:nitems}, ${3:labels}, ${4:res})",
        "description": "Creates a legend."
    },
    "gsn_create_text": {
        "prefix": "gsn_create_text",
        "body": "gsn_create_text(${1:wks}, ${2:text}, ${3:res})",
        "description": "Creates text strings."
    },
    "gsn_csm_attach_zonal_means": {
        "prefix": "gsn_csm_attach_zonal_means",
        "body": "gsn_csm_attach_zonal_means(${1:wks}, ${2:map}, ${3:data}, ${4:res})",
        "description": "Attaches a zonal means plot to a contour/map plot."
    },
    "gsn_csm_blank_plot": {
        "prefix": "gsn_csm_blank_plot",
        "body": "gsn_csm_blank_plot(${1:wks}, ${2:res})",
        "description": "Draws a blank plot with tickmarks pointing outward."
    },
    "gsn_csm_contour": {
        "prefix": "gsn_csm_contour",
        "body": "gsn_csm_contour(${1:wks}, ${2:data}, ${3:res})",
        "description": "Creates and draws a contour plot."
    },
    "gsn_csm_contour_map": {
        "prefix": "gsn_csm_contour_map",
        "body": "gsn_csm_contour_map(${1:wks}, ${2:data}, ${3:res})",
        "description": "Creates and draws a contour plot over a map."
    },
    "gsn_csm_contour_map_ce": {
        "prefix": "gsn_csm_contour_map_ce",
        "body": "gsn_csm_contour_map_ce(${1:wks}, ${2:data}, ${3:res})",
        "description": "Creates and draws a contour plot over a cylindrical equidistant map."
    },
    "gsn_csm_contour_map_overlay": {
        "prefix": "gsn_csm_contour_map_overlay",
        "body": "gsn_csm_contour_map_overlay(${1:wks}, ${2:data1}, ${3:data2}, ${4:res1}, ${5:res2})",
        "description": "Creates and draws two contour plots over a map."
    },
    "gsn_csm_contour_map_polar": {
        "prefix": "gsn_csm_contour_map_polar",
        "body": "gsn_csm_contour_map_polar(${1:wks}, ${2:data}, ${3:res})",
        "description": "Creates and draws a contour plot over a polar stereographic map."
    },
    "gsn_csm_hov": {
        "prefix": "gsn_csm_hov",
        "body": "gsn_csm_hov(${1:wks}, ${2:data}, ${3:res})",
        "description": "Creates and draws a Hovmueller (time vs. longitude) plot."
    },
    "gsn_csm_lat_time": {
        "prefix": "gsn_csm_lat_time",
        "body": "gsn_csm_lat_time(${1:wks}, ${2:data}, ${3:res})",
        "description": "Creates and draws a latitude versus time plot."
    },
    "gsn_csm_map": {
        "prefix": "gsn_csm_map",
        "body": "gsn_csm_map(${1:wks}, ${2:res})",
        "description": "Creates and draws a map."
    },
    "gsn_csm_map_ce": {
        "prefix": "gsn_csm_map_ce",
        "body": "gsn_csm_map_ce(${1:wks}, ${2:res})",
        "description": "Creates and draws a cylindrical equidistant map."
    },
    "gsn_csm_map_polar": {
        "prefix": "gsn_csm_map_polar",
        "body": "gsn_csm_map_polar(${1:wks}, ${2:res})",
        "description": "Creates and draws a polar stereographic map."
    },
    "gsn_csm_pres_hgt": {
        "prefix": "gsn_csm_pres_hgt",
        "body": "gsn_csm_pres_hgt(${1:wks}, ${2:data}, ${3:res})",
        "description": "Creates and draws a pressure/height plot."
    },
    "gsn_csm_pres_hgt_streamline": {
        "prefix": "gsn_csm_pres_hgt_streamline",
        "body": "gsn_csm_pres_hgt_streamline(${1:wks}, ${2:data}, ${3:xcomp}, ${4:zcomp}, ${5:res})",
        "description": "Creates and draws a pressure/height contour plot overlaid with streamlines."
    },
    "gsn_csm_pres_hgt_vector": {
        "prefix": "gsn_csm_pres_hgt_vector",
        "body": "gsn_csm_pres_hgt_vector(${1:wks}, ${2:data}, ${3:xcomp}, ${4:zcomp}, ${5:res})",
        "description": "Creates and draws a pressure/height contour plot overlaid with vectors."
    },
    "gsn_csm_streamline": {
        "prefix": "gsn_csm_streamline",
        "body": "gsn_csm_streamline(${1:wks}, ${2:u}, ${3:v}, ${4:res})",
        "description": "Creates and draws a streamline plot."
    },
    "gsn_csm_streamline_contour_map": {
        "prefix": "gsn_csm_streamline_contour_map",
        "body": "gsn_csm_streamline_contour_map(${1:wks}, ${2:u}, ${3:v}, ${4:data}, ${5:res})",
        "description": "Creates and draws streamlines over a contour plot over a map."
    },
    "gsn_csm_streamline_contour_map_ce": {
        "prefix": "gsn_csm_streamline_contour_map_ce",
        "body": "gsn_csm_streamline_contour_map_ce(${1:wks}, ${2:u}, ${3:v}, ${4:data}, ${5:res})",
        "description": "Creates and draws streamlines over a contour plot over a cylindrical equidistant map."
    },
    "gsn_csm_streamline_contour_map_polar": {
        "prefix": "gsn_csm_streamline_contour_map_polar",
        "body": "gsn_csm_streamline_contour_map_polar(${1:wks}, ${2:u}, ${3:v}, ${4:data}, ${5:res})",
        "description": "Creates and draws streamlines over a contour plot over a polar stereographic map."
    },
    "gsn_csm_streamline_map": {
        "prefix": "gsn_csm_streamline_map",
        "body": "gsn_csm_streamline_map(${1:wks}, ${2:u}, ${3:v}, ${4:res})",
        "description": "Creates and draws a streamline plot over a map."
    },
    "gsn_csm_streamline_map_ce": {
        "prefix": "gsn_csm_streamline_map_ce",
        "body": "gsn_csm_streamline_map_ce(${1:wks}, ${2:u}, ${3:v}, ${4:res})",
        "description": "Creates and draws a streamline plot over a cylindrical equidistant map."
    },
    "gsn_csm_streamline_map_polar": {
        "prefix": "gsn_csm_streamline_map_polar",
        "body": "gsn_csm_streamline_map_polar(${1:wks}, ${2:u}, ${3:v}, ${4:res})",
        "description": "Creates and draws a streamline plot over a polar stereographic map."
    },
    "gsn_csm_streamline_scalar": {
        "prefix": "gsn_csm_streamline_scalar",
        "body": "gsn_csm_streamline_scalar(${1:wks}, ${2:u}, ${3:v}, ${4:data}, ${5:res})",
        "description": "Creates and draws a streamline plot, using a scalar field to color the streamlines."
    },
    "gsn_csm_streamline_scalar_map": {
        "prefix": "gsn_csm_streamline_scalar_map",
        "body": "gsn_csm_streamline_scalar_map(${1:wks}, ${2:u}, ${3:v}, ${4:data}, ${5:res})",
        "description": "Creates and draws a streamline plot over a map, using a scalar field to color the streamlines."
    },
    "gsn_csm_streamline_scalar_map_ce": {
        "prefix": "gsn_csm_streamline_scalar_map_ce",
        "body": "gsn_csm_streamline_scalar_map_ce(${1:wks}, ${2:u}, ${3:v}, ${4:data}, ${5:res})",
        "description": "Creates and draws a streamline plot over a cylindrical equidistant map, using a scalar field to color the streamlines."
    },
    "gsn_csm_streamline_scalar_map_polar": {
        "prefix": "gsn_csm_streamline_scalar_map_polar",
        "body": "gsn_csm_streamline_scalar_map_polar(${1:wks}, ${2:u}, ${3:v}, ${4:data}, ${5:res})",
        "description": "Creates and draws a streamline plot over a polar stereographic map, using a scalar field to color the streamlines."
    },
    "gsn_csm_time_lat": {
        "prefix": "gsn_csm_time_lat",
        "body": "gsn_csm_time_lat(${1:wks}, ${2:data}, ${3:res})",
        "description": "Creates and draws a time versus latitude plot."
    },
    "gsn_csm_vector": {
        "prefix": "gsn_csm_vector",
        "body": "gsn_csm_vector(${1:wks}, ${2:u}, ${3:v}, ${4:res})",
        "description": "Creates and draws a vector plot."
    },
    "gsn_csm_vector_map": {
        "prefix": "gsn_csm_vector_map",
        "body": "gsn_csm_vector_map(${1:wks}, ${2:u}, ${3:v}, ${4:res})",
        "description": "Creates and draws a vector plot over a map."
    },
    "gsn_csm_vector_map_ce": {
        "prefix": "gsn_csm_vector_map_ce",
        "body": "gsn_csm_vector_map_ce(${1:wks}, ${2:u}, ${3:v}, ${4:res})",
        "description": "Creates and draws a vector plot over a cylindrical equidistant map."
    },
    "gsn_csm_vector_map_polar": {
        "prefix": "gsn_csm_vector_map_polar",
        "body": "gsn_csm_vector_map_polar(${1:wks}, ${2:u}, ${3:v}, ${4:res})",
        "description": "Creates and draws a vector plot over a polar stereographic map."
    },
    "gsn_csm_vector_scalar": {
        "prefix": "gsn_csm_vector_scalar",
        "body": "gsn_csm_vector_scalar(${1:wks}, ${2:u}, ${3:v}, ${4:data}, ${5:res})",
        "description": "Creates and draws a vector plot, and uses a scalar field to draw a separate contour plot or color the vectors."
    },
    "gsn_csm_vector_scalar_map": {
        "prefix": "gsn_csm_vector_scalar_map",
        "body": "gsn_csm_vector_scalar_map(${1:wks}, ${2:u}, ${3:v}, ${4:data}, ${5:res})",
        "description": "Creates and draws a vector plot over a map, and uses a scalar field to draw a separate contour plot or color the vectors."
    },
    "gsn_csm_vector_scalar_map_ce": {
        "prefix": "gsn_csm_vector_scalar_map_ce",
        "body": "gsn_csm_vector_scalar_map_ce(${1:wks}, ${2:u}, ${3:v}, ${4:data}, ${5:res})",
        "description": "Creates and draws a vector plot over a cylindrical equidistant map projection, and uses a scalar field to draw a separate contour plot or color the vectors."
    },
    "gsn_csm_vector_scalar_map_polar": {
        "prefix": "gsn_csm_vector_scalar_map_polar",
        "body": "gsn_csm_vector_scalar_map_polar(${1:wks}, ${2:u}, ${3:v}, ${4:data}, ${5:res})",
        "description": "Creates and draws a vector plot over a polar stereographic map projection, and uses a scalar field to draw a separate contour plot or color the vectors."
    },
    "gsn_csm_x2y": {
        "prefix": "gsn_csm_x2y",
        "body": "gsn_csm_x2y(${1:wks}, ${2:x1}, ${3:x2}, ${4:y}, ${5:res1}, ${6:res2})",
        "description": "Creates and draws an XY plot with two different X axes."
    },
    "gsn_csm_x2y2": {
        "prefix": "gsn_csm_x2y2",
        "body": "gsn_csm_x2y2(${1:wks}, ${2:x1}, ${3:x2}, ${4:y1}, ${5:y2}, ${6:res1}, ${7:res2})",
        "description": "Creates and draws an XY plot with two different XY axis pairs."
    },
    "gsn_csm_xy": {
        "prefix": "gsn_csm_xy",
        "body": "gsn_csm_xy(${1:wks}, ${2:x}, ${3:y}, ${4:res})",
        "description": "Creates and draws an XY plot."
    },
    "gsn_csm_xy2": {
        "prefix": "gsn_csm_xy2",
        "body": "gsn_csm_xy2(${1:wks}, ${2:x}, ${3:y1}, ${4:y2}, ${5:res1}, ${6:res2})",
        "description": "Creates and draws an XY plot with two different Y axes."
    },
    "gsn_csm_xy3": {
        "prefix": "gsn_csm_xy3",
        "body": "gsn_csm_xy3(${1:wks}, ${2:x}, ${3:yL}, ${4:yR}, ${5:yR2}, ${6:resL}, ${7:resR}, ${8:resR2})",
        "description": "Creates and draws an XY plot with three different Y axes."
    },
    "gsn_csm_y": {
        "prefix": "gsn_csm_y",
        "body": "gsn_csm_y(${1:wks}, ${2:y}, ${3:res})",
        "description": "Creates and draws an XY plot, using index values for the X axis."
    },
    "gsn_define_colormap": {
        "prefix": "gsn_define_colormap",
        "body": "gsn_define_colormap(${1:wks}, ${2:color_map})",
        "description": "Defines a color map for the given workstation."
    },
    "gsn_draw_colormap": {
        "prefix": "gsn_draw_colormap",
        "body": "gsn_draw_colormap(${1:wks})",
        "description": "Draws the current color map for the given workstation."
    },
    "gsn_draw_named_colors": {
        "prefix": "gsn_draw_named_colors",
        "body": "gsn_draw_named_colors(${1:wks}, ${2:colors}, ${3:dims})",
        "description": "Draws the given list of named colors."
    },
    "gsn_histogram": {
        "prefix": "gsn_histogram",
        "body": "gsn_histogram(${1:wks}, ${2:data}, ${3:res})",
        "description": "Draws a histogram plot on the given workstation."
    },
    "gsn_labelbar_ndc": {
        "prefix": "gsn_labelbar_ndc",
        "body": "gsn_labelbar_ndc(${1:wks}, ${2:nboxes}, ${3:labels}, ${4:x}, ${5:y}, ${6:res})",
        "description": "Draws a labelbar on the given workstation."
    },
    "gsn_legend_ndc": {
        "prefix": "gsn_legend_ndc",
        "body": "gsn_legend_ndc(${1:wks}, ${2:nitems}, ${3:labels}, ${4:x}, ${5:y}, ${6:res})",
        "description": "Draws a legend on the given workstation."
    },
    "gsn_map": {
        "prefix": "gsn_map",
        "body": "gsn_map(${1:wks}, ${2:projection}, ${3:res})",
        "description": "Creates and draws a map."
    },
    "gsn_merge_colormaps": {
        "prefix": "gsn_merge_colormaps",
        "body": "gsn_merge_colormaps(${1:wks}, ${2:color_map1}, ${3:color_map2})",
        "description": "Merges two color maps and sets this as the color map for the given workstation."
    },
    "gsn_open_wks": {
        "prefix": "gsn_open_wks",
        "body": "gsn_open_wks(${1:type}, ${2:name})",
        "description": "Opens a workstation on which to draw graphics."
    },
    "gsn_panel": {
        "prefix": "gsn_panel",
        "body": "gsn_panel(${1:wks}, ${2:plots}, ${3:dims}, ${4:res})",
        "description": "Draws multiple plots of identical size on a single frame."
    },
    "gsn_polygon": {
        "prefix": "gsn_polygon",
        "body": "gsn_polygon(${1:wks}, ${2:plot}, ${3:x}, ${4:y}, ${5:res})",
        "description": "Draws a filled polygon on the given plot."
    },
    "gsn_polygon_ndc": {
        "prefix": "gsn_polygon_ndc",
        "body": "gsn_polygon_ndc(${1:wks}, ${2:x}, ${3:y}, ${4:res})",
        "description": "Draws a filled polygon on the given workstation."
    },
    "gsn_polyline": {
        "prefix": "gsn_polyline",
        "body": "gsn_polyline(${1:wks}, ${2:plot}, ${3:x}, ${4:y}, ${5:res})",
        "description": "Draws a polyline on the given plot."
    },
    "gsn_polyline_ndc": {
        "prefix": "gsn_polyline_ndc",
        "body": "gsn_polyline_ndc(${1:wks}, ${2:x}, ${3:y}, ${4:res})",
        "description": "Draws a polyline on the given workstation."
    },
    "gsn_polymarker": {
        "prefix": "gsn_polymarker",
        "body": "gsn_polymarker(${1:wks}, ${2:plot}, ${3:x}, ${4:y}, ${5:res})",
        "description": "Draws polymarkers on the given plot."
    },
    "gsn_polymarker_ndc": {
        "prefix": "gsn_polymarker_ndc",
        "body": "gsn_polymarker_ndc(${1:wks}, ${2:x}, ${3:y}, ${4:res})",
        "description": "Draws polymarkers on the given workstation."
    },
    "gsn_retrieve_colormap": {
        "prefix": "gsn_retrieve_colormap",
        "body": "gsn_retrieve_colormap(${1:wks})",
        "description": "Retrieves a color map for the given workstation."
    },
    "gsn_reverse_colormap": {
        "prefix": "gsn_reverse_colormap",
        "body": "gsn_reverse_colormap(${1:wks})",
        "description": "Reverses the color map for the given workstation."
    },
    "gsn_streamline": {
        "prefix": "gsn_streamline",
        "body": "gsn_streamline(${1:wks}, ${2:u}, ${3:v}, ${4:res})",
        "description": "Creates and draws a streamline plot."
    },
    "gsn_streamline_map": {
        "prefix": "gsn_streamline_map",
        "body": "gsn_streamline_map(${1:wks}, ${2:u}, ${3:v}, ${4:res})",
        "description": "Creates and draws a streamline plot over a map."
    },
    "gsn_streamline_scalar": {
        "prefix": "gsn_streamline_scalar",
        "body": "gsn_streamline_scalar(${1:wks}, ${2:u}, ${3:v}, ${4:data}, ${5:res})",
        "description": "Creates and draws a streamline plot colored by a given scalar field."
    },
    "gsn_streamline_scalar_map": {
        "prefix": "gsn_streamline_scalar_map",
        "body": "gsn_streamline_scalar_map(${1:wks}, ${2:u}, ${3:v}, ${4:data}, ${5:res})",
        "description": "Creates and draws a streamline plot over a map, and colors the streamlines using the given scalar field."
    },
    "gsn_table": {
        "prefix": "gsn_table",
        "body": "gsn_table(${1:wks}, ${2:dims}, ${3:x}, ${4:y}, ${5:text}, ${6:res})",
        "description": "Draws a table with text."
    },
    "gsn_text": {
        "prefix": "gsn_text",
        "body": "gsn_text(${1:wks}, ${2:plot}, ${3:text}, ${4:x}, ${5:y}, ${6:res})",
        "description": "Draws text strings on the given plot."
    },
    "gsn_text_ndc": {
        "prefix": "gsn_text_ndc",
        "body": "gsn_text_ndc(${1:wks}, ${2:text}, ${3:x}, ${4:y}, ${5:res})",
        "description": "Draws text strings on the given workstation."
    },
    "gsn_vector": {
        "prefix": "gsn_vector",
        "body": "gsn_vector(${1:wks}, ${2:u}, ${3:v}, ${4:res})",
        "description": "Creates and draws a vector plot."
    },
    "gsn_vector_map": {
        "prefix": "gsn_vector_map",
        "body": "gsn_vector_map(${1:wks}, ${2:u}, ${3:v}, ${4:res})",
        "description": "Creates and draws a vector plot over a map."
    },
    "gsn_vector_scalar": {
        "prefix": "gsn_vector_scalar",
        "body": "gsn_vector_scalar(${1:wks}, ${2:u}, ${3:v}, ${4:data}, ${5:res})",
        "description": "Creates and draws a vector plot colored by a given scalar field."
    },
    "gsn_vector_scalar_map": {
        "prefix": "gsn_vector_scalar_map",
        "body": "gsn_vector_scalar_map(${1:wks}, ${2:u}, ${3:v}, ${4:data}, ${5:res})",
        "description": "Creates and draws a vector plot over a map, and colors the vectors using the given scalar field."
    },
    "gsn_xy": {
        "prefix": "gsn_xy",
        "body": "gsn_xy(${1:wks}, ${2:x}, ${3:y}, ${4:res})",
        "description": "Creates and draws an XY plot."
    },
    "gsn_y": {
        "prefix": "gsn_y",
        "body": "gsn_y(${1:wks}, ${2:y}, ${3:res})",
        "description": "Creates and draws an XY plot, using index values for the X axis."
    },
    "heat_apptemp": {
        "prefix": "heat_apptemp",
        "body": "heat_apptemp(${1:t}, ${2:vp}, ${3:w10}, ${4:iounit}, ${5:opt})",
        "description": "Compute apparent temperature."
    },
    "heat_discoi": {
        "prefix": "heat_discoi",
        "body": "heat_discoi(${1:t}, ${2:twb}, ${3:iounit}, ${4:opt})",
        "description": "Compute a simplified human discomfort index."
    },
    "heat_discoi_stull": {
        "prefix": "heat_discoi_stull",
        "body": "heat_discoi_stull(${1:t}, ${2:twb_stull}, ${3:rh}, ${4:iounit}, ${5:opt})",
        "description": "Compute the human discomfort index due to excessive heat and humidity using the  Stull wet bulb temperature (wetbulb_stull)."
    },
    "heat_esidx_moran": {
        "prefix": "heat_esidx_moran",
        "body": "heat_esidx_moran(${1:t}, ${2:rh}, ${3:srad}, ${4:iounit})",
        "description": "Compute an environmental stress index (ESI) which is an alternative to the wet bulb globe temperature (WBGT)."
    },
    "heat_humidex": {
        "prefix": "heat_humidex",
        "body": "heat_humidex(${1:t}, ${2:vp}, ${3:iounit}, ${4:opt})",
        "description": "Compute the 'feels-like' temperature for humans."
    },
    "heat_index_nws": {
        "prefix": "heat_index_nws",
        "body": "heat_index_nws(${1:t}, ${2:rh}, ${3:iounit}, ${4:opt})",
        "description": "Compute the 'heat index' as calculated by the National Weather Service."
    },
    "heat_swamp_cooleff": {
        "prefix": "heat_swamp_cooleff",
        "body": "heat_swamp_cooleff(${1:t}, ${2:twb}, ${3:iounit}, ${4:opt})",
        "description": "Compute the swamp cooler temperatures at 65% amd 80% efficiency."
    },
    "heat_thic_thip": {
        "prefix": "heat_thic_thip",
        "body": "heat_thic_thip(${1:t}, ${2:twb}, ${3:iounit}, ${4:opt})",
        "description": "Compute the thermal humidity comfort index (thic) and the thermal humidity physiology index (thip)."
    },
    "heat_wbgt_inout": {
        "prefix": "heat_wbgt_inout",
        "body": "heat_wbgt_inout(${1:tw}, ${2:tg}, ${3:ta}, ${4:iounit}, ${5:opt})",
        "description": "Compute the composite Wet-Bulb Globe Temperature (WBGT) index with options for indoor or outdoor formulations."
    },
    "heat_wbgt_simplified": {
        "prefix": "heat_wbgt_simplified",
        "body": "heat_wbgt_simplified(${1:t}, ${2:vp}, ${3:iounit}, ${4:opt})",
        "description": "Simplified WBGT index."
    },
    "hlsrgb": {
        "prefix": "hlsrgb",
        "body": "hlsrgb(${1:hls})",
        "description": "Converts HLS color values to RGB."
    },
    "hsv2rgb": {
        "prefix": "hsv2rgb",
        "body": "hsv2rgb(${1:h}, ${2:s}, ${3:v})",
        "description": "Maps values from the HSV color model to the RGB color model (deprecated)."
    },
    "hsvrgb": {
        "prefix": "hsvrgb",
        "body": "hsvrgb(${1:hsv})",
        "description": "Converts HSV color values to RGB."
    },
    "hydro": {
        "prefix": "hydro",
        "body": "hydro(${1:p}, ${2:tkv}, ${3:zsfc})",
        "description": "Computes geopotential height using the hydrostatic equation."
    },
    "hyi2hyo": {
        "prefix": "hyi2hyo",
        "body": "hyi2hyo(${1:p0}, ${2:hyai}, ${3:hybi}, ${4:ps}, ${5:xi}, ${6:hyao}, ${7:hybo}, ${8:intflg})",
        "description": "Interpolates from data on one set of hybrid levels to another set of hybrid levels."
    },
    "hyi2hyo_Wrap": {
        "prefix": "hyi2hyo_Wrap",
        "body": "hyi2hyo_Wrap(${1:p0}, ${2:hyai}, ${3:hybi}, ${4:ps}, ${5:xi}, ${6:hyao}, ${7:hybo}, ${8:intflg})",
        "description": "Interpolates from data on one set of hybrid levels to another set of hybrid levels and preserves metadata."
    },
    "idsfft": {
        "prefix": "idsfft",
        "body": "idsfft(${1:xc}, ${2:yc}, ${3:zc}, ${4:dim})",
        "description": "Interpolates 2D random data."
    },
    "igradsf": {
        "prefix": "igradsf",
        "body": "igradsf(${1:gzx}, ${2:gzy}, ${3:z})",
        "description": "Computes a scalar array from its gradient components on a fixed grid using spherical harmonics."
    },
    "igradsF": {
        "prefix": "igradsF",
        "body": "igradsF(${1:gzx}, ${2:gzy})",
        "description": "Computes a scalar array from its gradient components on a fixed grid using spherical harmonics."
    },
    "igradsG": {
        "prefix": "igradsG",
        "body": "igradsG(${1:gzx}, ${2:gzy})",
        "description": "Computes a scalar array from its gradient components on a gaussian grid using spherical harmonics."
    },
    "igradsg": {
        "prefix": "igradsg",
        "body": "igradsg(${1:gzx}, ${2:gzy}, ${3:z})",
        "description": "Computes a scalar array from its gradient components on a gaussian grid using spherical harmonics."
    },
    "ilapsf": {
        "prefix": "ilapsf",
        "body": "ilapsf(${1:zlap}, ${2:zlmbda}, ${3:z})",
        "description": "Inverts the Laplacian (on a fixed grid) using spherical harmonics."
    },
    "ilapsF": {
        "prefix": "ilapsF",
        "body": "ilapsF(${1:zlap}, ${2:zlmbda})",
        "description": "Inverts the Laplacian (on a fixed grid) using spherical harmonics."
    },
    "ilapsF_Wrap": {
        "prefix": "ilapsF_Wrap",
        "body": "ilapsF_Wrap(${1:zlap}, ${2:zlmbda})",
        "description": "Inverts the Laplacian (on a fixed grid) using spherical harmonics and retains metadata."
    },
    "ilapsg": {
        "prefix": "ilapsg",
        "body": "ilapsg(${1:zlap}, ${2:zlmbda}, ${3:z})",
        "description": "Inverts the Laplacian (on a gaussian grid) using spherical harmonics."
    },
    "ilapsG": {
        "prefix": "ilapsG",
        "body": "ilapsG(${1:zlap}, ${2:zlmbda})",
        "description": "Inverts the Laplacian (on a gaussian grid) using spherical harmonics."
    },
    "ilapsG_Wrap": {
        "prefix": "ilapsG_Wrap",
        "body": "ilapsG_Wrap(${1:zlap}, ${2:zlmbda})",
        "description": "Inverts the Laplacian (on a gaussian grid) using spherical harmonics and retains metadata."
    },
    "ilapvf": {
        "prefix": "ilapvf",
        "body": "ilapvf(${1:ulap}, ${2:vlap}, ${3:u}, ${4:v})",
        "description": "Inverts the vector Laplacian (on a fixed grid) using spherical harmonics."
    },
    "ilapvg": {
        "prefix": "ilapvg",
        "body": "ilapvg(${1:ulap}, ${2:vlap}, ${3:u}, ${4:v})",
        "description": "Inverts the vector Laplacian (on a gaussian grid) using spherical harmonics."
    },
    "ind": {
        "prefix": "ind",
        "body": "ind(${1:larray})",
        "description": "Returns the indices where the input is True."
    },
    "ind_nearest_coord": {
        "prefix": "ind_nearest_coord",
        "body": "ind_nearest_coord(${1:z}, ${2:zcoord}, ${3:iopt})",
        "description": "Determine indices of locations closest to a coordinate array."
    },
    "ind_resolve": {
        "prefix": "ind_resolve",
        "body": "ind_resolve(${1:indices}, ${2:dsizes})",
        "description": "Resolves a single list of indices to their multi-dimensional representation."
    },
    "indStrSubset": {
        "prefix": "indStrSubset",
        "body": "indStrSubset(${1:str}, ${2:str_subset})",
        "description": "Returns the indices corresponding to the location of the substring, if it is a subset of the other given string. (Deprecated:  see str_index_of_substr.)"
    },
    "infoTimeStamp": {
        "prefix": "infoTimeStamp",
        "body": "infoTimeStamp(${1:wks}, ${2:font_height}, ${3:other_info})",
        "description": "Draws two text strings at the bottom of the workstation to indicate the time the plot was created and other information."
    },
    "int2dble": {
        "prefix": "int2dble",
        "body": "int2dble(${1:x})",
        "description": "Converts values of type integer to values of type float and preserves metadata."
    },
    "int2flt": {
        "prefix": "int2flt",
        "body": "int2flt(${1:x})",
        "description": "Converts values of type integer to values of type float and preserves metadata."
    },
    "int2p": {
        "prefix": "int2p",
        "body": "int2p(${1:pin}, ${2:xin}, ${3:pout}, ${4:linlog})",
        "description": "Interpolates pressure levels to a different set of pressure levels."
    },
    "int2p_n": {
        "prefix": "int2p_n",
        "body": "int2p_n(${1:pin}, ${2:xin}, ${3:pout}, ${4:linlog}, ${5:pdim})",
        "description": "Interpolates pressure levels to a different set of pressure levels on the given dimension."
    },
    "int2p_n_Wrap": {
        "prefix": "int2p_n_Wrap",
        "body": "int2p_n_Wrap(${1:pin}, ${2:xin}, ${3:pout}, ${4:linlog}, ${5:pdim})",
        "description": "Interpolates pressure levels to a different set of pressure levels and returns metadata."
    },
    "int2p_Wrap": {
        "prefix": "int2p_Wrap",
        "body": "int2p_Wrap(${1:pin}, ${2:xin}, ${3:pout}, ${4:linlog})",
        "description": "Interpolates pressure levels to a different set of pressure levels and returns metadata."
    },
    "integertobyte": {
        "prefix": "integertobyte",
        "body": "integertobyte(${1:integer_val})",
        "description": "Coerces values of type integer to values of type byte."
    },
    "integertochar": {
        "prefix": "integertochar",
        "body": "integertochar(${1:integer_val})",
        "description": "Coerces values of type integer to values of type character."
    },
    "integertocharacter": {
        "prefix": "integertocharacter",
        "body": "integertocharacter(${1:integer_val})",
        "description": "Coerces values of type integer to values of type character."
    },
    "integertoshort": {
        "prefix": "integertoshort",
        "body": "integertoshort(${1:integer_val})",
        "description": "Coerces values of type integer to values of type short."
    },
    "inttobyte": {
        "prefix": "inttobyte",
        "body": "inttobyte(${1:integer_val})",
        "description": "Coerces values of type integer to values of type byte."
    },
    "inttochar": {
        "prefix": "inttochar",
        "body": "inttochar(${1:integer_val})",
        "description": "Coerces values of type integer to values of type character."
    },
    "inttoshort": {
        "prefix": "inttoshort",
        "body": "inttoshort(${1:integer_val})",
        "description": "Coerces values of type integer to values of type short."
    },
    "inverse_matrix": {
        "prefix": "inverse_matrix",
        "body": "inverse_matrix(${1:A})",
        "description": "Computes the inverse of a square matrix using LU factorization."
    },
    "is_string_numeric": {
        "prefix": "is_string_numeric",
        "body": "is_string_numeric(${1:arg})",
        "description": "Returns True for every element of the input string array that contains a numeric value."
    },
    "isatt": {
        "prefix": "isatt",
        "body": "isatt(${1:var}, ${2:attnames})",
        "description": "Returns logical values indicating whether the given attributes are attached to the given variable."
    },
    "isbigendian": {
        "prefix": "isbigendian",
        "body": "isbigendian()",
        "description": "Returns True if you are running NCL on a big endian machine."
    },
    "isbyte": {
        "prefix": "isbyte",
        "body": "isbyte(${1:arg})",
        "description": "Returns True if input is of type byte."
    },
    "ischar": {
        "prefix": "ischar",
        "body": "ischar(${1:arg})",
        "description": "Returns True if input is of type char."
    },
    "isconform": {
        "prefix": "isconform",
        "body": "isconform(${1:x}, ${2:y})",
        "description": "Check two variables for array conformance (same shape and size)."
    },
    "isconstant": {
        "prefix": "isconstant",
        "body": "isconstant(${1:x})",
        "description": "Test if all non-missing elements of an array are identical."
    },
    "iscoord": {
        "prefix": "iscoord",
        "body": "iscoord(${1:var}, ${2:coord_names})",
        "description": "Returns True for every input string that is a coordinate variable of the given variable."
    },
    "isdefined": {
        "prefix": "isdefined",
        "body": "isdefined(${1:idn_names})",
        "description": "Returns True for every element of the input that is a defined keyword, variable, or function/procedure name."
    },
    "isdim": {
        "prefix": "isdim",
        "body": "isdim(${1:var}, ${2:dimnames})",
        "description": "Returns True if variable dimensions are defined in the given variable."
    },
    "isdimnamed": {
        "prefix": "isdimnamed",
        "body": "isdimnamed(${1:var}, ${2:dim_nums})",
        "description": "Returns True if variable dimensions have names in  given variable."
    },
    "isdouble": {
        "prefix": "isdouble",
        "body": "isdouble(${1:arg})",
        "description": "Returns True if input is of type double."
    },
    "isenumeric": {
        "prefix": "isenumeric",
        "body": "isenumeric(${1:arg})",
        "description": "Returns True if input is of type enumeric."
    },
    "isfile": {
        "prefix": "isfile",
        "body": "isfile(${1:arg})",
        "description": "Returns True if input is of type file."
    },
    "isfilepresent": {
        "prefix": "isfilepresent",
        "body": "isfilepresent(${1:file_path})",
        "description": "Checks if a supported file exists."
    },
    "isfilevar": {
        "prefix": "isfilevar",
        "body": "isfilevar(${1:thefile}, ${2:varnames})",
        "description": "Checks if specified file variables are defined in a file."
    },
    "isfilevaratt": {
        "prefix": "isfilevaratt",
        "body": "isfilevaratt(${1:thefile}, ${2:varname}, ${3:attnames})",
        "description": "Checks if specified  file variable attributes are defined for a file variable."
    },
    "isfilevarcoord": {
        "prefix": "isfilevarcoord",
        "body": "isfilevarcoord(${1:thefile}, ${2:varname}, ${3:coordname})",
        "description": "Checks if a coordinate variable is defined in a file."
    },
    "isfilevardim": {
        "prefix": "isfilevardim",
        "body": "isfilevardim(${1:thefile}, ${2:varname}, ${3:dimnames})",
        "description": "Checks if file variable dimensions are defined for a file variable."
    },
    "isfloat": {
        "prefix": "isfloat",
        "body": "isfloat(${1:arg})",
        "description": "Returns True if input is of type float."
    },
    "isfunc": {
        "prefix": "isfunc",
        "body": "isfunc(${1:func_names})",
        "description": "Returns True for every element of the input that is a defined function."
    },
    "isgraphic": {
        "prefix": "isgraphic",
        "body": "isgraphic(${1:arg})",
        "description": "Returns True if input is of type graphic."
    },
    "isint": {
        "prefix": "isint",
        "body": "isint(${1:arg})",
        "description": "Returns True if input is of type integer."
    },
    "isint64": {
        "prefix": "isint64",
        "body": "isint64(${1:arg})",
        "description": "Returns True if input is of type int64."
    },
    "isinteger": {
        "prefix": "isinteger",
        "body": "isinteger(${1:arg})",
        "description": "Returns True if input is of type integer."
    },
    "isleapyear": {
        "prefix": "isleapyear",
        "body": "isleapyear(${1:year})",
        "description": "Determines if a given year is a leap year."
    },
    "islogical": {
        "prefix": "islogical",
        "body": "islogical(${1:arg})",
        "description": "Returns True if input is of type logical."
    },
    "islong": {
        "prefix": "islong",
        "body": "islong(${1:arg})",
        "description": "Returns True if input is of type long."
    },
    "ismissing": {
        "prefix": "ismissing",
        "body": "ismissing(${1:data})",
        "description": "Returns True for every element of the input that contains a missing value (_FillValue)."
    },
    "isMonotonic": {
        "prefix": "isMonotonic",
        "body": "isMonotonic(${1:x})",
        "description": "Check a one dimensional array to see if it is monotonic."
    },
    "isnan_ieee": {
        "prefix": "isnan_ieee",
        "body": "isnan_ieee(${1:x})",
        "description": "Returns a logical array indicating which input values contain an IEEE NaN."
    },
    "isnumeric": {
        "prefix": "isnumeric",
        "body": "isnumeric(${1:arg})",
        "description": "Returns True if input is of type numeric."
    },
    "ispan": {
        "prefix": "ispan",
        "body": "ispan(${1:start}, ${2:finish}, ${3:stride})",
        "description": "Creates an array of equally-spaced integer, long, or int64 values."
    },
    "isproc": {
        "prefix": "isproc",
        "body": "isproc(${1:proc_names})",
        "description": "Returns True for every element of the input that is a defined procedure."
    },
    "isscalar": {
        "prefix": "isscalar",
        "body": "isscalar(${1:x})",
        "description": "Returns True if the given argument is a scalar (rank one and size one)."
    },
    "isshort": {
        "prefix": "isshort",
        "body": "isshort(${1:arg})",
        "description": "Returns True if input is of type short."
    },
    "issnumeric": {
        "prefix": "issnumeric",
        "body": "issnumeric(${1:arg})",
        "description": "Returns True if input is of type snumeric."
    },
    "isstring": {
        "prefix": "isstring",
        "body": "isstring(${1:arg})",
        "description": "Returns True if input is of type string."
    },
    "isStrSubset": {
        "prefix": "isStrSubset",
        "body": "isStrSubset(${1:str}, ${2:str_subset})",
        "description": "Return True or False if one string is a subset of another string."
    },
    "isubyte": {
        "prefix": "isubyte",
        "body": "isubyte(${1:arg})",
        "description": "Returns True if input is of type unsigned byte (ubyte)."
    },
    "isuint": {
        "prefix": "isuint",
        "body": "isuint(${1:arg})",
        "description": "Returns True if input is of type unsigned integer (uint)."
    },
    "isuint64": {
        "prefix": "isuint64",
        "body": "isuint64(${1:arg})",
        "description": "Returns True if input is of type unsigned 64-bit integer (uint64)."
    },
    "isulong": {
        "prefix": "isulong",
        "body": "isulong(${1:arg})",
        "description": "Returns True if input is of type unsigned long (ulong)."
    },
    "isunlimited": {
        "prefix": "isunlimited",
        "body": "isunlimited(${1:thefile}, ${2:dim_name})",
        "description": "Returns True if the given dimension name is defined as unlimited on the given file."
    },
    "isunsigned": {
        "prefix": "isunsigned",
        "body": "isunsigned(${1:arg})",
        "description": "Returns True if input is one of the unsigned types."
    },
    "isushort": {
        "prefix": "isushort",
        "body": "isushort(${1:arg})",
        "description": "Returns True if input is of type unsigned short (ushort)."
    },
    "isvar": {
        "prefix": "isvar",
        "body": "isvar(${1:varnames})",
        "description": "Returns True for every element of the input that is a defined variable."
    },
    "jul2greg": {
        "prefix": "jul2greg",
        "body": "jul2greg(${1:julian})",
        "description": "Converts an astronomical Julian day to a Gregorian date."
    },
    "kde_n_test": {
        "prefix": "kde_n_test",
        "body": "kde_n_test(${1:x}, ${2:bin}, ${3:dims})",
        "description": "Uses gaussian kernel density estimation (KDE) to estimate the probability density function of a random variable. This function is under construction and is available for testing only. It may not be released with NCL V6.5.0."
    },
    "keyword_values": {
        "prefix": "keyword_values",
        "body": "keyword_values(${1:filename}, ${2:keyname}, ${3:keytype})",
        "description": "Read a text file that contains keywords and one-or-more values (similar to fortran NAMELIST)."
    },
    "kf_filter": {
        "prefix": "kf_filter",
        "body": "kf_filter(${1:x}, ${2:obsPerDay}, ${3:tMin}, ${4:tMax}, ${5:kMin}, ${6:kMax}, ${7:hMin}, ${8:hMax}, ${9:waveName})",
        "description": "Extract equatorial waves by filtering in the Wheeler-Kiladis  wavenumber-frequency domain."
    },
    "kmeans_as136": {
        "prefix": "kmeans_as136",
        "body": "kmeans_as136(${1:x}, ${2:k}, ${3:opt})",
        "description": "Performs k-means clustering via the Hartigan and Wong AS-136 algorithm."
    },
    "kolsm2_n": {
        "prefix": "kolsm2_n",
        "body": "kolsm2_n(${1:x}, ${2:y}, ${3:dims})",
        "description": "Uses the Kolmogorov-Smirnov two-sample test to determine if two samples are from the same distribution."
    },
    "kron_product": {
        "prefix": "kron_product",
        "body": "kron_product(${1:a}, ${2:b})",
        "description": "Computes the Kronecker product for two-dimensional matrices."
    },
    "landsea_mask": {
        "prefix": "landsea_mask",
        "body": "landsea_mask(${1:basemap}, ${2:lat}, ${3:lon})",
        "description": "Returns a grid that contains a land/sea mask given any latitude and longitude array."
    },
    "lapsF": {
        "prefix": "lapsF",
        "body": "lapsF(${1:z})",
        "description": "Computes the Laplacian using spherical harmonics, given a scalar z on a fixed grid."
    },
    "lapsf": {
        "prefix": "lapsf",
        "body": "lapsf(${1:z}, ${2:zlap})",
        "description": "Computes the Laplacian using spherical harmonics, given a scalar z on a fixed grid."
    },
    "lapsG": {
        "prefix": "lapsG",
        "body": "lapsG(${1:z})",
        "description": "Computes the Laplacian using spherical harmonics, given a scalar z on a gaussian grid."
    },
    "lapsg": {
        "prefix": "lapsg",
        "body": "lapsg(${1:z}, ${2:zlap})",
        "description": "Computes the Laplacian using spherical harmonics, given a scalar z on a gaussian grid."
    },
    "lapvf": {
        "prefix": "lapvf",
        "body": "lapvf(${1:u}, ${2:v}, ${3:ulap}, ${4:vlap})",
        "description": "Computes the vector Laplacian using spherical harmonics, given a vector quantity (u,v) on a fixed grid."
    },
    "lapvg": {
        "prefix": "lapvg",
        "body": "lapvg(${1:u}, ${2:v}, ${3:ulap}, ${4:vlap})",
        "description": "Computes the vector Laplacian using spherical harmonics, given a vector quantity (u,v) on a gaussian grid."
    },
    "latent_heat_water": {
        "prefix": "latent_heat_water",
        "body": "latent_heat_water(${1:t}, ${2:iounit}, ${3:key}, ${4:opt})",
        "description": "Estimate latent heat flux for water: evaporization (condensation), melting (freezing) or sublimation (deposition)."
    },
    "latGau": {
        "prefix": "latGau",
        "body": "latGau(${1:nlat}, ${2:name}, ${3:longname}, ${4:units})",
        "description": "Generates gaussian latitudes and associated metadata."
    },
    "latGauWgt": {
        "prefix": "latGauWgt",
        "body": "latGauWgt(${1:nlat}, ${2:name}, ${3:longname}, ${4:units})",
        "description": "Generates gaussian weights and associated metadata."
    },
    "latGlobeF": {
        "prefix": "latGlobeF",
        "body": "latGlobeF(${1:nlat}, ${2:name}, ${3:longname}, ${4:units})",
        "description": "Generates latitudes and associated metadata for a global  fixed grid."
    },
    "latGlobeFo": {
        "prefix": "latGlobeFo",
        "body": "latGlobeFo(${1:nlat}, ${2:name}, ${3:longname}, ${4:units})",
        "description": "Generates latitudes and associated metadata for a global  fixed offset grid."
    },
    "latlon2utm": {
        "prefix": "latlon2utm",
        "body": "latlon2utm(${1:latlon}, ${2:datum})",
        "description": "Converts from lat/lon to UTM using a specified datum."
    },
    "latlon_to_SCRIP": {
        "prefix": "latlon_to_SCRIP",
        "body": "latlon_to_SCRIP(${1:SCRIP_filename}, ${2:grid_type}, ${3:opt})",
        "description": "Writes the description of a lat/lon grid to a SCRIP file."
    },
    "latRegWgt": {
        "prefix": "latRegWgt",
        "body": "latRegWgt(${1:lat}, ${2:nType}, ${3:opt})",
        "description": "Generates [sin(lat+dlat/2)-sin(lat-dlat/2)] weights for equally  spaced (regular) global grids that will sum to 2.0."
    },
    "lclvl": {
        "prefix": "lclvl",
        "body": "lclvl(${1:p}, ${2:tk}, ${3:tdk})",
        "description": "Calculates the pressure of the lifting condensation level."
    },
    "lderuvf": {
        "prefix": "lderuvf",
        "body": "lderuvf(${1:u}, ${2:v}, ${3:uy}, ${4:vy})",
        "description": "Computes the latitudinal derivatives using spherical harmonics, given vector components (u,v) on a fixed grid."
    },
    "lderuvg": {
        "prefix": "lderuvg",
        "body": "lderuvg(${1:u}, ${2:v}, ${3:uy}, ${4:vy})",
        "description": "Computes the latitudinal derivatives using spherical harmonics, given vector components (u,v) on a gaussian grid."
    },
    "linint1": {
        "prefix": "linint1",
        "body": "linint1(${1:xi}, ${2:fi}, ${3:fiCyclic}, ${4:xo}, ${5:foOption})",
        "description": "Interpolates from one series to another using piecewise linear interpolation across the rightmost dimension."
    },
    "linint1_n": {
        "prefix": "linint1_n",
        "body": "linint1_n(${1:xi}, ${2:fi}, ${3:fiCyclic}, ${4:xo}, ${5:foOption}, ${6:dim})",
        "description": "Interpolates from one series to another using piecewise linear interpolation across the given dimension."
    },
    "linint1_n_Wrap": {
        "prefix": "linint1_n_Wrap",
        "body": "linint1_n_Wrap(${1:xi}, ${2:fi}, ${3:fiCyclic}, ${4:xo}, ${5:foOption}, ${6:dim})",
        "description": "Interpolates from one series to another using piecewise linear interpolation across the given dimension, and retains metadata."
    },
    "linint1_Wrap": {
        "prefix": "linint1_Wrap",
        "body": "linint1_Wrap(${1:xi}, ${2:fi}, ${3:fiCyclic}, ${4:xo}, ${5:foOption})",
        "description": "Interpolates from one series to another using piecewise linear interpolation, and retains metadata."
    },
    "linint2": {
        "prefix": "linint2",
        "body": "linint2(${1:xi}, ${2:yi}, ${3:fi}, ${4:fiCyclicX}, ${5:xo}, ${6:yo}, ${7:foOption})",
        "description": "Interpolates from a rectilinear grid to another rectilinear grid using bilinear interpolation."
    },
    "linint2_points": {
        "prefix": "linint2_points",
        "body": "linint2_points(${1:xi}, ${2:yi}, ${3:fi}, ${4:fiCyclicX}, ${5:xo}, ${6:yo}, ${7:Option})",
        "description": "Interpolates from a rectilinear grid to an unstructured grid or locations using bilinear interpolation."
    },
    "linint2_points_Wrap": {
        "prefix": "linint2_points_Wrap",
        "body": "linint2_points_Wrap(${1:xi}, ${2:yi}, ${3:fi}, ${4:fiCyclicX}, ${5:xo}, ${6:yo}, ${7:Option})",
        "description": "Interpolates from a rectilinear grid to an unstructured grid using bilinear interpolation, and retains metadata."
    },
    "linint2_Wrap": {
        "prefix": "linint2_Wrap",
        "body": "linint2_Wrap(${1:xi}, ${2:yi}, ${3:fi}, ${4:fiCyclicX}, ${5:xo}, ${6:yo}, ${7:foOption})",
        "description": "Interpolates from a rectilinear grid to another rectilinear grid using bilinear interpolation, and retains metadata."
    },
    "linmsg": {
        "prefix": "linmsg",
        "body": "linmsg(${1:x}, ${2:opt})",
        "description": "Linearly interpolates to fill in missing values."
    },
    "linmsg_n": {
        "prefix": "linmsg_n",
        "body": "linmsg_n(${1:x}, ${2:opt}, ${3:dim})",
        "description": "Linearly interpolates to fill in missing values, given the dimension to do the interpolation across."
    },
    "linrood_latwgt": {
        "prefix": "linrood_latwgt",
        "body": "linrood_latwgt(${1:nlat})",
        "description": "Computes the latitudes and weights used by the Lin-Rood Model."
    },
    "linrood_wgt": {
        "prefix": "linrood_wgt",
        "body": "linrood_wgt(${1:nlat})",
        "description": "Computes the weights used by the Lin-Rood Model."
    },
    "list_files": {
        "prefix": "list_files",
        "body": "list_files()",
        "description": "Lists all of the variables that reference files."
    },
    "list_filevars": {
        "prefix": "list_filevars",
        "body": "list_filevars(${1:filevar})",
        "description": "Lists all of the variables associated with a specific file."
    },
    "list_hlus": {
        "prefix": "list_hlus",
        "body": "list_hlus()",
        "description": "Lists all of the HLU objects currently referenced by NCL variables."
    },
    "list_procfuncs": {
        "prefix": "list_procfuncs",
        "body": "list_procfuncs()",
        "description": "Lists all of the currently defined NCL functions and procedures and their argument lists."
    },
    "list_vars": {
        "prefix": "list_vars",
        "body": "list_vars()",
        "description": "Lists the currently defined variables that do not reference files or HLU objects."
    },
    "ListAppend": {
        "prefix": "ListAppend",
        "body": "ListAppend(${1:f}, ${2:v})",
        "description": "Append a variable into the list."
    },
    "ListCount": {
        "prefix": "ListCount",
        "body": "ListCount(${1:f})",
        "description": "Queries the number of element(s) in a list."
    },
    "ListGetType": {
        "prefix": "ListGetType",
        "body": "ListGetType(${1:f})",
        "description": "Queries the manner in which a variable of type list was created."
    },
    "ListIndex": {
        "prefix": "ListIndex",
        "body": "ListIndex(${1:f}, ${2:v})",
        "description": "Queries the index of a variable in a list."
    },
    "ListIndexFromName": {
        "prefix": "ListIndexFromName",
        "body": "ListIndexFromName(${1:f}, ${2:vn})",
        "description": "Returns the index of a variable in a list given its name."
    },
    "ListPop": {
        "prefix": "ListPop",
        "body": "ListPop(${1:f})",
        "description": "Pop (out) an element from a list."
    },
    "ListPush": {
        "prefix": "ListPush",
        "body": "ListPush(${1:f}, ${2:v})",
        "description": "Push a variable into the list."
    },
    "ListSetType": {
        "prefix": "ListSetType",
        "body": "ListSetType(${1:f}, ${2:option})",
        "description": "Specifies the manner in which a variable of type list is to be implemented."
    },
    "loadscript": {
        "prefix": "loadscript",
        "body": "loadscript(${1:filename})",
        "description": "Loads the given NCL script."
    },
    "local_max": {
        "prefix": "local_max",
        "body": "local_max(${1:x}, ${2:cyclic}, ${3:delta})",
        "description": "Determines the relative maxima for a 2-dimensional array."
    },
    "local_max_1d": {
        "prefix": "local_max_1d",
        "body": "local_max_1d(${1:x}, ${2:cyclic}, ${3:delta}, ${4:iopt})",
        "description": "Determines the relative maxima for a 1-dimensional array."
    },
    "local_min": {
        "prefix": "local_min",
        "body": "local_min(${1:x}, ${2:cyclic}, ${3:delta})",
        "description": "Determines the relative minima for a 2-dimensional array."
    },
    "local_min_1d": {
        "prefix": "local_min_1d",
        "body": "local_min_1d(${1:x}, ${2:cyclic}, ${3:delta}, ${4:iopt})",
        "description": "Determines the relative minima for a 1-dimensional array."
    },
    "log": {
        "prefix": "log",
        "body": "log(${1:value})",
        "description": "Computes the natural log of a numeric type."
    },
    "log10": {
        "prefix": "log10",
        "body": "log10(${1:value})",
        "description": "Computes the log base 10 of a numeric type."
    },
    "lonFlip": {
        "prefix": "lonFlip",
        "body": "lonFlip(${1:x})",
        "description": "Reorders a global rectilinear array about the central longitude coordinate variable."
    },
    "lonGlobeF": {
        "prefix": "lonGlobeF",
        "body": "lonGlobeF(${1:nlon}, ${2:name}, ${3:longname}, ${4:units})",
        "description": "Generates longitudes and associated metadata for a global   fixed grid."
    },
    "lonGlobeFo": {
        "prefix": "lonGlobeFo",
        "body": "lonGlobeFo(${1:nlon}, ${2:name}, ${3:longname}, ${4:units})",
        "description": "Generates longitudes and associated metadata for a global   fixed offset grid."
    },
    "longtobyte": {
        "prefix": "longtobyte",
        "body": "longtobyte(${1:long_val})",
        "description": "Coerces values of type long to values of type byte."
    },
    "longtochar": {
        "prefix": "longtochar",
        "body": "longtochar(${1:long_val})",
        "description": "Coerces values of type long to values of type character."
    },
    "longtocharacter": {
        "prefix": "longtocharacter",
        "body": "longtocharacter(${1:long_val})",
        "description": "Coerces values of type long to values of type character."
    },
    "longtoint": {
        "prefix": "longtoint",
        "body": "longtoint(${1:long_val})",
        "description": "Coerces values of type long to values of type integer."
    },
    "longtointeger": {
        "prefix": "longtointeger",
        "body": "longtointeger(${1:long_val})",
        "description": "Coerces values of type long to values of type integer."
    },
    "longtoshort": {
        "prefix": "longtoshort",
        "body": "longtoshort(${1:long_val})",
        "description": "Coerces values of type long to values of type short."
    },
    "lonPivot": {
        "prefix": "lonPivot",
        "body": "lonPivot(${1:x}, ${2:pivotLon})",
        "description": "Pivots an array about a user-specified longitude (rectilinear grids only)."
    },
    "lspoly": {
        "prefix": "lspoly",
        "body": "lspoly(${1:x}, ${2:y}, ${3:wgt}, ${4:n})",
        "description": "Calculates a set of coefficients for a weighted least squares  polynomial fit to the given data."
    },
    "lspoly_n": {
        "prefix": "lspoly_n",
        "body": "lspoly_n(${1:x}, ${2:y}, ${3:wgt}, ${4:n}, ${5:dim})",
        "description": "Calculates a set of coefficients for a weighted least squares  polynomial fit to the given data on the given dimension."
    },
    "mask": {
        "prefix": "mask",
        "body": "mask(${1:array}, ${2:marray}, ${3:mvalue})",
        "description": "Masks a multi-dimensional array against another given a single mask value."
    },
    "max": {
        "prefix": "max",
        "body": "max(${1:value})",
        "description": "Computes the maximum value of a multi-dimensional array."
    },
    "maximize_output": {
        "prefix": "maximize_output",
        "body": "maximize_output(${1:wks}, ${2:res})",
        "description": "Maximizes the sizes of a series of plots drawn in a single frame."
    },
    "maxind": {
        "prefix": "maxind",
        "body": "maxind(${1:arg})",
        "description": "Returns the index of the first occurrence of a maximum value."
    },
    "merge_levels_sfc": {
        "prefix": "merge_levels_sfc",
        "body": "merge_levels_sfc(${1:x}, ${2:xsfc}, ${3:opt})",
        "description": "Merges a multiple level variable with the corresponding surface variable."
    },
    "min": {
        "prefix": "min",
        "body": "min(${1:value})",
        "description": "Computes the minimum value of a multi-dimensional array."
    },
    "minind": {
        "prefix": "minind",
        "body": "minind(${1:arg})",
        "description": "Returns the index of the first occurrence of a minimum value."
    },
    "mixed_layer_depth": {
        "prefix": "mixed_layer_depth",
        "body": "mixed_layer_depth(${1:pot_density}, ${2:kmt}, ${3:ht}, ${4:depth}, ${5:offset})",
        "description": "Calculates a quantity derived from the Potential Density of significance. (Documentation under construction.)"
    },
    "mixhum_convert": {
        "prefix": "mixhum_convert",
        "body": "mixhum_convert(${1:wq}, ${2:wqType}, ${3:iounit})",
        "description": "Convert mixing ratio to specific humidity or vice-versa."
    },
    "mixhum_ptd": {
        "prefix": "mixhum_ptd",
        "body": "mixhum_ptd(${1:p}, ${2:tdk}, ${3:iswit})",
        "description": "Calculates the mixing ratio or specific humidity given pressure and dew point temperature."
    },
    "mixhum_ptrh": {
        "prefix": "mixhum_ptrh",
        "body": "mixhum_ptrh(${1:p}, ${2:tk}, ${3:rh}, ${4:iswit})",
        "description": "Calculates the mixing ratio or specific humidity given pressure, temperature and relative humidity."
    },
    "mjo_cross": {
        "prefix": "mjo_cross",
        "body": "mjo_cross(${1:x}, ${2:y}, ${3:segLength}, ${4:segOverLap}, ${5:opt})",
        "description": "Calculate space-time cross spectrum over multiple segments."
    },
    "mjo_cross_coh2pha": {
        "prefix": "mjo_cross_coh2pha",
        "body": "mjo_cross_coh2pha(${1:STC}, ${2:opt})",
        "description": "Calculate space-time coherence-squared and phase using the array returned by mjo_cross_segment ."
    },
    "mjo_cross_plot": {
        "prefix": "mjo_cross_plot",
        "body": "mjo_cross_plot(${1:x}, ${2:pltDir}, ${3:pltType}, ${4:pltName}, ${5:opt})",
        "description": "Plot coherence-squared and phase spectra as returned by  mjo_cross."
    },
    "mjo_cross_segment": {
        "prefix": "mjo_cross_segment",
        "body": "mjo_cross_segment(${1:x}, ${2:y}, ${3:opt})",
        "description": "Calculate space-time cross spectrum for a single time segment."
    },
    "mjo_phase_background": {
        "prefix": "mjo_phase_background",
        "body": "mjo_phase_background(${1:wks}, ${2:opt})",
        "description": "Plot background for MJO phase-space diagram."
    },
    "mjo_space_time_cross": {
        "prefix": "mjo_space_time_cross",
        "body": "mjo_space_time_cross(${1:x}, ${2:y}, ${3:segLength}, ${4:segOverLap}, ${5:opt})",
        "description": "Calculate space-time cross spectrum over multiple segments."
    },
    "mjo_spectra": {
        "prefix": "mjo_spectra",
        "body": "mjo_spectra(${1:x}, ${2:date}, ${3:wy}, ${4:latS}, ${5:latN}, ${6:lonL}, ${7:lonR}, ${8:nameRegion}, ${9:opt})",
        "description": "Driver to calculate and plot seasonal spectra via segment averaging  as defined by the   US-CLIVAR MJO diagnostics website."
    },
    "mjo_spectra_season": {
        "prefix": "mjo_spectra_season",
        "body": "mjo_spectra_season(${1:x}, ${2:date}, ${3:wy}, ${4:seasonName}, ${5:opt})",
        "description": "Calculates seasonal spectra via segment averaging as defined by the   US-CLIVAR MJO diagnostics website."
    },
    "mjo_wavenum_freq_season": {
        "prefix": "mjo_wavenum_freq_season",
        "body": "mjo_wavenum_freq_season(${1:x}, ${2:date}, ${3:seasonName}, ${4:opt})",
        "description": "Calculates wavenumber-frequency spectra via seasonal averaging as defined by the   US-CLIVAR MJO diagnostics website."
    },
    "mjo_wavenum_freq_season_plot": {
        "prefix": "mjo_wavenum_freq_season_plot",
        "body": "mjo_wavenum_freq_season_plot(${1:x}, ${2:season}, ${3:pltDir}, ${4:pltType}, ${5:pltName}, ${6:opt})",
        "description": "Plot wavenumber-frequency spectra as returned by  mjo_wavenum_freq_season."
    },
    "mjo_xcor_lag_ovly": {
        "prefix": "mjo_xcor_lag_ovly",
        "body": "mjo_xcor_lag_ovly(${1:ra}, ${2:rb}, ${3:pltDir}, ${4:pltType}, ${5:pltName}, ${6:opt})",
        "description": "Plot lagged cross-correlations as returned by  mjo_xcor_lag_season."
    },
    "mjo_xcor_lag_ovly_panel": {
        "prefix": "mjo_xcor_lag_ovly_panel",
        "body": "mjo_xcor_lag_ovly_panel(${1:ra}, ${2:rb}, ${3:rc}, ${4:rd}, ${5:pltDir}, ${6:pltType}, ${7:pltName}, ${8:opt})",
        "description": "Plot lagged cross-correlations as returned by  mjo_xcor_lag_season as panels."
    },
    "mjo_xcor_lag_season": {
        "prefix": "mjo_xcor_lag_season",
        "body": "mjo_xcor_lag_season(${1:ref}, ${2:x}, ${3:mxlag}, ${4:opt})",
        "description": "Calculates lagged correlations between a reference series and gridded data as specified by the   US-CLIVAR MJO diagnostics website."
    },
    "moc_globe_atl": {
        "prefix": "moc_globe_atl",
        "body": "moc_globe_atl(${1:lat_aux_grid}, ${2:a_wvel}, ${3:a_bolus}, ${4:a_submeso}, ${5:tlat}, ${6:rmlak})",
        "description": "Facilitates calculating the meridional overturning circulation for the globe and Atlantic."
    },
    "mod": {
        "prefix": "mod",
        "body": "mod(${1:n}, ${2:m})",
        "description": "Remainder function which emulates the Fortran \"mod\" intrinsic function."
    },
    "month_to_annual": {
        "prefix": "month_to_annual",
        "body": "month_to_annual(${1:x}, ${2:opt})",
        "description": "Converts monthly values to annual values."
    },
    "month_to_annual_weighted": {
        "prefix": "month_to_annual_weighted",
        "body": "month_to_annual_weighted(${1:yyyymm}, ${2:x}, ${3:opt})",
        "description": "Converts monthly values to annual values weighted by the number of days in a month."
    },
    "month_to_season": {
        "prefix": "month_to_season",
        "body": "month_to_season(${1:xMon}, ${2:season})",
        "description": "Computes a user-specified three-month seasonal mean (DJF, JFM, FMA, MAM, AMJ, MJJ, JJA, JAS, ASO, SON, OND, NDJ)."
    },
    "month_to_season12": {
        "prefix": "month_to_season12",
        "body": "month_to_season12(${1:xMon})",
        "description": "Computes three-month seasonal means (DJF, JFM, FMA, MAM, AMJ, MJJ, JJA, JAS, ASO, SON, OND, NDJ)."
    },
    "month_to_seasonN": {
        "prefix": "month_to_seasonN",
        "body": "month_to_seasonN(${1:xMon}, ${2:season})",
        "description": "Computes a user-specified list of three-month seasonal means (DJF, JFM, FMA, MAM, AMJ, MJJ, JJA, JAS, ASO, SON, OND, NDJ)."
    },
    "monthday": {
        "prefix": "monthday",
        "body": "monthday(${1:year}, ${2:day})",
        "description": "Calculates a concatenated month_day given a day and year."
    },
    "monthly_total_to_daily_mean": {
        "prefix": "monthly_total_to_daily_mean",
        "body": "monthly_total_to_daily_mean(${1:yyyymm}, ${2:x}, ${3:opt})",
        "description": "Convert monthly total values [e.g., precipitation] to \"per day\" values."
    },
    "msgValOutline": {
        "prefix": "msgValOutline",
        "body": "msgValOutline(${1:wks}, ${2:plot}, ${3:x})",
        "description": "Draws an outline around missing data in vector and streamline plots."
    },
    "namedcolor2rgb": {
        "prefix": "namedcolor2rgb",
        "body": "namedcolor2rgb(${1:colors})",
        "description": "Returns the RGB triplets of the given list of named colors."
    },
    "namedcolor2rgba": {
        "prefix": "namedcolor2rgba",
        "body": "namedcolor2rgba(${1:colors})",
        "description": "Returns the RGBA quadruplets of the given list of named colors."
    },
    "nameDim": {
        "prefix": "nameDim",
        "body": "nameDim(${1:x}, ${2:dimNames}, ${3:longName}, ${4:units})",
        "description": "Assigns given named dimensions, long_name, and units to the input variable."
    },
    "natgrid": {
        "prefix": "natgrid",
        "body": "natgrid(${1:x}, ${2:y}, ${3:z}, ${4:xo}, ${5:yo})",
        "description": "Interpolates data from an unstructured (randomly-spaced) grid to a rectilinear grid using natural neighbor interpolation."
    },
    "natgrid_Wrap": {
        "prefix": "natgrid_Wrap",
        "body": "natgrid_Wrap(${1:x}, ${2:y}, ${3:z}, ${4:xo}, ${5:yo})",
        "description": "Interpolates data from an unstructured (randomly-spaced) grid to a rectilinear grid using natural neighbor interpolation and retains metadata."
    },
    "natgridd": {
        "prefix": "natgridd",
        "body": "natgridd(${1:x}, ${2:y}, ${3:z}, ${4:xo}, ${5:yo})",
        "description": "Interpolates double data on an unstructured grid to a rectilinear grid. (Deprecated version.)"
    },
    "natgrids": {
        "prefix": "natgrids",
        "body": "natgrids(${1:x}, ${2:y}, ${3:z}, ${4:xo}, ${5:yo})",
        "description": "Interpolates float data on an unstructured grid to a rectilinear grid. (Deprecated version.)"
    },
    "ncargpath": {
        "prefix": "ncargpath",
        "body": "ncargpath(${1:char})",
        "description": "Returns the absolute pathnames of various NCAR Graphics directories."
    },
    "ncargversion": {
        "prefix": "ncargversion",
        "body": "ncargversion()",
        "description": "Prints the NCAR Graphics version, copyright, trademark and general licensing terms."
    },
    "ndctodata": {
        "prefix": "ndctodata",
        "body": "ndctodata(${1:plot}, ${2:x_in}, ${3:y_in}, ${4:x_out}, ${5:y_out})",
        "description": "Converts normalized device coordinates (NDCs) into data coordinates."
    },
    "ndtooned": {
        "prefix": "ndtooned",
        "body": "ndtooned(${1:val})",
        "description": "Converts a multi-dimensional array to a one-dimensional array."
    },
    "netlw_fao56": {
        "prefix": "netlw_fao56",
        "body": "netlw_fao56(${1:tmin}, ${2:tmax}, ${3:actvpr}, ${4:radext}, ${5:radsol}, ${6:iounit})",
        "description": "Compute longwave radiation as described in FAO 56."
    },
    "netrad_fao56": {
        "prefix": "netrad_fao56",
        "body": "netrad_fao56(${1:netsw}, ${2:netlw})",
        "description": "Compute net radiation as the difference between net shortwave and net longwave radiation."
    },
    "netsw_fao56": {
        "prefix": "netsw_fao56",
        "body": "netsw_fao56(${1:radsol})",
        "description": "Compute net shortwave radiation as described in FAO 56."
    },
    "new": {
        "prefix": "new",
        "body": "new(${1:dimension_sizes}, ${2:vartype}, ${3:parameter})",
        "description": "Creates an NCL variable."
    },
    "NewCosWeight": {
        "prefix": "NewCosWeight",
        "body": "NewCosWeight(${1:y})",
        "description": "Performs cosine of the latitude weighting on the given array."
    },
    "NewList": {
        "prefix": "NewList",
        "body": "NewList(${1:s})",
        "description": "Create a list (type variable)."
    },
    "ngezlogo": {
        "prefix": "ngezlogo",
        "body": "ngezlogo(${1:wks})",
        "description": "Draws the NCAR logo in the lower right corner of the given workstation."
    },
    "nggcog": {
        "prefix": "nggcog",
        "body": "nggcog(${1:clat}, ${2:clon}, ${3:crad}, ${4:alat}, ${5:alon})",
        "description": "Calculates the latitudes and longitudes of a set of points approximating a circle at a given point on the surface of the globe."
    },
    "nggetp": {
        "prefix": "nggetp",
        "body": "nggetp(${1:pnam})",
        "description": "Retrieves values for various parameters for the NCAR ngezlogo procedure."
    },
    "nglogo": {
        "prefix": "nglogo",
        "body": "nglogo(${1:wks}, ${2:x}, ${3:y}, ${4:size}, ${5:type}, ${6:col1}, ${7:col2})",
        "description": "Draws various NCAR and UCAR logos on the given workstation."
    },
    "ngsetp": {
        "prefix": "ngsetp",
        "body": "ngsetp(${1:pnam}, ${2:pval})",
        "description": "Sets values for various parameters for the NCAR ngezlogo procedure."
    },
    "NhlAddAnnotation": {
        "prefix": "NhlAddAnnotation",
        "body": "NhlAddAnnotation(${1:plot_id}, ${2:anno_view_id})",
        "description": "Add annotations to a plot object as an external annotation."
    },
    "NhlAddData": {
        "prefix": "NhlAddData",
        "body": "NhlAddData(${1:dcomms}, ${2:res_name}, ${3:data_items})",
        "description": "Adds one or more additional data items to a plot."
    },
    "NhlAddOverlay": {
        "prefix": "NhlAddOverlay",
        "body": "NhlAddOverlay(${1:base_id}, ${2:transform_id}, ${3:after_id})",
        "description": "Overlays one plot object on another."
    },
    "NhlAddPrimitive": {
        "prefix": "NhlAddPrimitive",
        "body": "NhlAddPrimitive(${1:base_id}, ${2:primitive_ids}, ${3:before_id})",
        "description": "Adds a Primitive object to an existing plot."
    },
    "NhlAppGetDefaultParentId": {
        "prefix": "NhlAppGetDefaultParentId",
        "body": "NhlAppGetDefaultParentId()",
        "description": "Returns a reference to the current default App object."
    },
    "NhlChangeWorkstation": {
        "prefix": "NhlChangeWorkstation",
        "body": "NhlChangeWorkstation(${1:objects}, ${2:workstation})",
        "description": "Changes the output workstation of one or more NCL View objects."
    },
    "NhlClassName": {
        "prefix": "NhlClassName",
        "body": "NhlClassName(${1:objects})",
        "description": "Retrieve the class name of one or more NCL objects."
    },
    "NhlClearWorkstation": {
        "prefix": "NhlClearWorkstation",
        "body": "NhlClearWorkstation(${1:wks})",
        "description": "Clears the given workstation objects."
    },
    "NhlDataPolygon": {
        "prefix": "NhlDataPolygon",
        "body": "NhlDataPolygon(${1:objects}, ${2:style}, ${3:x}, ${4:y})",
        "description": "Draws a polygon using data coordinates."
    },
    "NhlDataPolyline": {
        "prefix": "NhlDataPolyline",
        "body": "NhlDataPolyline(${1:objects}, ${2:style}, ${3:x}, ${4:y})",
        "description": "Draws a polyline using data coordinates."
    },
    "NhlDataPolymarker": {
        "prefix": "NhlDataPolymarker",
        "body": "NhlDataPolymarker(${1:objects}, ${2:style}, ${3:x}, ${4:y})",
        "description": "Draws polymarkers using data coordinates."
    },
    "NhlDataToNDC": {
        "prefix": "NhlDataToNDC",
        "body": "NhlDataToNDC(${1:plot}, ${2:x_in}, ${3:y_in}, ${4:x_out}, ${5:y_out})",
        "description": "Converts data units into normalized device coordinates (NDCs)."
    },
    "NhlDestroy": {
        "prefix": "NhlDestroy",
        "body": "NhlDestroy(${1:objects})",
        "description": "Destroys objects from NCL."
    },
    "NhlDraw": {
        "prefix": "NhlDraw",
        "body": "NhlDraw(${1:objects})",
        "description": "Draws the given graphical objects."
    },
    "NhlFrame": {
        "prefix": "NhlFrame",
        "body": "NhlFrame(${1:wks})",
        "description": "Updates and clears the given workstation objects."
    },
    "NhlFreeColor": {
        "prefix": "NhlFreeColor",
        "body": "NhlFreeColor(${1:workstations}, ${2:color_index})",
        "description": "Removes one or more color entries from one or more workstations."
    },
    "NhlGetBB": {
        "prefix": "NhlGetBB",
        "body": "NhlGetBB(${1:objects})",
        "description": "Retrieves the bounding boxes of a list of NCL objects."
    },
    "NhlGetClassResources": {
        "prefix": "NhlGetClassResources",
        "body": "NhlGetClassResources(${1:class_name}, ${2:filter_string})",
        "description": "Returns a list of resources associated with the given class name and an optional filter string."
    },
    "NhlGetErrorObjectId": {
        "prefix": "NhlGetErrorObjectId",
        "body": "NhlGetErrorObjectId()",
        "description": "Returns a reference to the current Error object."
    },
    "NhlGetNamedColorIndex": {
        "prefix": "NhlGetNamedColorIndex",
        "body": "NhlGetNamedColorIndex(${1:wks}, ${2:color_name})",
        "description": "Returns color map indexes that match the given color names in the color maps of the given workstations."
    },
    "NhlGetParentId": {
        "prefix": "NhlGetParentId",
        "body": "NhlGetParentId(${1:objs})",
        "description": "Returns the ids of the parent ids of the given objects."
    },
    "NhlGetParentWorkstation": {
        "prefix": "NhlGetParentWorkstation",
        "body": "NhlGetParentWorkstation(${1:objs})",
        "description": "Returns the ids of the parent workstations of the given objects."
    },
    "NhlGetWorkspaceObjectId": {
        "prefix": "NhlGetWorkspaceObjectId",
        "body": "NhlGetWorkspaceObjectId()",
        "description": "Returns a reference to the current Workspace object."
    },
    "NhlIsAllocatedColor": {
        "prefix": "NhlIsAllocatedColor",
        "body": "NhlIsAllocatedColor(${1:workstations}, ${2:color_index})",
        "description": "Queries a list of workstations to determine whether or not the given color indexes have been allocated."
    },
    "NhlIsApp": {
        "prefix": "NhlIsApp",
        "body": "NhlIsApp(${1:objects})",
        "description": "Returns True for each given object that is an App object."
    },
    "NhlIsDataComm": {
        "prefix": "NhlIsDataComm",
        "body": "NhlIsDataComm(${1:objects})",
        "description": "Returns True for each given object that is a DataComm object."
    },
    "NhlIsDataItem": {
        "prefix": "NhlIsDataItem",
        "body": "NhlIsDataItem(${1:objects})",
        "description": "Returns True for each given object that is a DataItem object."
    },
    "NhlIsDataSpec": {
        "prefix": "NhlIsDataSpec",
        "body": "NhlIsDataSpec(${1:objects})",
        "description": "Returns True for each given object that is a DataSpec object."
    },
    "NhlIsTransform": {
        "prefix": "NhlIsTransform",
        "body": "NhlIsTransform(${1:objects})",
        "description": "Returns True for each given object that is a Transform object."
    },
    "NhlIsView": {
        "prefix": "NhlIsView",
        "body": "NhlIsView(${1:objects})",
        "description": "Returns True for each given object that is a View object."
    },
    "NhlIsWorkstation": {
        "prefix": "NhlIsWorkstation",
        "body": "NhlIsWorkstation(${1:objects})",
        "description": "Returns True for each given object that is a Workstation object."
    },
    "NhlName": {
        "prefix": "NhlName",
        "body": "NhlName(${1:objects})",
        "description": "Retrieves the name of one or more NCL objects."
    },
    "NhlNDCPolygon": {
        "prefix": "NhlNDCPolygon",
        "body": "NhlNDCPolygon(${1:objects}, ${2:style}, ${3:x}, ${4:y})",
        "description": "Draws a polygon using NDC (Normalized Device Coordinate) units."
    },
    "NhlNDCPolyline": {
        "prefix": "NhlNDCPolyline",
        "body": "NhlNDCPolyline(${1:objects}, ${2:style}, ${3:x}, ${4:y})",
        "description": "Draws a polyline using NDC (Normalized Device Coordinate) units."
    },
    "NhlNDCPolymarker": {
        "prefix": "NhlNDCPolymarker",
        "body": "NhlNDCPolymarker(${1:objects}, ${2:style}, ${3:x}, ${4:y})",
        "description": "Draws polymarkers using NDC (Normalized Device Coordinate) units."
    },
    "NhlNDCToData": {
        "prefix": "NhlNDCToData",
        "body": "NhlNDCToData(${1:plot}, ${2:x_in}, ${3:y_in}, ${4:x_out}, ${5:y_out})",
        "description": "Converts normalized device coordinates (NDCs) into data coordinates."
    },
    "NhlNewColor": {
        "prefix": "NhlNewColor",
        "body": "NhlNewColor(${1:workstations}, ${2:red}, ${3:green}, ${4:blue})",
        "description": "Allocates new workstation color indexes."
    },
    "NhlNewDashPattern": {
        "prefix": "NhlNewDashPattern",
        "body": "NhlNewDashPattern(${1:wks}, ${2:dash_patterns})",
        "description": "Adds new dash patterns to the existing table of dash patterns."
    },
    "NhlNewMarker": {
        "prefix": "NhlNewMarker",
        "body": "NhlNewMarker(${1:wks}, ${2:marker_strings}, ${3:font_num}, ${4:xoffset}, ${5:yoffset}, ${6:aspect_ratio}, ${7:size}, ${8:angle})",
        "description": "Adds new markers to the existing table of markers."
    },
    "NhlPalGetDefined": {
        "prefix": "NhlPalGetDefined",
        "body": "NhlPalGetDefined()",
        "description": "Returns a list of available color maps."
    },
    "NhlRemoveAnnotation": {
        "prefix": "NhlRemoveAnnotation",
        "body": "NhlRemoveAnnotation(${1:plot_id}, ${2:anno_manager_id})",
        "description": "Remove annotations from the plot they are registered in."
    },
    "NhlRemoveData": {
        "prefix": "NhlRemoveData",
        "body": "NhlRemoveData(${1:plot_objs}, ${2:resname}, ${3:data_objs})",
        "description": "Removes data items from one or more plots."
    },
    "NhlRemoveOverlay": {
        "prefix": "NhlRemoveOverlay",
        "body": "NhlRemoveOverlay(${1:base_id}, ${2:plot_id}, ${3:restore})",
        "description": "Removes one or more plots from an overlay."
    },
    "NhlRemovePrimitive": {
        "prefix": "NhlRemovePrimitive",
        "body": "NhlRemovePrimitive(${1:base_id}, ${2:primitive_ids})",
        "description": "Removes one or more primitives from the given Transform object."
    },
    "NhlSetColor": {
        "prefix": "NhlSetColor",
        "body": "NhlSetColor(${1:workstations}, ${2:color_index}, ${3:red}, ${4:green}, ${5:blue})",
        "description": "Sets the colors for a given list of color indexes and workstations."
    },
    "NhlSetDashPattern": {
        "prefix": "NhlSetDashPattern",
        "body": "NhlSetDashPattern(${1:wks}, ${2:dash_indexes}, ${3:dash_patterns})",
        "description": "Sets the dash patterns for a given list of dash pattern indexes and workstations."
    },
    "NhlSetMarker": {
        "prefix": "NhlSetMarker",
        "body": "NhlSetMarker(${1:wks}, ${2:marker_indexes}, ${3:marker_strings}, ${4:font_num}, ${5:xoffset}, ${6:yoffset}, ${7:aspect_ratio}, ${8:size}, ${9:angle})",
        "description": "Sets the markers for a given list of marker indexes and workstations."
    },
    "NhlUpdateData": {
        "prefix": "NhlUpdateData",
        "body": "NhlUpdateData(${1:dcomms})",
        "description": "Forces the DataComm instances to update their internal states."
    },
    "NhlUpdateWorkstation": {
        "prefix": "NhlUpdateWorkstation",
        "body": "NhlUpdateWorkstation(${1:wks})",
        "description": "Updates the given workstation objects."
    },
    "nice_mnmxintvl": {
        "prefix": "nice_mnmxintvl",
        "body": "nice_mnmxintvl(${1:cmin}, ${2:cmax}, ${3:max_levels}, ${4:outside})",
        "description": "Calculates \"nice\" values for endpoints and spacing to be used for creating a series of equally-spaced levels through the data domain."
    },
    "niceLatLon2D": {
        "prefix": "niceLatLon2D",
        "body": "niceLatLon2D(${1:lat2d}, ${2:lon2d})",
        "description": "Check two-dimensional map coordinates to see if they have a \"nice\" structure."
    },
    "nngetaspectd": {
        "prefix": "nngetaspectd",
        "body": "nngetaspectd(${1:i}, ${2:j})",
        "description": "Retrieves an aspect at a specified coordinate position."
    },
    "nngetaspects": {
        "prefix": "nngetaspects",
        "body": "nngetaspects(${1:i}, ${2:j})",
        "description": "Retrieves an aspect at a specified coordinate position."
    },
    "nngetp": {
        "prefix": "nngetp",
        "body": "nngetp(${1:pnam})",
        "description": "Retrieves control parameters for Natgrid routines."
    },
    "nngetsloped": {
        "prefix": "nngetsloped",
        "body": "nngetsloped(${1:i}, ${2:j})",
        "description": "Retrieves a slope at a specified coordinate position."
    },
    "nngetslopes": {
        "prefix": "nngetslopes",
        "body": "nngetslopes(${1:i}, ${2:j})",
        "description": "Retrieves a slope at a specified coordinate position."
    },
    "nngetwts": {
        "prefix": "nngetwts",
        "body": "nngetwts(${1:numw}, ${2:nbrs}, ${3:wts}, ${4:xe}, ${5:ye}, ${6:ze})",
        "description": "Retrieves natural neighbors and weights for the function values at those neighbors."
    },
    "nngetwtsd": {
        "prefix": "nngetwtsd",
        "body": "nngetwtsd(${1:numw}, ${2:nbrs}, ${3:wts}, ${4:xe}, ${5:ye}, ${6:ze})",
        "description": "Retrieves natural neighbors and weights for the function values at those neighbors."
    },
    "nnpnt": {
        "prefix": "nnpnt",
        "body": "nnpnt(${1:x}, ${2:y})",
        "description": "Interpolates from 2D random data to get values at a specified set of points."
    },
    "nnpntd": {
        "prefix": "nnpntd",
        "body": "nnpntd(${1:x}, ${2:y})",
        "description": "Interpolates from 2D random double data to get values at a specified set of points.  (Deprecated version.)"
    },
    "nnpntend": {
        "prefix": "nnpntend",
        "body": "nnpntend()",
        "description": "Terminates interpolation from 2D random data to get values at a specified set of points."
    },
    "nnpntendd": {
        "prefix": "nnpntendd",
        "body": "nnpntendd()",
        "description": "Terminates interpolation from 2D random data to get values at a specified set of points."
    },
    "nnpntinit": {
        "prefix": "nnpntinit",
        "body": "nnpntinit(${1:x}, ${2:y}, ${3:z})",
        "description": "Initializes internal quantities, for given input data, to allow subsequent nnpnt calls to interpolate at specified points."
    },
    "nnpntinitd": {
        "prefix": "nnpntinitd",
        "body": "nnpntinitd(${1:x}, ${2:y}, ${3:z})",
        "description": "Initializes internal quantities, for given input data, to allow subsequent nnpntd calls to interpolate at specified points."
    },
    "nnpntinits": {
        "prefix": "nnpntinits",
        "body": "nnpntinits(${1:x}, ${2:y}, ${3:z})",
        "description": "Initializes internal quantities, for given input data, to allow subsequent nnpnts calls to interpolate at specified points."
    },
    "nnpnts": {
        "prefix": "nnpnts",
        "body": "nnpnts(${1:x}, ${2:y})",
        "description": "Interpolates from 2D random float data to get values at a specified set of points.  (Deprecated version.)"
    },
    "nnsetp": {
        "prefix": "nnsetp",
        "body": "nnsetp(${1:pnam}, ${2:pval})",
        "description": "Sets control parameters for Natgrid routines."
    },
    "NormCosWgtGlobe": {
        "prefix": "NormCosWgtGlobe",
        "body": "NormCosWgtGlobe(${1:lat})",
        "description": "Create normalized cosine weights that sum to 2.0."
    },
    "num": {
        "prefix": "num",
        "body": "num(${1:val})",
        "description": "Counts the number of True values in the input."
    },
    "numAsciiCol": {
        "prefix": "numAsciiCol",
        "body": "numAsciiCol(${1:file_name})",
        "description": "Returns the number of columns in an ASCII file."
    },
    "numAsciiRow": {
        "prefix": "numAsciiRow",
        "body": "numAsciiRow(${1:file_name})",
        "description": "Returns the number of rows in an ASCII file."
    },
    "numeric2int": {
        "prefix": "numeric2int",
        "body": "numeric2int(${1:x}, ${2:iopt})",
        "description": "Converts values of any numeric type to type integer."
    },
    "obj_anal_ic": {
        "prefix": "obj_anal_ic",
        "body": "obj_anal_ic(${1:zlon}, ${2:zlat}, ${3:z}, ${4:glon}, ${5:glat}, ${6:rscan}, ${7:option})",
        "description": "Iterative improvement objective analysis."
    },
    "obj_anal_ic_deprecated": {
        "prefix": "obj_anal_ic_deprecated",
        "body": "obj_anal_ic_deprecated(${1:zlon}, ${2:zlat}, ${3:z}, ${4:glon}, ${5:glat}, ${6:rscan}, ${7:option})",
        "description": "Iterative correction objective analysis (Cressman, Barnes) (deprecated)"
    },
    "obj_anal_ic_Wrap": {
        "prefix": "obj_anal_ic_Wrap",
        "body": "obj_anal_ic_Wrap(${1:zlon}, ${2:zlat}, ${3:z}, ${4:glon}, ${5:glat}, ${6:rscan}, ${7:option})",
        "description": "Iterative improvement objective analysis and returns meta data."
    },
    "omega_ccm": {
        "prefix": "omega_ccm",
        "body": "omega_ccm(${1:u}, ${2:v}, ${3:div}, ${4:dpsl}, ${5:dpsm}, ${6:pmid}, ${7:pdel}, ${8:psfc}, ${9:hybdif}, ${10:hybm}, ${11:nprlev})",
        "description": "Calculates omega [vertical pressure velocity] using the model diagnostic method."
    },
    "omega_ccm_driver": {
        "prefix": "omega_ccm_driver",
        "body": "omega_ccm_driver(${1:p0}, ${2:psfc}, ${3:u}, ${4:v}, ${5:hyam}, ${6:hybm}, ${7:hyai}, ${8:hybi})",
        "description": "Computes vertical pressure velocity [omega] via model diagnostic code."
    },
    "omega_to_w": {
        "prefix": "omega_to_w",
        "body": "omega_to_w(${1:omega}, ${2:p}, ${3:t})",
        "description": "Convert omega vertical velocity (Pa/s) to (m/s)."
    },
    "onedtond": {
        "prefix": "onedtond",
        "body": "onedtond(${1:val}, ${2:dims})",
        "description": "Converts a one-dimensional array to a multi-dimensional array."
    },
    "oneDtostring": {
        "prefix": "oneDtostring",
        "body": "oneDtostring(${1:x})",
        "description": "Converts a 1-dimensional array to a single string."
    },
    "overlay": {
        "prefix": "overlay",
        "body": "overlay(${1:base_id}, ${2:transform_id})",
        "description": "Overlays one plot object on another."
    },
    "pack_values": {
        "prefix": "pack_values",
        "body": "pack_values(${1:x}, ${2:packType}, ${3:opt})",
        "description": "Compress values of type float or double to values of type short or byte."
    },
    "paleo_outline": {
        "prefix": "paleo_outline",
        "body": "paleo_outline(${1:oro}, ${2:lat}, ${3:lon}, ${4:landvalue}, ${5:basename})",
        "description": "Creates continental outlines from model orography data."
    },
    "parse_globalatts_hdf5": {
        "prefix": "parse_globalatts_hdf5",
        "body": "parse_globalatts_hdf5(${1:f}, ${2:attName})",
        "description": "Parse a HDF5 global attribute into an array containing KEYWORDs and associated VALUEs."
    },
    "pattern_cor": {
        "prefix": "pattern_cor",
        "body": "pattern_cor(${1:x}, ${2:y}, ${3:w}, ${4:opt})",
        "description": "Compute centered or uncentered  pattern correlation."
    },
    "pdfx": {
        "prefix": "pdfx",
        "body": "pdfx(${1:x}, ${2:nbin}, ${3:opt})",
        "description": "Generates a univariate probability density distribution (PDF)."
    },
    "pdfxy": {
        "prefix": "pdfxy",
        "body": "pdfxy(${1:x}, ${2:y}, ${3:nbinx}, ${4:nbiny}, ${5:opt})",
        "description": "Generates a joint probability density distribution. (Please use pdfxy_conform.)"
    },
    "pdfxy_bin": {
        "prefix": "pdfxy_bin",
        "body": "pdfxy_bin(${1:x}, ${2:y}, ${3:binxbnd}, ${4:binybnd}, ${5:opt})",
        "description": "Performs looping necessary to calculate the bivariate  (joint) probability distribution (see pdfxy)."
    },
    "pdfxy_conform": {
        "prefix": "pdfxy_conform",
        "body": "pdfxy_conform(${1:x}, ${2:y}, ${3:nbinx}, ${4:nbiny}, ${5:opt})",
        "description": "An interface to pdfxy that allows the input arrays to be different sizes."
    },
    "pie_chart": {
        "prefix": "pie_chart",
        "body": "pie_chart(${1:wks}, ${2:percent}, ${3:name}, ${4:color}, ${5:res})",
        "description": "Creates a basic pie chart."
    },
    "plt_pdfxy": {
        "prefix": "plt_pdfxy",
        "body": "plt_pdfxy(${1:wks}, ${2:p}, ${3:res})",
        "description": "Creates a nice plot of the joint probability array created by the pdfxy function."
    },
    "poisson_grid_fill": {
        "prefix": "poisson_grid_fill",
        "body": "poisson_grid_fill(${1:x}, ${2:is_cyclic}, ${3:guess_type}, ${4:nscan}, ${5:epsx}, ${6:relc}, ${7:opt})",
        "description": "Replaces all missing (_FillValue) values in a grid with values derived from solving Poisson's equation via relaxation."
    },
    "pop_remap": {
        "prefix": "pop_remap",
        "body": "pop_remap(${1:x_dst}, ${2:map_wts}, ${3:dst_add}, ${4:src_add}, ${5:x_src})",
        "description": "Regrids a POP ocean model grid to another grid."
    },
    "PopLatLon": {
        "prefix": "PopLatLon",
        "body": "PopLatLon(${1:x}, ${2:grd_src}, ${3:grd_dst}, ${4:method}, ${5:area_type}, ${6:date})",
        "description": "Regrids a scalar variable on a POP grid to a lat/lon grid or vice-versa."
    },
    "PopLatLonV": {
        "prefix": "PopLatLonV",
        "body": "PopLatLonV(${1:u}, ${2:v}, ${3:grd_src}, ${4:grd_dst}, ${5:method}, ${6:area_type}, ${7:date})",
        "description": "Converts vectors on a POP grid to a lat/lon grid  and vice-versa."
    },
    "pot_temp": {
        "prefix": "pot_temp",
        "body": "pot_temp(${1:p}, ${2:t}, ${3:dim}, ${4:opt})",
        "description": "Compute potential temperature."
    },
    "pot_temp_equiv": {
        "prefix": "pot_temp_equiv",
        "body": "pot_temp_equiv(${1:p}, ${2:t}, ${3:w}, ${4:dim}, ${5:humVarType})",
        "description": "Compute the equivalent potential temperature using an approximation which does not use the lifting condensation temperature."
    },
    "pot_temp_equiv_tlcl": {
        "prefix": "pot_temp_equiv_tlcl",
        "body": "pot_temp_equiv_tlcl(${1:p}, ${2:t}, ${3:tlcl}, ${4:w}, ${5:iounits})",
        "description": "Compute equivalent potential temperature using the lifting condensation temperature."
    },
    "pot_vort_hybrid": {
        "prefix": "pot_vort_hybrid",
        "body": "pot_vort_hybrid(${1:p}, ${2:u}, ${3:v}, ${4:t}, ${5:lat}, ${6:gridType}, ${7:opt})",
        "description": "Compute potential vorticity on hybrid levels and a global grid."
    },
    "pot_vort_isobaric": {
        "prefix": "pot_vort_isobaric",
        "body": "pot_vort_isobaric(${1:p}, ${2:u}, ${3:v}, ${4:t}, ${5:lat}, ${6:gridType}, ${7:opt})",
        "description": "Compute potential vorticity on isobaric levels and a global rectilinear grid."
    },
    "potmp_insitu_ocn": {
        "prefix": "potmp_insitu_ocn",
        "body": "potmp_insitu_ocn(${1:t}, ${2:s}, ${3:pres}, ${4:pref}, ${5:dims}, ${6:opt})",
        "description": "Calculate seawater potential temperature at an arbitrary reference pressure given insitu temperature, salinity and depth."
    },
    "prcwater_dp": {
        "prefix": "prcwater_dp",
        "body": "prcwater_dp(${1:q}, ${2:p})",
        "description": "Computes total column precipitable water of the rightmost dimension."
    },
    "precip_rain_snow": {
        "prefix": "precip_rain_snow",
        "body": "precip_rain_snow(${1:prc}, ${2:tmp}, ${3:train}, ${4:tsnow})",
        "description": "Partition monthly precipitation totals into rain and snow amount using an empirical relationship."
    },
    "pres2hybrid": {
        "prefix": "pres2hybrid",
        "body": "pres2hybrid(${1:p}, ${2:ps}, ${3:p0}, ${4:xi}, ${5:hyao}, ${6:hybo}, ${7:intflg})",
        "description": "Interpolates data on constant pressure levels to hybrid levels."
    },
    "pres2hybrid_Wrap": {
        "prefix": "pres2hybrid_Wrap",
        "body": "pres2hybrid_Wrap(${1:p}, ${2:ps}, ${3:p0}, ${4:xi}, ${5:hyao}, ${6:hybo}, ${7:intflg})",
        "description": "Interpolates data on constant pressure levels to hybrid levels and retains metadata."
    },
    "pres_hybrid_ccm": {
        "prefix": "pres_hybrid_ccm",
        "body": "pres_hybrid_ccm(${1:ps}, ${2:p0}, ${3:hya}, ${4:hyb})",
        "description": "Calculates pressure at the hybrid levels."
    },
    "pres_hybrid_ccm_se": {
        "prefix": "pres_hybrid_ccm_se",
        "body": "pres_hybrid_ccm_se(${1:ps}, ${2:p0}, ${3:hya}, ${4:hyb})",
        "description": "Calculates pressure at each hybrid level using spectral element grid structure."
    },
    "pres_hybrid_jra55": {
        "prefix": "pres_hybrid_jra55",
        "body": "pres_hybrid_jra55(${1:ps}, ${2:hyai}, ${3:hybi})",
        "description": "Calculates the \"full\" hybrid pressure levels for models using the Simmons/Burridge formulations (eg: Japanese ReAnalysis)."
    },
    "pres_sigma": {
        "prefix": "pres_sigma",
        "body": "pres_sigma(${1:sigma}, ${2:ps})",
        "description": "Calculates the pressure at specified sigma levels."
    },
    "print": {
        "prefix": "print",
        "body": "print(${1:data})",
        "description": "Prints the value of a variable or expression."
    },
    "print_clock": {
        "prefix": "print_clock",
        "body": "print_clock(${1:title})",
        "description": "Prints the given string along with a current timestamp."
    },
    "print_table": {
        "prefix": "print_table",
        "body": "print_table(${1:alist}, ${2:format})",
        "description": "Prints formatted elements from a list to stdout."
    },
    "printFileVarSummary": {
        "prefix": "printFileVarSummary",
        "body": "printFileVarSummary(${1:file}, ${2:varname})",
        "description": "Prints a summary of a file variable's information."
    },
    "printMinMax": {
        "prefix": "printMinMax",
        "body": "printMinMax(${1:data}, ${2:opt})",
        "description": "Prints the minimum and maximum values of a variable."
    },
    "printVarSummary": {
        "prefix": "printVarSummary",
        "body": "printVarSummary(${1:data})",
        "description": "Prints a summary of a variable's information."
    },
    "product": {
        "prefix": "product",
        "body": "product(${1:x})",
        "description": "Computes the product of the input."
    },
    "prsatm_tz_fao56": {
        "prefix": "prsatm_tz_fao56",
        "body": "prsatm_tz_fao56(${1:t}, ${2:z}, ${3:P0}, ${4:Z0}, ${5:iounit})",
        "description": "Compute atmospheric pressure as described in FAO 56."
    },
    "prsatm_z_fao56": {
        "prefix": "prsatm_z_fao56",
        "body": "prsatm_z_fao56(${1:z}, ${2:P0}, ${3:Z0}, ${4:iounit})",
        "description": "Compute atmospheric pressure using the approximation described in FAO 56: Chapter 3; equation 7."
    },
    "pslec": {
        "prefix": "pslec",
        "body": "pslec(${1:t}, ${2:phis}, ${3:ps}, ${4:pres})",
        "description": "Computes sea level pressure from CCM/CAM hybrid model variables using the ECMWF formulation."
    },
    "pslhor": {
        "prefix": "pslhor",
        "body": "pslhor(${1:z}, ${2:t}, ${3:phis}, ${4:ps}, ${5:pres}, ${6:lats})",
        "description": "Computes sea level pressure from CCM/CAM hybrid model variables using the  ECMWF formulation and Trenberth's horizontal correction."
    },
    "pslhyp": {
        "prefix": "pslhyp",
        "body": "pslhyp(${1:pres}, ${2:z}, ${3:tv})",
        "description": "Computes sea level pressure using the hypsometric equation."
    },
    "psychro_fao56": {
        "prefix": "psychro_fao56",
        "body": "psychro_fao56(${1:p}, ${2:iounit})",
        "description": "Computes the psychrometric constant [kPa/C] as described in FAO 56."
    },
    "qsort": {
        "prefix": "qsort",
        "body": "qsort(${1:value})",
        "description": "Sorts a singly dimensioned array."
    },
    "quadroots": {
        "prefix": "quadroots",
        "body": "quadroots(${1:a}, ${2:b}, ${3:c})",
        "description": "Determine roots of a quadratic equation [ a*x^2 + b*x + c]."
    },
    "qvector_isobaric": {
        "prefix": "qvector_isobaric",
        "body": "qvector_isobaric(${1:u}, ${2:v}, ${3:t}, ${4:ss}, ${5:p}, ${6:pdim}, ${7:gridType}, ${8:opt})",
        "description": "Use \"highly accurate\" spherical harmonics to derive the Q-vector components on a global grid."
    },
    "qvector_isobaric_cfd": {
        "prefix": "qvector_isobaric_cfd",
        "body": "qvector_isobaric_cfd(${1:u}, ${2:v}, ${3:t}, ${4:ss}, ${5:p}, ${6:pdim}, ${7:gridType}, ${8:opt})",
        "description": "Use centered finite differences to derive the Q-vector components on a global or regional grid."
    },
    "radext_fao56": {
        "prefix": "radext_fao56",
        "body": "radext_fao56(${1:jday}, ${2:lat}, ${3:ounit})",
        "description": "Compute extraterrestrial radiation for daily periods as described in FAO 56."
    },
    "radsol2_fao56": {
        "prefix": "radsol2_fao56",
        "body": "radsol2_fao56(${1:jday}, ${2:lat}, ${3:sunhr}, ${4:ounit}, ${5:opt})",
        "description": "Compute solar radiation from daily sunshine and day-of-year as described in FAO 56."
    },
    "radsol3_hargreaves_fao56": {
        "prefix": "radsol3_hargreaves_fao56",
        "body": "radsol3_hargreaves_fao56(${1:tmin}, ${2:tmax}, ${3:radext}, ${4:krs}, ${5:iounit})",
        "description": "Compute solar radiation derived from air temperature differences using Hargreaves method as described in FAO 56."
    },
    "radsol_clrsky_fao56": {
        "prefix": "radsol_clrsky_fao56",
        "body": "radsol_clrsky_fao56(${1:radext}, ${2:opt})",
        "description": "Compute clear sky solar radiation as described in FAO 56."
    },
    "radsol_fao56": {
        "prefix": "radsol_fao56",
        "body": "radsol_fao56(${1:radext}, ${2:lat}, ${3:sunhr}, ${4:iounit}, ${5:opt})",
        "description": "Compute solar radiation via the 'Angstrom Formula' which uses extraterrestrial radiation and relative sunshine as described in FAO 56 (equation 35)."
    },
    "rand": {
        "prefix": "rand",
        "body": "rand()",
        "description": "Generates a pseudo-random number."
    },
    "random_chi": {
        "prefix": "random_chi",
        "body": "random_chi(${1:df}, ${2:N})",
        "description": "Generates random numbers using a chi-squared distribution."
    },
    "random_gamma": {
        "prefix": "random_gamma",
        "body": "random_gamma(${1:locp}, ${2:shape}, ${3:N})",
        "description": "Generates random numbers using a gamma distribution."
    },
    "random_normal": {
        "prefix": "random_normal",
        "body": "random_normal(${1:av}, ${2:sd}, ${3:N})",
        "description": "Generates random numbers using a normal distribution."
    },
    "random_setallseed": {
        "prefix": "random_setallseed",
        "body": "random_setallseed(${1:iseed1}, ${2:iseed2})",
        "description": "Sets initial seeds for random number generators."
    },
    "random_uniform": {
        "prefix": "random_uniform",
        "body": "random_uniform(${1:low}, ${2:high}, ${3:N})",
        "description": "Generates random numbers using a uniform range distribution."
    },
    "rcm2points": {
        "prefix": "rcm2points",
        "body": "rcm2points(${1:lat2d}, ${2:lon2d}, ${3:fi}, ${4:lat}, ${5:lon}, ${6:opt})",
        "description": "Interpolates data on a curvilinear grid (i.e. RCM, WRF, NARR) to  an unstructured grid."
    },
    "rcm2points_Wrap": {
        "prefix": "rcm2points_Wrap",
        "body": "rcm2points_Wrap(${1:lat2d}, ${2:lon2d}, ${3:fi}, ${4:lat}, ${5:lon}, ${6:opt})",
        "description": "Interpolates data on a curvilinear grid (i.e. RCM, WRF, NARR) to  an unstructured grid and retains metadata."
    },
    "rcm2rgrid": {
        "prefix": "rcm2rgrid",
        "body": "rcm2rgrid(${1:lat2d}, ${2:lon2d}, ${3:fi}, ${4:lat}, ${5:lon}, ${6:Option})",
        "description": "Interpolates data on a curvilinear grid (i.e. RCM, WRF, NARR) to a rectilinear grid."
    },
    "rcm2rgrid_Wrap": {
        "prefix": "rcm2rgrid_Wrap",
        "body": "rcm2rgrid_Wrap(${1:lat2d}, ${2:lon2d}, ${3:fi}, ${4:lat}, ${5:lon}, ${6:Option})",
        "description": "Interpolates data on a curvilinear grid (i.e. RCM, WRF, NARR) to a rectilinear grid and retains metadata."
    },
    "rdsstoi": {
        "prefix": "rdsstoi",
        "body": "rdsstoi(${1:nyrstrt}, ${2:nyrlast}, ${3:mlon}, ${4:nlat}, ${5:info})",
        "description": "Reads weekly/monthly compocp site and climatology grids."
    },
    "read_colormap_file": {
        "prefix": "read_colormap_file",
        "body": "read_colormap_file(${1:filename})",
        "description": "Reads an NCL system colormap file or a user-defined colormap."
    },
    "readAsciiHead": {
        "prefix": "readAsciiHead",
        "body": "readAsciiHead(${1:filename}, ${2:opt})",
        "description": "Reads an ASCII file and returns just the header."
    },
    "readAsciiTable": {
        "prefix": "readAsciiTable",
        "body": "readAsciiTable(${1:filename}, ${2:ncol}, ${3:data_type}, ${4:opt})",
        "description": "Reads an ASCII file given the number of lines at the beginning and end of the file to ignore."
    },
    "rectilinear_to_SCRIP": {
        "prefix": "rectilinear_to_SCRIP",
        "body": "rectilinear_to_SCRIP(${1:SCRIP_filename}, ${2:lat}, ${3:lon}, ${4:opt})",
        "description": "Writes the description of a rectilinear grid to a SCRIP file."
    },
    "refevt_hamon": {
        "prefix": "refevt_hamon",
        "body": "refevt_hamon(${1:tmean}, ${2:daylight}, ${3:iounit})",
        "description": "Use the Hamon formulation to derive reference evapotranspiration."
    },
    "refevt_hargreaves_fao56": {
        "prefix": "refevt_hargreaves_fao56",
        "body": "refevt_hargreaves_fao56(${1:tmin}, ${2:tmax}, ${3:rex}, ${4:iounit})",
        "description": "Use the Hargreaves ETo equation to derive reference evapotranspiration as described in FAO 56."
    },
    "refevt_penman_fao56": {
        "prefix": "refevt_penman_fao56",
        "body": "refevt_penman_fao56(${1:Tmean}, ${2:netrad}, ${3:G}, ${4:g}, ${5:u2}, ${6:edef}, ${7:D}, ${8:albedo_crop}, ${9:cnum}, ${10:cden}, ${11:ounit})",
        "description": "Use the full Penman-Monteith equation to derive reference evapotranspiration as described in FAO 56."
    },
    "refevt_turc": {
        "prefix": "refevt_turc",
        "body": "refevt_turc(${1:tmean}, ${2:radsol}, ${3:iounit})",
        "description": "Use the Turc ETo formulation to derive reference evapotranspiration."
    },
    "refevt_turc_rh": {
        "prefix": "refevt_turc_rh",
        "body": "refevt_turc_rh(${1:tmean}, ${2:radsol}, ${3:rh}, ${4:iounit})",
        "description": "Use the Turc ETo formulation with a correction for low relative humidity to derive reference evapotranspiration."
    },
    "reg_multlin": {
        "prefix": "reg_multlin",
        "body": "reg_multlin(${1:y}, ${2:x}, ${3:option})",
        "description": "Performs basic multiple linear regression analysis."
    },
    "reg_multlin_stats": {
        "prefix": "reg_multlin_stats",
        "body": "reg_multlin_stats(${1:y}, ${2:x}, ${3:opt})",
        "description": "Performs multiple linear regression analysis including confidence estimates and creates an ANOVA table."
    },
    "regCoef": {
        "prefix": "regCoef",
        "body": "regCoef(${1:x}, ${2:y})",
        "description": "Calculates the linear regression coefficient between two variables."
    },
    "regcoef": {
        "prefix": "regcoef",
        "body": "regcoef(${1:x}, ${2:y}, ${3:tval}, ${4:nptxy})",
        "description": "Calculates the linear regression coefficient between two variables."
    },
    "regCoef_n": {
        "prefix": "regCoef_n",
        "body": "regCoef_n(${1:x}, ${2:y}, ${3:dims_x}, ${4:dims_y})",
        "description": "Calculates the linear regression coefficient between two variables on the given dimensions."
    },
    "region_ind": {
        "prefix": "region_ind",
        "body": "region_ind(${1:lat2d}, ${2:lon2d}, ${3:latS}, ${4:latN}, ${5:lonW}, ${6:lonE})",
        "description": "Returns the indices (subscripts) of two-dimensional latitude/longitude arrays that span user specified latitude/longitude boundaries."
    },
    "regline": {
        "prefix": "regline",
        "body": "regline(${1:x}, ${2:y})",
        "description": "Calculates the linear regression coefficient between two series."
    },
    "regline_stats": {
        "prefix": "regline_stats",
        "body": "regline_stats(${1:x}, ${2:y})",
        "description": "Performs simple linear regression including confidence estimates, an ANOVA table and 95% mean response estimates."
    },
    "regline_weight": {
        "prefix": "regline_weight",
        "body": "regline_weight(${1:x}, ${2:y}, ${3:yu}, ${4:opt})",
        "description": "Calculates the linear regression coefficient between two series where one variable is weighted by some measure of uncertainty."
    },
    "relhum": {
        "prefix": "relhum",
        "body": "relhum(${1:t}, ${2:w}, ${3:p})",
        "description": "Calculates relative humidity given temperature, mixing ratio, and pressure."
    },
    "relhum_ice": {
        "prefix": "relhum_ice",
        "body": "relhum_ice(${1:t}, ${2:w}, ${3:p})",
        "description": "Calculates relative humidity with respect to ice, given temperature, mixing ratio, and pressure."
    },
    "relhum_ttd": {
        "prefix": "relhum_ttd",
        "body": "relhum_ttd(${1:t}, ${2:td}, ${3:opt})",
        "description": "Calculates relative humidity given temperature and dew point temperature."
    },
    "relhum_water": {
        "prefix": "relhum_water",
        "body": "relhum_water(${1:t}, ${2:w}, ${3:p})",
        "description": "Calculates relative humidity with respect to water, given temperature, mixing ratio, and pressure."
    },
    "replace_ieeenan": {
        "prefix": "replace_ieeenan",
        "body": "replace_ieeenan(${1:x}, ${2:value}, ${3:option})",
        "description": "Changes all occurrences of IEEE NaN to a user-specified value."
    },
    "replaceSingleChar": {
        "prefix": "replaceSingleChar",
        "body": "replaceSingleChar(${1:x}, ${2:oldC}, ${3:newC})",
        "description": "Within a string replace one character with another character. (Deprecated:  see str_sub_str.)"
    },
    "reset_device_coordinates": {
        "prefix": "reset_device_coordinates",
        "body": "reset_device_coordinates(${1:wks})",
        "description": "Resets the PS/PDF device coordinates back to their default values."
    },
    "reshape": {
        "prefix": "reshape",
        "body": "reshape(${1:val}, ${2:dims})",
        "description": "Reshapes a multi-dimensional array to another multi-dimensional array."
    },
    "reshape_ind": {
        "prefix": "reshape_ind",
        "body": "reshape_ind(${1:val}, ${2:indexes}, ${3:dims})",
        "description": "Places values from a smaller one-dimensional array to a larger one-dimensional array, and reshapes it."
    },
    "resolveWavesHayashi": {
        "prefix": "resolveWavesHayashi",
        "body": "resolveWavesHayashi(${1:x}, ${2:window}, ${3:spd})",
        "description": "Reorder the complex coefficients returned by cfftf  to resolve the progressive and retrogressive waves."
    },
    "rgbhls": {
        "prefix": "rgbhls",
        "body": "rgbhls(${1:rgb})",
        "description": "Converts RGB color values to HLS."
    },
    "rgbhsv": {
        "prefix": "rgbhsv",
        "body": "rgbhsv(${1:rgb})",
        "description": "Converts RGB color values to HSV."
    },
    "RGBtoCmap": {
        "prefix": "RGBtoCmap",
        "body": "RGBtoCmap(${1:filename})",
        "description": "Reads a text file of RGB triplets and converts them to a colormap."
    },
    "rgbyiq": {
        "prefix": "rgbyiq",
        "body": "rgbyiq(${1:rgb})",
        "description": "Converts RGB color values to YIQ values."
    },
    "rgrid2rcm": {
        "prefix": "rgrid2rcm",
        "body": "rgrid2rcm(${1:lat}, ${2:lon}, ${3:fi}, ${4:lat2d}, ${5:lon2d}, ${6:Option})",
        "description": "Interpolates data on a rectilinear lat/lon grid to a curvilinear grid like those used by the RCM, WRF and NARR models/datasets."
    },
    "rgrid2rcm_Wrap": {
        "prefix": "rgrid2rcm_Wrap",
        "body": "rgrid2rcm_Wrap(${1:lat}, ${2:lon}, ${3:fi}, ${4:lat2d}, ${5:lon2d}, ${6:Option})",
        "description": "Interpolates data on a rectilinear lat/lon grid to a curvilinear grid like those used by the RCM, WRF and NARR models/datasets and retains metadata."
    },
    "rho_mwjf": {
        "prefix": "rho_mwjf",
        "body": "rho_mwjf(${1:t2d}, ${2:s2d}, ${3:depth})",
        "description": "Computes ocean water density given a specified range for potential temperature (deg Celsius) and salinity (psu)."
    },
    "rhomb_trunc": {
        "prefix": "rhomb_trunc",
        "body": "rhomb_trunc(${1:a}, ${2:b}, ${3:T})",
        "description": "Performs rhomboidal truncation on spherical harmonic coefficients."
    },
    "rhomb_trunC": {
        "prefix": "rhomb_trunC",
        "body": "rhomb_trunC(${1:ab}, ${2:T})",
        "description": "Performs rhomboidal truncation on spherical harmonic coefficients."
    },
    "rhum_fao56": {
        "prefix": "rhum_fao56",
        "body": "rhum_fao56(${1:actvpr}, ${2:satvpr}, ${3:optrh})",
        "description": "Compute relative humidity as described in FAO 56."
    },
    "rigrad_bruntv_atm": {
        "prefix": "rigrad_bruntv_atm",
        "body": "rigrad_bruntv_atm(${1:thv}, ${2:u}, ${3:v}, ${4:z}, ${5:opt}, ${6:dim})",
        "description": "Compute the atmospheric gradient Richardson number and, optionally, the Brunt-Vaisala, buoyancy and shear."
    },
    "rip_cape_2d": {
        "prefix": "rip_cape_2d",
        "body": "rip_cape_2d(${1:p}, ${2:t}, ${3:q}, ${4:z}, ${5:zsfc}, ${6:psfc}, ${7:opt})",
        "description": "Computes convective available potential energy (CAPE), convective inhibition (CIN), lifted condensation level (LCL), and level of free convection (LFC) (deprecated version)."
    },
    "rip_cape_3d": {
        "prefix": "rip_cape_3d",
        "body": "rip_cape_3d(${1:p}, ${2:t}, ${3:q}, ${4:z}, ${5:zsfc}, ${6:psfc}, ${7:opt})",
        "description": "Computes convective available potential energy (CAPE) and convective inhibition (CIN) (deprecated version)."
    },
    "rm_single_dims": {
        "prefix": "rm_single_dims",
        "body": "rm_single_dims(${1:x})",
        "description": "Removes (squeezes) singleton (degenerate) dimensions from an array while preserving metadata."
    },
    "rmAnnCycle1D": {
        "prefix": "rmAnnCycle1D",
        "body": "rmAnnCycle1D(${1:x})",
        "description": "Removes annual cycle from a one-dimensional time series."
    },
    "rmInsufData": {
        "prefix": "rmInsufData",
        "body": "rmInsufData(${1:x}, ${2:percent})",
        "description": "Sets all instances (i.e., time) of a grid point to missing if a user-prescribed percentage of points is missing."
    },
    "rmMonAnnCycLLLT": {
        "prefix": "rmMonAnnCycLLLT",
        "body": "rmMonAnnCycLLLT(${1:x})",
        "description": "Removes the annual cycle from \"monthly\" data."
    },
    "rmMonAnnCycLLT": {
        "prefix": "rmMonAnnCycLLT",
        "body": "rmMonAnnCycLLT(${1:x})",
        "description": "Removes the annual cycle from \"monthly\" data."
    },
    "rmMonAnnCycTLL": {
        "prefix": "rmMonAnnCycTLL",
        "body": "rmMonAnnCycTLL(${1:x})",
        "description": "Removes the annual cycle from \"monthly\" data."
    },
    "round": {
        "prefix": "round",
        "body": "round(${1:x}, ${2:opt})",
        "description": "Rounds a float or double variable to the nearest whole number."
    },
    "rtest": {
        "prefix": "rtest",
        "body": "rtest(${1:r}, ${2:Nr}, ${3:opt})",
        "description": "Determines the statistical significance of a linear correlation coefficient."
    },
    "run_cor": {
        "prefix": "run_cor",
        "body": "run_cor(${1:x}, ${2:y}, ${3:time}, ${4:wSize})",
        "description": "Calculates a running correlation."
    },
    "runave": {
        "prefix": "runave",
        "body": "runave(${1:x}, ${2:nave}, ${3:opt})",
        "description": "Calculates an unweighted running average on the rightmost dimension."
    },
    "runave_n": {
        "prefix": "runave_n",
        "body": "runave_n(${1:x}, ${2:nave}, ${3:opt}, ${4:dim})",
        "description": "Calculates an unweighted running average on the given dimension."
    },
    "runave_n_Wrap": {
        "prefix": "runave_n_Wrap",
        "body": "runave_n_Wrap(${1:x}, ${2:nave}, ${3:opt}, ${4:dim})",
        "description": "Calculates an unweighted running average on the given dimension and retains metadata."
    },
    "runave_Wrap": {
        "prefix": "runave_Wrap",
        "body": "runave_Wrap(${1:x}, ${2:nave}, ${3:opt})",
        "description": "Calculates an unweighted running average on the rightmost dimension and retains metadata."
    },
    "satvpr_mean_fao56": {
        "prefix": "satvpr_mean_fao56",
        "body": "satvpr_mean_fao56(${1:tmin}, ${2:tmax}, ${3:iounit})",
        "description": "Compute mean saturation vapor pressure using minimum and maximum temperature temperature as described in FAO 56."
    },
    "satvpr_slope_fao56": {
        "prefix": "satvpr_slope_fao56",
        "body": "satvpr_slope_fao56(${1:temp}, ${2:iounit})",
        "description": "Compute the slope of the saturation vapor pressure curve as described in FAO 56."
    },
    "satvpr_tdew_fao56": {
        "prefix": "satvpr_tdew_fao56",
        "body": "satvpr_tdew_fao56(${1:tdew}, ${2:iounit})",
        "description": "Compute actual saturation vapor pressure as described in FAO 56."
    },
    "satvpr_temp_fao56": {
        "prefix": "satvpr_temp_fao56",
        "body": "satvpr_temp_fao56(${1:temp}, ${2:iounit})",
        "description": "Compute saturation vapor pressure using temperature as described in FAO 56."
    },
    "satvpr_water_bolton": {
        "prefix": "satvpr_water_bolton",
        "body": "satvpr_water_bolton(${1:t}, ${2:iounit})",
        "description": "Estimate the saturation vapor pressure over water using Bolton's equation 10."
    },
    "satvpr_water_stipanuk": {
        "prefix": "satvpr_water_stipanuk",
        "body": "satvpr_water_stipanuk(${1:t}, ${2:iounit})",
        "description": "Estimate the saturation vapor pressure over water using the Stipanuk approximation."
    },
    "scale_values": {
        "prefix": "scale_values",
        "body": "scale_values(${1:x}, ${2:minRet}, ${3:maxRet}, ${4:opt})",
        "description": "Scale the values of an array to a user specified range."
    },
    "set_default_fillvalue": {
        "prefix": "set_default_fillvalue",
        "body": "set_default_fillvalue(${1:type}, ${2:value})",
        "description": "Sets the default missing value for the given variable type."
    },
    "set_sphere_radius": {
        "prefix": "set_sphere_radius",
        "body": "set_sphere_radius(${1:radius})",
        "description": "Sets the radius of a sphere used in spherical harmonic routines."
    },
    "setColorContourClear": {
        "prefix": "setColorContourClear",
        "body": "setColorContourClear(${1:plot}, ${2:clow}, ${3:chigh})",
        "description": "Sets the color contours between two given levels to transparent."
    },
    "setfileoption": {
        "prefix": "setfileoption",
        "body": "setfileoption(${1:format_or_file}, ${2:option}, ${3:value})",
        "description": "Sets a number of file-format-specific options."
    },
    "sfvp2uvf": {
        "prefix": "sfvp2uvf",
        "body": "sfvp2uvf(${1:sf}, ${2:vp}, ${3:u}, ${4:v})",
        "description": "Computes the wind components given stream function and velocity potential (on a fixed grid) via spherical harmonics."
    },
    "sfvp2uvg": {
        "prefix": "sfvp2uvg",
        "body": "sfvp2uvg(${1:sf}, ${2:vp}, ${3:u}, ${4:v})",
        "description": "Computes the wind components given stream function and velocity potential (on a gaussian grid) via spherical harmonics."
    },
    "ShadeCOI": {
        "prefix": "ShadeCOI",
        "body": "ShadeCOI(${1:wks}, ${2:plot}, ${3:w}, ${4:time}, ${5:res})",
        "description": "Adds the cone of influence as a shaded polygon."
    },
    "ShadeGeLeContour": {
        "prefix": "ShadeGeLeContour",
        "body": "ShadeGeLeContour(${1:plot}, ${2:lowval}, ${3:highval}, ${4:pattern})",
        "description": "Shades contour regions given low and high values and a shade pattern. (Deprecated. Use gsn_contour_shade.)"
    },
    "ShadeGtContour": {
        "prefix": "ShadeGtContour",
        "body": "ShadeGtContour(${1:plot}, ${2:value}, ${3:pattern})",
        "description": "Shades contour regions above a given value with the given fill pattern. (Deprecated. Use gsn_contour_shade.)"
    },
    "ShadeLtContour": {
        "prefix": "ShadeLtContour",
        "body": "ShadeLtContour(${1:plot}, ${2:value}, ${3:pattern})",
        "description": "Shades contour regions below a given value with the given fill pattern. (Deprecated. Use gsn_contour_shade.)"
    },
    "ShadeLtGtContour": {
        "prefix": "ShadeLtGtContour",
        "body": "ShadeLtGtContour(${1:plot}, ${2:ltvalue}, ${3:ltpattern}, ${4:gtvalue}, ${5:gtpattern})",
        "description": "Shades contour regions below a given value and above a given value with the specified fill patterns. (Deprecated. Use gsn_contour_shade.)"
    },
    "shaeC": {
        "prefix": "shaeC",
        "body": "shaeC(${1:g})",
        "description": "Computes spherical harmonic analysis of a scalar field on a fixed grid via spherical harmonics."
    },
    "shaec": {
        "prefix": "shaec",
        "body": "shaec(${1:g}, ${2:a}, ${3:b})",
        "description": "Computes spherical harmonic analysis of a scalar field on a fixed grid via spherical harmonics."
    },
    "shagC": {
        "prefix": "shagC",
        "body": "shagC(${1:g})",
        "description": "Computes spherical harmonic analysis of a scalar field on a gaussian grid via spherical harmonics."
    },
    "shagc": {
        "prefix": "shagc",
        "body": "shagc(${1:g}, ${2:a}, ${3:b})",
        "description": "Computes spherical harmonic analysis of a scalar field on a gaussian grid via spherical harmonics."
    },
    "shear_stretch_deform": {
        "prefix": "shear_stretch_deform",
        "body": "shear_stretch_deform(${1:u}, ${2:v}, ${3:lat}, ${4:gridType}, ${5:opt})",
        "description": "Using spherical harmonics, estimate the kinematic shear-deformation, stretch-deformation and total-deformation of a global horizontal (east-west) wind field."
    },
    "shear_stretch_deform_cfd": {
        "prefix": "shear_stretch_deform_cfd",
        "body": "shear_stretch_deform_cfd(${1:u}, ${2:v}, ${3:lat}, ${4:lon}, ${5:cyclic}, ${6:opt})",
        "description": "Using centered-finite-differences, estimate the kinematic shear-deformation, stretch-deformation and total-deformation of a global or regional horizontal (east-west) wind field."
    },
    "shgetnp": {
        "prefix": "shgetnp",
        "body": "shgetnp(${1:px}, ${2:py}, ${3:pz}, ${4:x}, ${5:y}, ${6:z}, ${7:flag})",
        "description": "Finds the nearest point, or points (in a specified set of points), to a given point in 3-space."
    },
    "shgetp": {
        "prefix": "shgetp",
        "body": "shgetp(${1:pnam})",
        "description": "Retrieves control parameters for Shgrid routines."
    },
    "shgrid": {
        "prefix": "shgrid",
        "body": "shgrid(${1:xi}, ${2:yi}, ${3:zi}, ${4:ui}, ${5:xo}, ${6:yo}, ${7:zo})",
        "description": "Interpolates data from an unstructured grid to a grid in 3-space."
    },
    "short2flt": {
        "prefix": "short2flt",
        "body": "short2flt(${1:x})",
        "description": "Converts values of type short to values of type float using the \"scale\" and \"offset\" attributes (if present)."
    },
    "short2flt_hdf": {
        "prefix": "short2flt_hdf",
        "body": "short2flt_hdf(${1:x})",
        "description": "Converts values of type short to values of type float using the \"scale\" and \"offset\" attributes (if present)."
    },
    "shorttobyte": {
        "prefix": "shorttobyte",
        "body": "shorttobyte(${1:short_val})",
        "description": "Coerces values of type short to values of type byte."
    },
    "shorttochar": {
        "prefix": "shorttochar",
        "body": "shorttochar(${1:short_val})",
        "description": "Coerces values of type short to values of type character."
    },
    "shorttocharacter": {
        "prefix": "shorttocharacter",
        "body": "shorttocharacter(${1:short_val})",
        "description": "Coerces values of type short to values of type character."
    },
    "show_ascii": {
        "prefix": "show_ascii",
        "body": "show_ascii()",
        "description": "Prints the ASCII table to the screen."
    },
    "shseC": {
        "prefix": "shseC",
        "body": "shseC(${1:ab}, ${2:nlon})",
        "description": "Computes the spherical harmonic synthesis of a scalar quantity on a fixed grid via spherical harmonics."
    },
    "shsec": {
        "prefix": "shsec",
        "body": "shsec(${1:a}, ${2:b}, ${3:g})",
        "description": "Computes spherical harmonic synthesis of a scalar quantity on a fixed grid via spherical harmonics."
    },
    "shsetp": {
        "prefix": "shsetp",
        "body": "shsetp(${1:pnam}, ${2:pval})",
        "description": "Sets control parameters for Shgrid routines."
    },
    "shsgC": {
        "prefix": "shsgC",
        "body": "shsgC(${1:ab}, ${2:nlon})",
        "description": "Computes the spherical harmonic synthesis of a scalar quantity on a gaussian grid via spherical harmonics."
    },
    "shsgc": {
        "prefix": "shsgc",
        "body": "shsgc(${1:a}, ${2:b}, ${3:g})",
        "description": "Computes spherical harmonic synthesis of a scalar quantity on a gaussian grid via spherical harmonics."
    },
    "shsgc_R42": {
        "prefix": "shsgc_R42",
        "body": "shsgc_R42(${1:a}, ${2:b})",
        "description": "Computes spherical harmonic synthesis of a scalar quantity via rhomboidally truncated (R42) spherical harmonic coefficients onto a  (108x128) gaussian grid."
    },
    "shsgc_R42_Wrap": {
        "prefix": "shsgc_R42_Wrap",
        "body": "shsgc_R42_Wrap(${1:a}, ${2:b})",
        "description": "Computes spherical harmonic synthesis of a scalar quantity via rhomboidally truncated (R42) spherical harmonic coefficients onto a  (108x128) gaussian grid. (creates metadata)."
    },
    "sigma2hybrid": {
        "prefix": "sigma2hybrid",
        "body": "sigma2hybrid(${1:x}, ${2:sigx}, ${3:hya}, ${4:hyb}, ${5:p0}, ${6:ps}, ${7:intyp})",
        "description": "Interpolates from sigma to hybrid coordinates."
    },
    "sign_f90": {
        "prefix": "sign_f90",
        "body": "sign_f90(${1:X}, ${2:Y})",
        "description": "Mimic the behavior of Fortran-90's sign transfer function."
    },
    "sign_matlab": {
        "prefix": "sign_matlab",
        "body": "sign_matlab(${1:X})",
        "description": "Mimic the behavior of Matlab's sign function."
    },
    "simpeq": {
        "prefix": "simpeq",
        "body": "simpeq(${1:fi}, ${2:dx})",
        "description": "Integrate a sequence of equally spaced points using Simpson's Rule."
    },
    "simple_legend": {
        "prefix": "simple_legend",
        "body": "simple_legend(${1:wks}, ${2:plot}, ${3:genres}, ${4:lineres}, ${5:textres})",
        "description": "Creates a legend based on user supplied resources."
    },
    "simple_legend_ndc": {
        "prefix": "simple_legend_ndc",
        "body": "simple_legend_ndc(${1:wks}, ${2:genres}, ${3:lineres}, ${4:textres})",
        "description": "Creates a legend in NDC space based on user supplied resources."
    },
    "simpne": {
        "prefix": "simpne",
        "body": "simpne(${1:x}, ${2:y})",
        "description": "Integrates a sequence of unequally or equally spaced points using Simpson's three-point formula."
    },
    "sin": {
        "prefix": "sin",
        "body": "sin(${1:value})",
        "description": "Computes the sine of numeric types."
    },
    "sindex_yrmo": {
        "prefix": "sindex_yrmo",
        "body": "sindex_yrmo(${1:slpt}, ${2:slpd}, ${3:iprnt})",
        "description": "Calculates the Southern Oscillation Index given two series of year-month values."
    },
    "sinh": {
        "prefix": "sinh",
        "body": "sinh(${1:value})",
        "description": "Computes the hyperbolic sine of numeric types."
    },
    "sizeof": {
        "prefix": "sizeof",
        "body": "sizeof(${1:data})",
        "description": "Returns the total size, in bytes, of the input variable."
    },
    "skewT_BackGround": {
        "prefix": "skewT_BackGround",
        "body": "skewT_BackGround(${1:wks}, ${2:res})",
        "description": "Creates a background chart for Skew T, Log P plotting."
    },
    "skewT_PlotData": {
        "prefix": "skewT_PlotData",
        "body": "skewT_PlotData(${1:wks}, ${2:skewt_bkgd}, ${3:P}, ${4:TC}, ${5:TDC}, ${6:Z}, ${7:WSPD}, ${8:WDIR}, ${9:dataOpts})",
        "description": "Plot a sounding and (optionally) winds on Skew T, Log P charts created by skewT_BackGround."
    },
    "sleep": {
        "prefix": "sleep",
        "body": "sleep(${1:seconds})",
        "description": "Pauses execution of NCL scripts for a specified number of seconds."
    },
    "smth9": {
        "prefix": "smth9",
        "body": "smth9(${1:x}, ${2:p}, ${3:q}, ${4:wrap})",
        "description": "Performs nine point local smoothing on one or more 2D grids."
    },
    "smth9_Wrap": {
        "prefix": "smth9_Wrap",
        "body": "smth9_Wrap(${1:x}, ${2:p}, ${3:q}, ${4:wrap})",
        "description": "Performs nine point local smoothing on one or more 2D grids and retains metadata."
    },
    "smthClmDayTLL": {
        "prefix": "smthClmDayTLL",
        "body": "smthClmDayTLL(${1:clmDay}, ${2:nHarm})",
        "description": "Calculates a smooth mean daily annual cycle for an array nominally dimensioned (Time,Lat,Lon)."
    },
    "smthClmDayTLLL": {
        "prefix": "smthClmDayTLLL",
        "body": "smthClmDayTLLL(${1:clmDay}, ${2:nHarm})",
        "description": "Calculates a smooth mean daily annual cycle for an array nominally dimensioned (Time,Level,Lat,Lon)."
    },
    "snindex_yrmo": {
        "prefix": "snindex_yrmo",
        "body": "snindex_yrmo(${1:slpt}, ${2:slpd}, ${3:iprnt}, ${4:soi_noise})",
        "description": "Calculates the Southern Oscillation Index and the noise index given two series of year-month values."
    },
    "soil_heatflux_month_fao56": {
        "prefix": "soil_heatflux_month_fao56",
        "body": "soil_heatflux_month_fao56(${1:t}, ${2:dt}, ${3:dz}, ${4:ndim}, ${5:iounit}, ${6:opt})",
        "description": "Compute soil heat flux for monthly periods as described in FAO 56."
    },
    "solve_linsys": {
        "prefix": "solve_linsys",
        "body": "solve_linsys(${1:A}, ${2:B})",
        "description": "Computes the solution to a real system of linear equations."
    },
    "span_color_indexes": {
        "prefix": "span_color_indexes",
        "body": "span_color_indexes(${1:color_map}, ${2:num_colors})",
        "description": "Given the number of desired color values, return an array of indexes that nicely span the given color map."
    },
    "span_color_rgba": {
        "prefix": "span_color_rgba",
        "body": "span_color_rgba(${1:color_map}, ${2:num_colors})",
        "description": "Given the number of desired color values, return an array of RGB triplets or RGBA quadruplets that nicely span the given color map."
    },
    "span_named_colors": {
        "prefix": "span_named_colors",
        "body": "span_named_colors(${1:colors}, ${2:opt})",
        "description": "Returns an RGB array that is a span between given list of named colors."
    },
    "sparse_matrix_mult": {
        "prefix": "sparse_matrix_mult",
        "body": "sparse_matrix_mult(${1:row}, ${2:col}, ${3:S}, ${4:x}, ${5:dims})",
        "description": "Multiplies a sparse matrix with a dense matrix."
    },
    "spcorr": {
        "prefix": "spcorr",
        "body": "spcorr(${1:x}, ${2:y})",
        "description": "Computes  Spearman rank order correlation (Rho) correlation coefficient."
    },
    "spcorr_n": {
        "prefix": "spcorr_n",
        "body": "spcorr_n(${1:x}, ${2:y}, ${3:dim})",
        "description": "Computes   Spearman rank order correlation (Rho) correlation coefficient across the given dimension."
    },
    "specx_anal": {
        "prefix": "specx_anal",
        "body": "specx_anal(${1:x}, ${2:iopt}, ${3:jave}, ${4:pct})",
        "description": "Calculates spectra of a series."
    },
    "specx_ci": {
        "prefix": "specx_ci",
        "body": "specx_ci(${1:sdof}, ${2:lowval}, ${3:highval})",
        "description": "Calculates the theoretical Markov spectrum and the lower and upper confidence curves."
    },
    "specxy_anal": {
        "prefix": "specxy_anal",
        "body": "specxy_anal(${1:x}, ${2:y}, ${3:iopt}, ${4:jave}, ${5:pct})",
        "description": "Calculates cross spectra quantities of a series."
    },
    "sprintf": {
        "prefix": "sprintf",
        "body": "sprintf(${1:format}, ${2:array})",
        "description": "Converts floats or doubles into formatted strings."
    },
    "sprinti": {
        "prefix": "sprinti",
        "body": "sprinti(${1:format}, ${2:array})",
        "description": "Converts integers into formatted strings."
    },
    "sqrt": {
        "prefix": "sqrt",
        "body": "sqrt(${1:value})",
        "description": "Computes the square root of its input."
    },
    "SqrtCosWeight": {
        "prefix": "SqrtCosWeight",
        "body": "SqrtCosWeight(${1:y})",
        "description": "Performs square-root of the cosine of the latitude weighting on the given array."
    },
    "sqsort": {
        "prefix": "sqsort",
        "body": "sqsort(${1:value})",
        "description": "Sorts a singly dimensioned arrays of strings."
    },
    "srand": {
        "prefix": "srand",
        "body": "srand(${1:seed})",
        "description": "Establishes a seed for the rand function."
    },
    "stat2": {
        "prefix": "stat2",
        "body": "stat2(${1:x}, ${2:xmean}, ${3:xvar}, ${4:nptused})",
        "description": "Calculates the first two moments of the given input."
    },
    "stat4": {
        "prefix": "stat4",
        "body": "stat4(${1:x}, ${2:xmean}, ${3:xvar}, ${4:xskew}, ${5:xkurt}, ${6:nptused})",
        "description": "Calculates estimates of the first four moments (mean, variance, skewness, and kurtosis) of the given input."
    },
    "stat_dispersion": {
        "prefix": "stat_dispersion",
        "body": "stat_dispersion(${1:x}, ${2:opt})",
        "description": "Computes a number of robust statistics."
    },
    "stat_medrng": {
        "prefix": "stat_medrng",
        "body": "stat_medrng(${1:x}, ${2:xmedian}, ${3:xmrange}, ${4:xrange}, ${5:nptused})",
        "description": "Calculates median, range, and mid-range of the given input."
    },
    "stat_trim": {
        "prefix": "stat_trim",
        "body": "stat_trim(${1:x}, ${2:ptrim}, ${3:xmeant}, ${4:xsdt}, ${5:nptused})",
        "description": "Calculates trimmed estimates of the first two moments of the given input."
    },
    "static_energy_atm": {
        "prefix": "static_energy_atm",
        "body": "static_energy_atm(${1:t}, ${2:q}, ${3:z}, ${4:iounit})",
        "description": "Compute the atmospheric moist and dry static energy."
    },
    "static_stability": {
        "prefix": "static_stability",
        "body": "static_stability(${1:p}, ${2:t}, ${3:dim}, ${4:sopt})",
        "description": "Compute static stability."
    },
    "status_exit": {
        "prefix": "status_exit",
        "body": "status_exit(${1:code})",
        "description": "Exits an NCL script passing a status code to the calling environment."
    },
    "stdatmus_p2tdz": {
        "prefix": "stdatmus_p2tdz",
        "body": "stdatmus_p2tdz(${1:p})",
        "description": "Calculates the corresponding temperature, density, and height based on the 1976 U.S. standard atmosphere, given the pressure."
    },
    "stdatmus_z2tdp": {
        "prefix": "stdatmus_z2tdp",
        "body": "stdatmus_z2tdp(${1:z})",
        "description": "Calculates the corresponding temperature, density, and pressure based on the 1976 U.S. standard atmosphere, given the height."
    },
    "stddev": {
        "prefix": "stddev",
        "body": "stddev(${1:data})",
        "description": "Calculates the sample standard deviation."
    },
    "stdMonLLLT": {
        "prefix": "stdMonLLLT",
        "body": "stdMonLLLT(${1:x})",
        "description": "Calculates standard deviations of monthly means."
    },
    "stdMonLLT": {
        "prefix": "stdMonLLT",
        "body": "stdMonLLT(${1:x})",
        "description": "Calculates standard deviations of monthly means."
    },
    "stdMonTLL": {
        "prefix": "stdMonTLL",
        "body": "stdMonTLL(${1:x})",
        "description": "Calculates standard deviations of monthly means."
    },
    "stdMonTLLL": {
        "prefix": "stdMonTLLL",
        "body": "stdMonTLLL(${1:x})",
        "description": "Calculates standard deviations of monthly means."
    },
    "str_capital": {
        "prefix": "str_capital",
        "body": "str_capital(${1:string_val})",
        "description": "Capitalizes all words in each string."
    },
    "str_concat": {
        "prefix": "str_concat",
        "body": "str_concat(${1:string_val})",
        "description": "Concatenates all strings into a single string."
    },
    "str_fields_count": {
        "prefix": "str_fields_count",
        "body": "str_fields_count(${1:string_val}, ${2:delimiter})",
        "description": "Counts the number of fields separated by the given delimiters in an array of strings."
    },
    "str_get_cols": {
        "prefix": "str_get_cols",
        "body": "str_get_cols(${1:string_val}, ${2:start_col}, ${3:end_col})",
        "description": "Returns an array of substrings, given a start and end index into the given string."
    },
    "str_get_dq": {
        "prefix": "str_get_dq",
        "body": "str_get_dq()",
        "description": "Returns the double quote (\") character as a string."
    },
    "str_get_field": {
        "prefix": "str_get_field",
        "body": "str_get_field(${1:string_val}, ${2:field_number}, ${3:delimiter})",
        "description": "Returns an array of substrings given a field number and a combination of delimiters."
    },
    "str_get_nl": {
        "prefix": "str_get_nl",
        "body": "str_get_nl()",
        "description": "Returns the newline (\\n) character as a string."
    },
    "str_get_sq": {
        "prefix": "str_get_sq",
        "body": "str_get_sq()",
        "description": "Returns the single quote (') character as a string."
    },
    "str_get_tab": {
        "prefix": "str_get_tab",
        "body": "str_get_tab()",
        "description": "Returns the tab ('\\t' in C) character as a string."
    },
    "str_index_of_substr": {
        "prefix": "str_index_of_substr",
        "body": "str_index_of_substr(${1:str}, ${2:substr}, ${3:opt})",
        "description": "Returns the start indexes where one or more occurrences of a substring is found in a string."
    },
    "str_insert": {
        "prefix": "str_insert",
        "body": "str_insert(${1:string_val}, ${2:subString}, ${3:position})",
        "description": "Inserts a substring into the given strings."
    },
    "str_is_blank": {
        "prefix": "str_is_blank",
        "body": "str_is_blank(${1:string_val})",
        "description": "Returns True for strings that contain all blanks."
    },
    "str_join": {
        "prefix": "str_join",
        "body": "str_join(${1:string_val}, ${2:delim})",
        "description": "Joins all strings into one string, with each string separated by delimiter."
    },
    "str_left_strip": {
        "prefix": "str_left_strip",
        "body": "str_left_strip(${1:string_val})",
        "description": "Strips leading spaces and TABs from the input strings."
    },
    "str_lower": {
        "prefix": "str_lower",
        "body": "str_lower(${1:string_val})",
        "description": "Converts all input strings to lowercase."
    },
    "str_match": {
        "prefix": "str_match",
        "body": "str_match(${1:string_array}, ${2:sub_string})",
        "description": "Returns a list of strings that contain the given substring (case sensitive)."
    },
    "str_match_bool": {
        "prefix": "str_match_bool",
        "body": "str_match_bool(${1:string_array}, ${2:sub_string})",
        "description": "Returns a logical array of True/False/Missing indicating where the input array of strings contain the given substring (case sensitive)."
    },
    "str_match_bool_ic": {
        "prefix": "str_match_bool_ic",
        "body": "str_match_bool_ic(${1:string_array}, ${2:sub_string})",
        "description": "Returns a logical array of True/False/Missing indicating where the input array of strings contain the given substring (case insensitive)."
    },
    "str_match_ic": {
        "prefix": "str_match_ic",
        "body": "str_match_ic(${1:string_array}, ${2:sub_string})",
        "description": "Returns a list of strings that contain the given substring (case insensitive)."
    },
    "str_match_ic_regex": {
        "prefix": "str_match_ic_regex",
        "body": "str_match_ic_regex(${1:string_array}, ${2:expression})",
        "description": "Returns a list of strings that contain the given substring (case insensitive), allowing for regular expressions."
    },
    "str_match_ind": {
        "prefix": "str_match_ind",
        "body": "str_match_ind(${1:string_array}, ${2:sub_string})",
        "description": "Returns a list of indexes into an array of strings that contain the given substring (case sensitive)."
    },
    "str_match_ind_ic": {
        "prefix": "str_match_ind_ic",
        "body": "str_match_ind_ic(${1:string_array}, ${2:sub_string})",
        "description": "Returns a list of indexes into an array of strings that contain the given substring (case insensitive)."
    },
    "str_match_ind_ic_regex": {
        "prefix": "str_match_ind_ic_regex",
        "body": "str_match_ind_ic_regex(${1:string_array}, ${2:expression})",
        "description": "Returns a list of indexes into an array of strings that contain the given substring (case insensitive), allowing for regular expressions."
    },
    "str_match_ind_regex": {
        "prefix": "str_match_ind_regex",
        "body": "str_match_ind_regex(${1:string_array}, ${2:expression})",
        "description": "Returns a list of indexes into an array of strings that contain the given substring (case sensitive), allowing for regular expressions."
    },
    "str_match_regex": {
        "prefix": "str_match_regex",
        "body": "str_match_regex(${1:string_array}, ${2:expression})",
        "description": "Returns a list of strings that contain the given substring (case sensitive), allowing for regular expressions."
    },
    "str_right_strip": {
        "prefix": "str_right_strip",
        "body": "str_right_strip(${1:string_val})",
        "description": "Strips ending spaces and TABs from the input strings."
    },
    "str_split": {
        "prefix": "str_split",
        "body": "str_split(${1:string_val}, ${2:delimiter})",
        "description": "Splits a string into an array of strings given one or more delimiters."
    },
    "str_split_by_length": {
        "prefix": "str_split_by_length",
        "body": "str_split_by_length(${1:string_val}, ${2:length_val})",
        "description": "Splits a string or strings into an array of strings given a length, or an array of lengths."
    },
    "str_split_csv": {
        "prefix": "str_split_csv",
        "body": "str_split_csv(${1:string_val}, ${2:delimiter}, ${3:option})",
        "description": "Splits strings into an array of strings using the given delimiter."
    },
    "str_squeeze": {
        "prefix": "str_squeeze",
        "body": "str_squeeze(${1:string_val})",
        "description": "Strips off leading and ending spaces and TABs, and replaces multiple spaces and/or TABs with a single space."
    },
    "str_strip": {
        "prefix": "str_strip",
        "body": "str_strip(${1:string_val})",
        "description": "Strips leading and ending spaces and TABs from the input strings."
    },
    "str_sub_str": {
        "prefix": "str_sub_str",
        "body": "str_sub_str(${1:string_val}, ${2:oldString}, ${3:newString})",
        "description": "Replaces a substring with a new substring."
    },
    "str_switch": {
        "prefix": "str_switch",
        "body": "str_switch(${1:string_val})",
        "description": "Switches the case of characters in the given string(s)."
    },
    "str_upper": {
        "prefix": "str_upper",
        "body": "str_upper(${1:string_val})",
        "description": "Converts all input strings to uppercase."
    },
    "stringtochar": {
        "prefix": "stringtochar",
        "body": "stringtochar(${1:string_val})",
        "description": "Coerces values of type string to values of type character."
    },
    "stringtocharacter": {
        "prefix": "stringtocharacter",
        "body": "stringtocharacter(${1:string_val})",
        "description": "Coerces values of type string to values of type character."
    },
    "stringtodouble": {
        "prefix": "stringtodouble",
        "body": "stringtodouble(${1:string_val})",
        "description": "Coerces values of type string to values of type double."
    },
    "stringtofloat": {
        "prefix": "stringtofloat",
        "body": "stringtofloat(${1:string_val})",
        "description": "Coerces values of type string to values of type float."
    },
    "stringtoint": {
        "prefix": "stringtoint",
        "body": "stringtoint(${1:string_val})",
        "description": "Coerces values of type string to values of type integer."
    },
    "stringtointeger": {
        "prefix": "stringtointeger",
        "body": "stringtointeger(${1:string_val})",
        "description": "Coerces values of type string to values of type integer."
    },
    "stringtolong": {
        "prefix": "stringtolong",
        "body": "stringtolong(${1:string_val})",
        "description": "Coerces values of type string to values of type long."
    },
    "stringtoshort": {
        "prefix": "stringtoshort",
        "body": "stringtoshort(${1:string_val})",
        "description": "Coerces values of type string to values of type short."
    },
    "strlen": {
        "prefix": "strlen",
        "body": "strlen(${1:str})",
        "description": "Returns the length of a string variable."
    },
    "student_t": {
        "prefix": "student_t",
        "body": "student_t(${1:t}, ${2:df})",
        "description": "Calculates the two-tailed probability of the Student-t distribution."
    },
    "subprocess": {
        "prefix": "subprocess",
        "body": "subprocess(${1:command})",
        "description": "Executes a shell command as a concurrent subprocess to NCL."
    },
    "subprocess_wait": {
        "prefix": "subprocess_wait",
        "body": "subprocess_wait(${1:id}, ${2:is_blocking})",
        "description": "Checks the finish-status of a concurrent process launched by the subprocess command. Can optionally wait for the subprocess to finish."
    },
    "sum": {
        "prefix": "sum",
        "body": "sum(${1:x})",
        "description": "Sums the input."
    },
    "svd_lapack": {
        "prefix": "svd_lapack",
        "body": "svd_lapack(${1:A}, ${2:jobu}, ${3:jobv}, ${4:optv}, ${5:U}, ${6:V})",
        "description": "Calculates the singular value decomposition of a general rectangular matrix."
    },
    "svdcov": {
        "prefix": "svdcov",
        "body": "svdcov(${1:x}, ${2:y}, ${3:nsvd}, ${4:homlft}, ${5:hetlft}, ${6:homrgt}, ${7:hetrgt})",
        "description": "Uses singular value decomposition and returns the left and right homogeneous and heterogeneous arrays associated with the two input datasets."
    },
    "svdcov_sv": {
        "prefix": "svdcov_sv",
        "body": "svdcov_sv(${1:x}, ${2:y}, ${3:nsvd}, ${4:svLeft}, ${5:svRight})",
        "description": "Uses singular value decomposition to return the left and right singular vectors associated with the two input datasets."
    },
    "svdstd": {
        "prefix": "svdstd",
        "body": "svdstd(${1:x}, ${2:y}, ${3:nsvd}, ${4:homlft}, ${5:hetlft}, ${6:homrgt}, ${7:hetrgt})",
        "description": "Uses singular value decomposition and returns the left and right homogeneous and heterogeneous arrays associated with the two input datasets."
    },
    "svdstd_sv": {
        "prefix": "svdstd_sv",
        "body": "svdstd_sv(${1:x}, ${2:y}, ${3:nsvd}, ${4:svLeft}, ${5:svRight})",
        "description": "Uses singular value decomposition to return the left and right singular vectors associated with the two input datasets."
    },
    "symMinMaxPlt": {
        "prefix": "symMinMaxPlt",
        "body": "symMinMaxPlt(${1:x}, ${2:ncontours}, ${3:outside}, ${4:res})",
        "description": "Calculates the minimum/maximum values for a variable and uses nice_mnmxintvl to calculate the symmetric contour interval."
    },
    "system": {
        "prefix": "system",
        "body": "system(${1:command})",
        "description": "Executes a shell command."
    },
    "systemfunc": {
        "prefix": "systemfunc",
        "body": "systemfunc(${1:command})",
        "description": "Executes a shell command and returns the output."
    },
    "table_attach_columns": {
        "prefix": "table_attach_columns",
        "body": "table_attach_columns(${1:t1}, ${2:t2}, ${3:opt})",
        "description": "Attaches [appends] additional columns to a previously existing two-dimensional array."
    },
    "table_attach_rows": {
        "prefix": "table_attach_rows",
        "body": "table_attach_rows(${1:t1}, ${2:t2}, ${3:opt})",
        "description": "Attaches [appends] additional rows to a previously existing two-dimensional array."
    },
    "tan": {
        "prefix": "tan",
        "body": "tan(${1:value})",
        "description": "Computes the tangent of numeric types."
    },
    "tanh": {
        "prefix": "tanh",
        "body": "tanh(${1:value})",
        "description": "Computes the hyperbolic tangent of numeric types."
    },
    "taper": {
        "prefix": "taper",
        "body": "taper(${1:x}, ${2:p}, ${3:option})",
        "description": "Applies split-cosine-bell tapering to one or more series across the rightmost dimension."
    },
    "taper_n": {
        "prefix": "taper_n",
        "body": "taper_n(${1:x}, ${2:p}, ${3:option}, ${4:dim})",
        "description": "Applies split-cosine-bell tapering to one or more series across the given dimension."
    },
    "taylor_stats": {
        "prefix": "taylor_stats",
        "body": "taylor_stats(${1:t}, ${2:r}, ${3:w}, ${4:opt})",
        "description": "Calculates statistics needed for the Taylor Diagram: pattern_correlation, ratio and bias."
    },
    "tdclrs": {
        "prefix": "tdclrs",
        "body": "tdclrs(${1:wks}, ${2:color_scheme}, ${3:shade_intensity}, ${4:shade_range}, ${5:color_index1}, ${6:color_index2}, ${7:nblocks})",
        "description": "Defines a set of colors for use with selected TDPACK routines."
    },
    "tdctri": {
        "prefix": "tdctri",
        "body": "tdctri(${1:rtri}, ${2:ntri}, ${3:axis}, ${4:rcut})",
        "description": "Cuts the triangles in a triangle list with a plane perpendicular to an axis (for use with selected TDPACK routines)."
    },
    "tdcudp": {
        "prefix": "tdcudp",
        "body": "tdcudp()",
        "description": "Not yet implemented."
    },
    "tdcurv": {
        "prefix": "tdcurv",
        "body": "tdcurv(${1:wks}, ${2:ucurv}, ${3:vcurv}, ${4:wcurv}, ${5:iarh}, ${6:arhl}, ${7:arhw})",
        "description": "Draws the projection of a curve defined by an array of points in 3-space."
    },
    "tddtri": {
        "prefix": "tddtri",
        "body": "tddtri(${1:wks}, ${2:rtri}, ${3:ntri}, ${4:itwk})",
        "description": "Draws triangles defined by a triangle list (for use with selected TDPACK routines)."
    },
    "tdew_actvpr_fao56": {
        "prefix": "tdew_actvpr_fao56",
        "body": "tdew_actvpr_fao56(${1:actvpr}, ${2:iounit})",
        "description": "Compute dew point temperature as a function of actual vapor pressure as described in FAO 56."
    },
    "tdez2d": {
        "prefix": "tdez2d",
        "body": "tdez2d(${1:wks}, ${2:x}, ${3:y}, ${4:z}, ${5:rmult}, ${6:theta}, ${7:phi}, ${8:ist})",
        "description": "Draws a surface on the specified workstation."
    },
    "tdez3d": {
        "prefix": "tdez3d",
        "body": "tdez3d(${1:wks}, ${2:x}, ${3:y}, ${4:z}, ${5:u}, ${6:value}, ${7:rmult}, ${8:theta}, ${9:phi}, ${10:ist})",
        "description": "Draws an isosurface on the specified workstation."
    },
    "tdgetp": {
        "prefix": "tdgetp",
        "body": "tdgetp(${1:pnam})",
        "description": "Retrieves TDPACK parameter values."
    },
    "tdgrds": {
        "prefix": "tdgrds",
        "body": "tdgrds(${1:wks}, ${2:uvwmin}, ${3:uvwmax}, ${4:uvwstep}, ${5:igrt}, ${6:ihide})",
        "description": "Draws perimeters, ticks, and grid lines on the six sides of a box (for use with selected TDPACK routines)."
    },
    "tdgrid": {
        "prefix": "tdgrid",
        "body": "tdgrid(${1:wks}, ${2:xbegin}, ${3:xstep}, ${4:nx}, ${5:ybegin}, ${6:ystep}, ${7:ny}, ${8:grid_flag})",
        "description": "Draws a grid on a particular face of a box in 3-space (for use with selected TDPACK routines)."
    },
    "tdgtrs": {
        "prefix": "tdgtrs",
        "body": "tdgtrs(${1:render_index}, ${2:bot_fill_index1}, ${3:bot_fill_index2}, ${4:top_fill_index1}, ${5:top_fill_index2}, ${6:bot_line_index}, ${7:top_line_index}, ${8:draw_edge}, ${9:udist}, ${10:vdist}, ${11:wdist})",
        "description": "Gets the definition of a specified rendering style (for use with selected TDPACK routines)."
    },
    "tdinit": {
        "prefix": "tdinit",
        "body": "tdinit(${1:eye}, ${2:origin}, ${3:orient}, ${4:otep})",
        "description": "Defines eye position, line of sight, up direction, and stereo flag for selected TDPACK routines."
    },
    "tditri": {
        "prefix": "tditri",
        "body": "tditri(${1:u}, ${2:v}, ${3:w}, ${4:f}, ${5:fiso}, ${6:rtri}, ${7:ntri}, ${8:render_index})",
        "description": "Adds triangles defining an isosurface to a triangle list (for use with selected TDPACK routines)."
    },
    "tdlbla": {
        "prefix": "tdlbla",
        "body": "tdlbla(${1:wks}, ${2:axis}, ${3:info_label}, ${4:num_labels}, ${5:xrl_edge}, ${6:ybt_edge}, ${7:angle})",
        "description": "Draws labels for a particular face of a box in 3-space (for use with selected TDPACK routines)."
    },
    "tdlblp": {
        "prefix": "tdlblp",
        "body": "tdlblp()",
        "description": "Not yet implemented."
    },
    "tdlbls": {
        "prefix": "tdlbls",
        "body": "tdlbls(${1:wks}, ${2:uvwmin}, ${3:uvwmax}, ${4:uvwnum_lab}, ${5:uvwinfo_lab}, ${6:edge_flag})",
        "description": "Draws labels for all faces of a box in 3-space (for use with selected TDPACK routines)."
    },
    "tdline": {
        "prefix": "tdline",
        "body": "tdline(${1:wks}, ${2:uvw1}, ${3:uvw2})",
        "description": "Draws the projection of a solid line in 3-space (for use with selected TDPACK routines)."
    },
    "tdlndp": {
        "prefix": "tdlndp",
        "body": "tdlndp()",
        "description": "Not yet implemented."
    },
    "tdlnpa": {
        "prefix": "tdlnpa",
        "body": "tdlnpa(${1:wks}, ${2:uvw1}, ${3:uvw2})",
        "description": "Draws the projection of a line joining two points in the reference parallelogram (for use with selected TDPACK routines)."
    },
    "tdlpdp": {
        "prefix": "tdlpdp",
        "body": "tdlpdp()",
        "description": "Not yet implemented."
    },
    "tdmtri": {
        "prefix": "tdmtri",
        "body": "tdmtri(${1:marker_type}, ${2:center_point}, ${3:radius}, ${4:rtri}, ${5:ntri}, ${6:render_index}, ${7:uvwmin}, ${8:uvwmax})",
        "description": "Adds triangles defining a 3D marker to a triangle list for use with selected TDPACK routines."
    },
    "tdotri": {
        "prefix": "tdotri",
        "body": "tdotri(${1:rtri}, ${2:ntri}, ${3:rtwk}, ${4:order_flag})",
        "description": "Orders the triangles in a triangle list for proper rendering (for use with selected TDPACK routines)."
    },
    "tdpara": {
        "prefix": "tdpara",
        "body": "tdpara(${1:uvw00}, ${2:uvw10}, ${3:uvw01})",
        "description": "Defines the reference parallelogram for use with selected TDPACK routines."
    },
    "tdplch": {
        "prefix": "tdplch",
        "body": "tdplch(${1:wks}, ${2:xpos}, ${3:ypos}, ${4:chrs}, ${5:size}, ${6:angle}, ${7:counter})",
        "description": "Draws a string in the plane of the reference parallelogram (for use with selected TDPACK routines)."
    },
    "tdprpa": {
        "prefix": "tdprpa",
        "body": "tdprpa(${1:xyipa})",
        "description": "Retrieves the coordinates of a projection in the projection plane, given the parallelogram coordinates of a point (for use with selected TDPACK routines)."
    },
    "tdprpi": {
        "prefix": "tdprpi",
        "body": "tdprpi(${1:xyi2d})",
        "description": "Retrieves the parallelogram coordinates of a point in the reference parallelogram, given a point in the projection plane (for use with selected TDPACK routines.)"
    },
    "tdprpt": {
        "prefix": "tdprpt",
        "body": "tdprpt(${1:uvwi3d})",
        "description": "Retrieves the coordinates of its projection in the projection plane, given the coordinates of a point in 3-space (for use with selected TDPACK routines)."
    },
    "tdsetp": {
        "prefix": "tdsetp",
        "body": "tdsetp(${1:pnam}, ${2:pval})",
        "description": "Sets TDPACK parameter values."
    },
    "tdsort": {
        "prefix": "tdsort",
        "body": "tdsort(${1:rwrk}, ${2:sort_flag})",
        "description": "Sorts an array (for use with selected TDPACK routines)."
    },
    "tdstri": {
        "prefix": "tdstri",
        "body": "tdstri(${1:u}, ${2:v}, ${3:w}, ${4:rtri}, ${5:ntri}, ${6:render_index})",
        "description": "Adds triangles defining a simple surface to a triangle list (for use with selected TDPACK routines)."
    },
    "tdstrs": {
        "prefix": "tdstrs",
        "body": "tdstrs(${1:render_index}, ${2:bot_fill_index1}, ${3:bot_fill_index2}, ${4:top_fill_index1}, ${5:top_fill_index2}, ${6:bot_line_index}, ${7:top_line_index}, ${8:draw_edge}, ${9:udist}, ${10:vdist}, ${11:wdist})",
        "description": "Sets the values defining a selected rendering style (for use with selected TDPACK routines)."
    },
    "tdttri": {
        "prefix": "tdttri",
        "body": "tdttri(${1:u}, ${2:v}, ${3:w}, ${4:marker_type}, ${5:radius}, ${6:gap_size}, ${7:rtri}, ${8:ntri}, ${9:render_index}, ${10:uvwmin}, ${11:uvwmax})",
        "description": "Adds triangles defining a trajectory to a triangle list (for use with selected TDPACK routines)."
    },
    "temp_virtual": {
        "prefix": "temp_virtual",
        "body": "temp_virtual(${1:t}, ${2:w}, ${3:iounit})",
        "description": "Compute atmospheric virtual temperature."
    },
    "thornthwaite": {
        "prefix": "thornthwaite",
        "body": "thornthwaite(${1:t}, ${2:lat}, ${3:opt}, ${4:dim})",
        "description": "Estimate the potential evapotranspiration (PET) via the Thornthwaite method."
    },
    "time_axis_labels": {
        "prefix": "time_axis_labels",
        "body": "time_axis_labels(${1:time}, ${2:resplot}, ${3:restick})",
        "description": "Sets resources necessary to draw nice tickmark labels using a format of date/time on an axis."
    },
    "time_reassign": {
        "prefix": "time_reassign",
        "body": "time_reassign(${1:f}, ${2:timeName})",
        "description": "Reassign (replace) a CF-conforming \"time\" variable by calculating the mid-time values using the \"bounds\" attribute."
    },
    "time_reassign_cv2var": {
        "prefix": "time_reassign_cv2var",
        "body": "time_reassign_cv2var(${1:f}, ${2:timeName}, ${3:varName})",
        "description": "Reassign (replace) a CF-conforming \"time\" coordinate variable associated with a variable  by calculating the mid-time values using the \"bounds\" attribute."
    },
    "time_to_newtime": {
        "prefix": "time_to_newtime",
        "body": "time_to_newtime(${1:time}, ${2:new_time_unit})",
        "description": "Change a \"udunits\" recognized time unit to a new (different) \"udunits\" recognized time unit."
    },
    "time_to_newtime_fix": {
        "prefix": "time_to_newtime_fix",
        "body": "time_to_newtime_fix(${1:time}, ${2:new_time_unit})",
        "description": "Change a \"udunits\" recognized time unit to a new (different) \"udunits\" recognized time unit (temporary function; see the 6.4.0 release notes for details)."
    },
    "tlcl_evp_bolton": {
        "prefix": "tlcl_evp_bolton",
        "body": "tlcl_evp_bolton(${1:t}, ${2:evp}, ${3:iounit})",
        "description": "Compute the lifting condensation level temperature using water vapor pressure."
    },
    "tlcl_mixr_bolton": {
        "prefix": "tlcl_mixr_bolton",
        "body": "tlcl_mixr_bolton(${1:t}, ${2:mixr}, ${3:p}, ${4:iounit})",
        "description": "Compute the lifting condensation level temperature using mixing ratio and pressure."
    },
    "tlcl_rh_bolton": {
        "prefix": "tlcl_rh_bolton",
        "body": "tlcl_rh_bolton(${1:t}, ${2:rh}, ${3:iounit})",
        "description": "Compute the lifting condensation level temperature using relative humidity."
    },
    "tlcl_td_bolton": {
        "prefix": "tlcl_td_bolton",
        "body": "tlcl_td_bolton(${1:t}, ${2:td}, ${3:iounit})",
        "description": "Compute the lifting condensation level temperature using dew point temperature."
    },
    "tobyte": {
        "prefix": "tobyte",
        "body": "tobyte(${1:input_val})",
        "description": "Converts values of any snumeric data type or string to values of type (NCL) byte (unsigned char)."
    },
    "tochar": {
        "prefix": "tochar",
        "body": "tochar(${1:input_val})",
        "description": "Converts values of any snumeric data type or string to values of type char."
    },
    "todouble": {
        "prefix": "todouble",
        "body": "todouble(${1:input_val})",
        "description": "Converts values of any snumeric data type or string to values of type double."
    },
    "tofloat": {
        "prefix": "tofloat",
        "body": "tofloat(${1:input_val})",
        "description": "Converts values of any snumeric data type or string to values of type float."
    },
    "toint": {
        "prefix": "toint",
        "body": "toint(${1:input_val})",
        "description": "Converts values of any snumeric data type or string to values of type integer."
    },
    "toint64": {
        "prefix": "toint64",
        "body": "toint64(${1:input_val})",
        "description": "Converts values of any snumeric data type or string to values of type int64 (64 bit long, or long long)."
    },
    "tointeger": {
        "prefix": "tointeger",
        "body": "tointeger(${1:input_val})",
        "description": "Converts values of any snumeric data type or string to values of type integer."
    },
    "tolong": {
        "prefix": "tolong",
        "body": "tolong(${1:input_val})",
        "description": "Converts values of any snumeric data type or string to values of type long."
    },
    "toshort": {
        "prefix": "toshort",
        "body": "toshort(${1:input_val})",
        "description": "Converts values of any snumeric data type or string to values of type short."
    },
    "tosigned": {
        "prefix": "tosigned",
        "body": "tosigned(${1:input_val})",
        "description": "Converts any kind of 8/16/32/64 integers to its corresponding signed integers."
    },
    "tostring": {
        "prefix": "tostring",
        "body": "tostring(${1:input_val})",
        "description": "Converts values of any snumeric data type to values of type string."
    },
    "tostring_with_format": {
        "prefix": "tostring_with_format",
        "body": "tostring_with_format(${1:input_val}, ${2:format})",
        "description": "Converts values of any snumeric data type to values of type string, with specified format."
    },
    "totype": {
        "prefix": "totype",
        "body": "totype(${1:input_val}, ${2:type_val})",
        "description": "Converts values of any snumeric data type or string to values of the given type."
    },
    "toubyte": {
        "prefix": "toubyte",
        "body": "toubyte(${1:input_val})",
        "description": "Converts values of any snumeric data type or string to values of type unsigned byte."
    },
    "touint": {
        "prefix": "touint",
        "body": "touint(${1:input_val})",
        "description": "Converts values of any snumeric data type or string to values of type unsigned integer."
    },
    "touint64": {
        "prefix": "touint64",
        "body": "touint64(${1:input_val})",
        "description": "Converts values of any snumeric data type or string to values of type uint64 (unsigned 64 bit long, or unsigned long long)."
    },
    "toulong": {
        "prefix": "toulong",
        "body": "toulong(${1:input_val})",
        "description": "Converts values of any snumeric data type or string to values of type unsigned long."
    },
    "tounsigned": {
        "prefix": "tounsigned",
        "body": "tounsigned(${1:input_val})",
        "description": "Converts any kind of 8/16/32/64 integers to its corresponding unsigned integers."
    },
    "toushort": {
        "prefix": "toushort",
        "body": "toushort(${1:input_val})",
        "description": "Converts values of any snumeric data type or string to values of type unsigned short."
    },
    "transpose": {
        "prefix": "transpose",
        "body": "transpose(${1:x})",
        "description": "Transposes a matrix and copies all attributes and coordinate variables."
    },
    "trend_manken": {
        "prefix": "trend_manken",
        "body": "trend_manken(${1:x}, ${2:opt}, ${3:dims})",
        "description": "Calculates Mann-Kendall  non-parametric test for monotonic trend and the Theil-Sen robust estimate of linear trend."
    },
    "tri_trunC": {
        "prefix": "tri_trunC",
        "body": "tri_trunC(${1:ab}, ${2:T})",
        "description": "Performs triangular truncation on spherical harmonic coefficients."
    },
    "tri_trunc": {
        "prefix": "tri_trunc",
        "body": "tri_trunc(${1:a}, ${2:b}, ${3:T})",
        "description": "Performs triangular truncation on spherical harmonic coefficients."
    },
    "triple2grid": {
        "prefix": "triple2grid",
        "body": "triple2grid(${1:x}, ${2:y}, ${3:data}, ${4:xgrid}, ${5:ygrid}, ${6:option})",
        "description": "Places unstructured (randomly-spaced) data onto the nearest locations of a rectilinear grid."
    },
    "triple2grid2d": {
        "prefix": "triple2grid2d",
        "body": "triple2grid2d(${1:x}, ${2:y}, ${3:data}, ${4:xgrid}, ${5:ygrid}, ${6:option})",
        "description": "Places unstructured (randomly-spaced) data onto the nearest locations of a curvilinear grid."
    },
    "triple2grid_Wrap": {
        "prefix": "triple2grid_Wrap",
        "body": "triple2grid_Wrap(${1:x}, ${2:y}, ${3:data}, ${4:xgrid}, ${5:ygrid}, ${6:option})",
        "description": "Places unstructured (randomly-spaced) data onto the nearest locations of a rectilinear grid and retains metadata."
    },
    "trop_wmo": {
        "prefix": "trop_wmo",
        "body": "trop_wmo(${1:p}, ${2:t}, ${3:punit}, ${4:opt})",
        "description": "Determines the level of the thermal tropopause."
    },
    "ttest": {
        "prefix": "ttest",
        "body": "ttest(${1:ave1}, ${2:var1}, ${3:s1}, ${4:ave2}, ${5:var2}, ${6:s2}, ${7:iflag}, ${8:tval_opt})",
        "description": "Returns an estimate of the statistical significance and, optionally, the t-values."
    },
    "typeof": {
        "prefix": "typeof",
        "body": "typeof(${1:val})",
        "description": "Returns the string name of the type of the input variable."
    },
    "u2_fao56": {
        "prefix": "u2_fao56",
        "body": "u2_fao56(${1:uz}, ${2:z}, ${3:wunit})",
        "description": "Compute 2-meter wind speed (m/s) as described in FAO 56."
    },
    "undef": {
        "prefix": "undef",
        "body": "undef(${1:names})",
        "description": "Undefines defined NCL symbols (functions, procedures, variables)."
    },
    "unique_string": {
        "prefix": "unique_string",
        "body": "unique_string(${1:prefix_string})",
        "description": "Returns a unique string given the input string as a prefix."
    },
    "unstructured_to_ESMF": {
        "prefix": "unstructured_to_ESMF",
        "body": "unstructured_to_ESMF(${1:ESMF_filename}, ${2:lat}, ${3:lon}, ${4:opt})",
        "description": "Writes the description of an unstructured grid to an ESMF file."
    },
    "unwrap_phase": {
        "prefix": "unwrap_phase",
        "body": "unwrap_phase(${1:phase})",
        "description": "Unwrap (correct) phase angles to produce smoother phase plots."
    },
    "update": {
        "prefix": "update",
        "body": "update(${1:wks})",
        "description": "Updates the given workstation objects."
    },
    "ushorttoint": {
        "prefix": "ushorttoint",
        "body": "ushorttoint(${1:short_val})",
        "description": "Coerces values of type unsigned short to values of type integer."
    },
    "ut_calendar": {
        "prefix": "ut_calendar",
        "body": "ut_calendar(${1:time}, ${2:option})",
        "description": "Converts a mixed Julian/Gregorian date to a UT-referenced date (deprecated; use cd_calendar)."
    },
    "ut_calendar_fix": {
        "prefix": "ut_calendar_fix",
        "body": "ut_calendar_fix(${1:time}, ${2:option})",
        "description": "Converts a mixed Julian/Gregorian date to a UT-referenced date (temporary function; see the 6.4.0 release notes for details)."
    },
    "ut_convert": {
        "prefix": "ut_convert",
        "body": "ut_convert(${1:dateFrom}, ${2:unitsTo})",
        "description": "Converts a time variable from one set of units to another (deprecated; use cd_convert)."
    },
    "ut_convert_fix": {
        "prefix": "ut_convert_fix",
        "body": "ut_convert_fix(${1:dateFrom}, ${2:unitsTo})",
        "description": "Converts a time variable from one set of units to another (temporary function; see the 6.4.0 release notes for details)."
    },
    "ut_inv_calendar": {
        "prefix": "ut_inv_calendar",
        "body": "ut_inv_calendar(${1:year}, ${2:month}, ${3:day}, ${4:hour}, ${5:minute}, ${6:second}, ${7:units}, ${8:option})",
        "description": "Converts a UT-referenced date to a mixed Julian/Gregorian date (deprecated; use cd_inv_calendar)."
    },
    "ut_inv_calendar_fix": {
        "prefix": "ut_inv_calendar_fix",
        "body": "ut_inv_calendar_fix(${1:year}, ${2:month}, ${3:day}, ${4:hour}, ${5:minute}, ${6:second}, ${7:units}, ${8:option})",
        "description": "Converts a UT-referenced date to a mixed Julian/Gregorian date (temporary function; see the 6.4.0 release notes for details)."
    },
    "ut_string": {
        "prefix": "ut_string",
        "body": "ut_string(${1:time}, ${2:inFormat})",
        "description": "Converts time values into nicely formatted strings (deprecated; use cd_string)"
    },
    "ut_string_fix": {
        "prefix": "ut_string_fix",
        "body": "ut_string_fix(${1:time}, ${2:inFormat})",
        "description": "Converts time values into nicely formatted strings (temporary function; see the 6.4.0 release notes for details)."
    },
    "utm2latlon": {
        "prefix": "utm2latlon",
        "body": "utm2latlon(${1:xy}, ${2:datum})",
        "description": "Converts from UTM to lat/lon using a specified datum."
    },
    "uv2dv_cfd": {
        "prefix": "uv2dv_cfd",
        "body": "uv2dv_cfd(${1:u}, ${2:v}, ${3:lat}, ${4:lon}, ${5:boundOpt})",
        "description": "Computes divergence using centered finite differences."
    },
    "uv2dvf": {
        "prefix": "uv2dvf",
        "body": "uv2dvf(${1:u}, ${2:v}, ${3:dv})",
        "description": "Computes the divergence using spherical harmonics given the u and v wind components on a fixed grid."
    },
    "uv2dvF": {
        "prefix": "uv2dvF",
        "body": "uv2dvF(${1:u}, ${2:v})",
        "description": "Computes the divergence using spherical harmonics given the u and v wind components on a fixed grid."
    },
    "uv2dvF_Wrap": {
        "prefix": "uv2dvF_Wrap",
        "body": "uv2dvF_Wrap(${1:u}, ${2:v})",
        "description": "Computes the divergence using spherical harmonics given the u and v wind components on a fixed grid (retains metadata)."
    },
    "uv2dvg": {
        "prefix": "uv2dvg",
        "body": "uv2dvg(${1:u}, ${2:v}, ${3:dv})",
        "description": "Computes the divergence using spherical harmonics given the u and v wind components on a gaussian grid."
    },
    "uv2dvG": {
        "prefix": "uv2dvG",
        "body": "uv2dvG(${1:u}, ${2:v})",
        "description": "Computes the divergence using spherical harmonics given the u and v wind components on a gaussian grid."
    },
    "uv2dvG_Wrap": {
        "prefix": "uv2dvG_Wrap",
        "body": "uv2dvG_Wrap(${1:u}, ${2:v})",
        "description": "Computes the divergence using spherical harmonics given the u and v wind components on a gaussian grid (retains metadata)."
    },
    "uv2sfvpF": {
        "prefix": "uv2sfvpF",
        "body": "uv2sfvpF(${1:u}, ${2:v})",
        "description": "Computes the stream function and velocity potential via spherical harmonics given u and v on a fixed grid."
    },
    "uv2sfvpf": {
        "prefix": "uv2sfvpf",
        "body": "uv2sfvpf(${1:u}, ${2:v}, ${3:sf}, ${4:vp})",
        "description": "Computes the stream function and velocity potential via spherical harmonics given u and v on a fixed grid."
    },
    "uv2sfvpG": {
        "prefix": "uv2sfvpG",
        "body": "uv2sfvpG(${1:u}, ${2:v})",
        "description": "Computes the stream function and velocity potential via spherical harmonics given u and v on a gaussian grid."
    },
    "uv2sfvpg": {
        "prefix": "uv2sfvpg",
        "body": "uv2sfvpg(${1:u}, ${2:v}, ${3:sf}, ${4:vp})",
        "description": "Computes the stream function and velocity potential via spherical harmonics given u and v on a gaussian grid."
    },
    "uv2vr_cfd": {
        "prefix": "uv2vr_cfd",
        "body": "uv2vr_cfd(${1:u}, ${2:v}, ${3:lat}, ${4:lon}, ${5:boundOpt})",
        "description": "Computes relative vorticity using centered finite differences."
    },
    "uv2vrdvF": {
        "prefix": "uv2vrdvF",
        "body": "uv2vrdvF(${1:u}, ${2:v})",
        "description": "Computes the vorticity and divergence via spherical harmonics, given the u and v wind components on a fixed grid."
    },
    "uv2vrdvf": {
        "prefix": "uv2vrdvf",
        "body": "uv2vrdvf(${1:u}, ${2:v}, ${3:vr}, ${4:dv})",
        "description": "Computes the vorticity and divergence via spherical harmonics, given the u and v wind components on a fixed grid."
    },
    "uv2vrdvG": {
        "prefix": "uv2vrdvG",
        "body": "uv2vrdvG(${1:u}, ${2:v})",
        "description": "Computes the vorticity and divergence via spherical harmonics, given the u and v wind components on a gaussian grid."
    },
    "uv2vrdvg": {
        "prefix": "uv2vrdvg",
        "body": "uv2vrdvg(${1:u}, ${2:v}, ${3:vr}, ${4:dv})",
        "description": "Computes the vorticity and divergence via spherical harmonics, given the u and v wind components on a gaussian grid."
    },
    "uv2vrF": {
        "prefix": "uv2vrF",
        "body": "uv2vrF(${1:u}, ${2:v})",
        "description": "Computes the vorticity via spherical harmonics, given the u and v wind components on a fixed grid."
    },
    "uv2vrf": {
        "prefix": "uv2vrf",
        "body": "uv2vrf(${1:u}, ${2:v}, ${3:vort})",
        "description": "Computes the vorticity via spherical harmonics, given the u and v wind components on a fixed grid."
    },
    "uv2vrF_Wrap": {
        "prefix": "uv2vrF_Wrap",
        "body": "uv2vrF_Wrap(${1:u}, ${2:v})",
        "description": "Computes the vorticity via spherical harmonics, given the u and v wind components on a fixed grid (retains metadata)."
    },
    "uv2vrG": {
        "prefix": "uv2vrG",
        "body": "uv2vrG(${1:u}, ${2:v})",
        "description": "Computes the vorticity via spherical harmonics, given the u and v wind components on a gaussian grid."
    },
    "uv2vrg": {
        "prefix": "uv2vrg",
        "body": "uv2vrg(${1:u}, ${2:v}, ${3:vort})",
        "description": "Computes the vorticity via spherical harmonics, given the u and v wind components on a gaussian grid."
    },
    "uv2vrG_Wrap": {
        "prefix": "uv2vrG_Wrap",
        "body": "uv2vrG_Wrap(${1:u}, ${2:v})",
        "description": "Computes the vorticity via spherical harmonics, given the u and v wind components on a gaussian grid (retains metadata)."
    },
    "v5d_close": {
        "prefix": "v5d_close",
        "body": "v5d_close()",
        "description": "Closes a Vis5D+ format file."
    },
    "v5d_create": {
        "prefix": "v5d_create",
        "body": "v5d_create(${1:fname}, ${2:numtimes}, ${3:numvars}, ${4:nr}, ${5:nc}, ${6:nl}, ${7:varname}, ${8:timestamp}, ${9:datestamp}, ${10:compress}, ${11:projection}, ${12:proj_args}, ${13:vertical}, ${14:vert_args})",
        "description": "Creates a Vis5D+ format file."
    },
    "v5d_setLowLev": {
        "prefix": "v5d_setLowLev",
        "body": "v5d_setLowLev(${1:lowLev})",
        "description": "Sets the lowest vertical offset, in grid level, for each 3-dimensional gridded variable in a Vis5D+ format file."
    },
    "v5d_setUnits": {
        "prefix": "v5d_setUnits",
        "body": "v5d_setUnits(${1:variable}, ${2:units})",
        "description": "Sets a name for physical units for a variable in a Vis5D+ format file."
    },
    "v5d_write": {
        "prefix": "v5d_write",
        "body": "v5d_write(${1:timestep}, ${2:varnum}, ${3:data})",
        "description": "Writes compressed data to a Vis5D+ format file."
    },
    "v5d_write_var": {
        "prefix": "v5d_write_var",
        "body": "v5d_write_var(${1:data})",
        "description": "Writes a single 3-dimensional gridded variable to a Vis5D+ format file."
    },
    "vapor_pres_rh": {
        "prefix": "vapor_pres_rh",
        "body": "vapor_pres_rh(${1:rh}, ${2:esat})",
        "description": "Compute vapor pressure given relative humidity (%) and saturation vapor pressure."
    },
    "variance": {
        "prefix": "variance",
        "body": "variance(${1:value})",
        "description": "Computes an unbiased estimate the variance of all input points."
    },
    "venn2_difference": {
        "prefix": "venn2_difference",
        "body": "venn2_difference(${1:a}, ${2:b})",
        "description": "Returns the unique element symmetric differences between two arrays."
    },
    "venn2_intersection": {
        "prefix": "venn2_intersection",
        "body": "venn2_intersection(${1:a}, ${2:b})",
        "description": "Returns the unique element intersection (ie., common values) between two arrays."
    },
    "venn2_union": {
        "prefix": "venn2_union",
        "body": "venn2_union(${1:a}, ${2:b})",
        "description": "Returns the unique element union of two arrays."
    },
    "vhaeC": {
        "prefix": "vhaeC",
        "body": "vhaeC(${1:u}, ${2:v})",
        "description": "Computes vector spherical harmonic analysis of vector fields on a fixed grid via spherical harmonics."
    },
    "vhaec": {
        "prefix": "vhaec",
        "body": "vhaec(${1:u}, ${2:v}, ${3:br}, ${4:bi}, ${5:cr}, ${6:ci})",
        "description": "Computes vector spherical harmonic analysis of vector fields on a fixed grid via spherical harmonics."
    },
    "vhagC": {
        "prefix": "vhagC",
        "body": "vhagC(${1:u}, ${2:v})",
        "description": "Computes vector spherical harmonic analysis of vector fields on a gaussian grid via spherical harmonics."
    },
    "vhagc": {
        "prefix": "vhagc",
        "body": "vhagc(${1:u}, ${2:v}, ${3:br}, ${4:bi}, ${5:cr}, ${6:ci})",
        "description": "Computes vector spherical harmonic analysis of vector fields on a gaussian grid via spherical harmonics."
    },
    "vhsec": {
        "prefix": "vhsec",
        "body": "vhsec(${1:br}, ${2:bi}, ${3:cr}, ${4:ci}, ${5:u}, ${6:v})",
        "description": "Computes vector spherical harmonic syntheses of vector fields on a fixed grid via spherical harmonics."
    },
    "vhseC": {
        "prefix": "vhseC",
        "body": "vhseC(${1:bc}, ${2:nlon})",
        "description": "Computes vector spherical harmonic syntheses of vector fields on a fixed grid via spherical harmonics."
    },
    "vhsgc": {
        "prefix": "vhsgc",
        "body": "vhsgc(${1:br}, ${2:bi}, ${3:cr}, ${4:ci}, ${5:u}, ${6:v})",
        "description": "Computes vector spherical harmonic syntheses of vector fields on a gaussian grid via spherical harmonics."
    },
    "vhsgC": {
        "prefix": "vhsgC",
        "body": "vhsgC(${1:bc}, ${2:nlon})",
        "description": "Computes vector spherical harmonic syntheses of vector fields on a gaussian grid via spherical harmonics."
    },
    "vibeta": {
        "prefix": "vibeta",
        "body": "vibeta(${1:p}, ${2:x}, ${3:linlog}, ${4:psfc}, ${5:pbot}, ${6:ptop})",
        "description": "Performs vertical integration using beta factors."
    },
    "vinth2p": {
        "prefix": "vinth2p",
        "body": "vinth2p(${1:datai}, ${2:hbcofa}, ${3:hbcofb}, ${4:plevo}, ${5:psfc}, ${6:intyp}, ${7:p0}, ${8:ii}, ${9:kxtrp})",
        "description": "Interpolates CAM (Community Atmosphere Model) hybrid coordinates to pressure coordinates."
    },
    "vinth2p_ecmwf": {
        "prefix": "vinth2p_ecmwf",
        "body": "vinth2p_ecmwf(${1:datai}, ${2:hbcofa}, ${3:hbcofb}, ${4:plevo}, ${5:psfc}, ${6:intyp}, ${7:p0}, ${8:ii}, ${9:kxtrp}, ${10:varflg}, ${11:tbot}, ${12:phis})",
        "description": "Interpolates CESM hybrid coordinates to pressure coordinates but uses  an ECMWF formulation to extrapolate values below ground."
    },
    "vinth2p_ecmwf_nodes": {
        "prefix": "vinth2p_ecmwf_nodes",
        "body": "vinth2p_ecmwf_nodes(${1:datai}, ${2:hbcofa}, ${3:hbcofb}, ${4:plevo}, ${5:psfc}, ${6:intyp}, ${7:p0}, ${8:ii}, ${9:kxtrp}, ${10:varflg}, ${11:tbot}, ${12:phis})",
        "description": "Interpolates CESM hybrid coordinates to pressure coordinates but uses  an ECMWF formulation to extrapolate values below ground."
    },
    "vinth2p_nodes": {
        "prefix": "vinth2p_nodes",
        "body": "vinth2p_nodes(${1:datai}, ${2:hbcofa}, ${3:hbcofb}, ${4:plevo}, ${5:psfc}, ${6:intyp}, ${7:p0}, ${8:ii}, ${9:kxtrp})",
        "description": "Interpolates CESM hybrid coordinates to pressure coordinates on an unstructured grid."
    },
    "vintp2p_ecmwf": {
        "prefix": "vintp2p_ecmwf",
        "body": "vintp2p_ecmwf(${1:datai}, ${2:presi}, ${3:plevo}, ${4:psfc}, ${5:intyp}, ${6:ii}, ${7:kxtrp}, ${8:varflg}, ${9:tbot}, ${10:phis})",
        "description": "Interpolates data at multidimensional pressure levels to  constant pressure coordinates and uses  an ECMWF formulation to extrapolate values below ground."
    },
    "vr2uvF": {
        "prefix": "vr2uvF",
        "body": "vr2uvF(${1:vr})",
        "description": "Computes the rotational wind components via spherical harmonics, given an array containing relative vorticity on a fixed grid."
    },
    "vr2uvf": {
        "prefix": "vr2uvf",
        "body": "vr2uvf(${1:vor}, ${2:ur}, ${3:vr})",
        "description": "Computes the rotational wind components via spherical harmonics, given an array containing relative vorticity on a fixed grid."
    },
    "vr2uvF_Wrap": {
        "prefix": "vr2uvF_Wrap",
        "body": "vr2uvF_Wrap(${1:vr})",
        "description": "Computes the rotational wind components via spherical harmonics, given an array containing relative vorticity on a fixed grid (retains metadata)."
    },
    "vr2uvG": {
        "prefix": "vr2uvG",
        "body": "vr2uvG(${1:vr})",
        "description": "Computes the rotational wind components via spherical harmonics, given an array containing relative vorticity on a gaussian grid."
    },
    "vr2uvg": {
        "prefix": "vr2uvg",
        "body": "vr2uvg(${1:vor}, ${2:ur}, ${3:vr})",
        "description": "Computes the rotational wind components via spherical harmonics, given an array containing relative vorticity on a gaussian grid."
    },
    "vr2uvG_Wrap": {
        "prefix": "vr2uvG_Wrap",
        "body": "vr2uvG_Wrap(${1:vr})",
        "description": "Computes the rotational wind components via spherical harmonics, given an array containing relative vorticity on a gaussian grid (retains metadata)."
    },
    "vrdv2uvf": {
        "prefix": "vrdv2uvf",
        "body": "vrdv2uvf(${1:vr}, ${2:dv}, ${3:ud}, ${4:vd})",
        "description": "Computes the wind components via spherical harmonics, given vorticity and divergence on a fixed grid."
    },
    "vrdv2uvF": {
        "prefix": "vrdv2uvF",
        "body": "vrdv2uvF(${1:vr}, ${2:dv})",
        "description": "Computes the wind components via spherical harmonics, given vorticity and divergence on a fixed grid."
    },
    "vrdv2uvg": {
        "prefix": "vrdv2uvg",
        "body": "vrdv2uvg(${1:vr}, ${2:dv}, ${3:u}, ${4:v})",
        "description": "Computes the wind components via spherical harmonics, given vorticity and divergence on a gaussian grid."
    },
    "vrdv2uvG": {
        "prefix": "vrdv2uvG",
        "body": "vrdv2uvG(${1:vr}, ${2:dv})",
        "description": "Computes the wind components via spherical harmonics, given vorticity and divergence on a gaussian grid."
    },
    "w_to_omega": {
        "prefix": "w_to_omega",
        "body": "w_to_omega(${1:w}, ${2:p}, ${3:t})",
        "description": "Convert vertical velocity with units (m/s) to Pa/s."
    },
    "wallClockElapseTime": {
        "prefix": "wallClockElapseTime",
        "body": "wallClockElapseTime(${1:date}, ${2:title}, ${3:opt})",
        "description": "Calculates and prints elapsed 'wall clock' time."
    },
    "wave_number_spc": {
        "prefix": "wave_number_spc",
        "body": "wave_number_spc(${1:x}, ${2:grid_type})",
        "description": "Computes the total power spectrum as a function of latitudinal wave number."
    },
    "wavelet": {
        "prefix": "wavelet",
        "body": "wavelet(${1:y}, ${2:mother}, ${3:dt}, ${4:param}, ${5:s0}, ${6:dj}, ${7:jtot}, ${8:npad}, ${9:noise}, ${10:isigtest}, ${11:siglvl}, ${12:nadof})",
        "description": "Calculates the wavelet transform of a time series and significance levels."
    },
    "wavelet_default": {
        "prefix": "wavelet_default",
        "body": "wavelet_default(${1:y}, ${2:mother})",
        "description": "Calculates the wavelet transform of a time series and significance levels."
    },
    "weibull": {
        "prefix": "weibull",
        "body": "weibull(${1:x}, ${2:opt}, ${3:dims})",
        "description": "Derives the shape and scale parameters for the Weibull distribution via maximum likelihood estimates."
    },
    "wetbulb": {
        "prefix": "wetbulb",
        "body": "wetbulb(${1:p}, ${2:tc}, ${3:tdc})",
        "description": "Compute wetbulb temperature."
    },
    "wetbulb_stull": {
        "prefix": "wetbulb_stull",
        "body": "wetbulb_stull(${1:t}, ${2:rh}, ${3:iounit}, ${4:opt})",
        "description": "Calculate wet bulb temperature at standard sea level pressure (1013.25 hPa) using the method of R.Stull."
    },
    "wgt_area_smooth": {
        "prefix": "wgt_area_smooth",
        "body": "wgt_area_smooth(${1:field}, ${2:wgt}, ${3:opt})",
        "description": "Smooths an array of data using a 5-point 2D area-weighted smoothing algorithm."
    },
    "wgt_areaave": {
        "prefix": "wgt_areaave",
        "body": "wgt_areaave(${1:q}, ${2:wgty}, ${3:wgtx}, ${4:opt})",
        "description": "Calculates the area average of a quantity using weights."
    },
    "wgt_areaave2": {
        "prefix": "wgt_areaave2",
        "body": "wgt_areaave2(${1:q}, ${2:wgt}, ${3:opt})",
        "description": "Calculates the area average of a quantity using two-dimensional weights."
    },
    "wgt_areaave_Wrap": {
        "prefix": "wgt_areaave_Wrap",
        "body": "wgt_areaave_Wrap(${1:q}, ${2:wgty}, ${3:wgtx}, ${4:opt})",
        "description": "Calculates the area average of a quantity using weights and retains metadata."
    },
    "wgt_arearmse": {
        "prefix": "wgt_arearmse",
        "body": "wgt_arearmse(${1:q}, ${2:r}, ${3:wgty}, ${4:wgtx}, ${5:opt})",
        "description": "Calculates a weighted area root-mean-square-difference between two variables."
    },
    "wgt_arearmse2": {
        "prefix": "wgt_arearmse2",
        "body": "wgt_arearmse2(${1:q}, ${2:r}, ${3:wgt}, ${4:opt})",
        "description": "Calculates a weighted area root-mean-square-difference (rmse) between two variables using two-dimensional weights."
    },
    "wgt_areasum2": {
        "prefix": "wgt_areasum2",
        "body": "wgt_areasum2(${1:q}, ${2:wgt}, ${3:opt})",
        "description": "Calculates the area sum (total) of a quantity using two-dimensional weights."
    },
    "wgt_runave": {
        "prefix": "wgt_runave",
        "body": "wgt_runave(${1:x}, ${2:wgt}, ${3:opt})",
        "description": "Calculates a weighted running average across the rightmost dimension."
    },
    "wgt_runave_leftdim": {
        "prefix": "wgt_runave_leftdim",
        "body": "wgt_runave_leftdim(${1:x}, ${2:wgt}, ${3:opt})",
        "description": "Calculate a weighted running average over the leftmost dimension (usually, \"time\")  and return in the original order with metadata."
    },
    "wgt_runave_n": {
        "prefix": "wgt_runave_n",
        "body": "wgt_runave_n(${1:x}, ${2:wgt}, ${3:opt}, ${4:dim})",
        "description": "Calculates a weighted running average across the given dimension."
    },
    "wgt_runave_n_Wrap": {
        "prefix": "wgt_runave_n_Wrap",
        "body": "wgt_runave_n_Wrap(${1:x}, ${2:wgt}, ${3:opt}, ${4:dim})",
        "description": "Calculates a weighted running average on the given dimension and retains metadata."
    },
    "wgt_runave_Wrap": {
        "prefix": "wgt_runave_Wrap",
        "body": "wgt_runave_Wrap(${1:x}, ${2:wgt}, ${3:opt})",
        "description": "Calculates a weighted running average on the rightmost dimension and retains metadata."
    },
    "wgt_vert_avg_beta": {
        "prefix": "wgt_vert_avg_beta",
        "body": "wgt_vert_avg_beta(${1:p}, ${2:datai}, ${3:psfc}, ${4:punits}, ${5:opt})",
        "description": "Computes weighted vertical average or sum using pressure thickness and beta factors."
    },
    "wgt_vertical_n": {
        "prefix": "wgt_vertical_n",
        "body": "wgt_vertical_n(${1:x}, ${2:dp}, ${3:iopt}, ${4:dim})",
        "description": "Calculates a weighted vertical average and/or sum (integral)."
    },
    "wgt_volave": {
        "prefix": "wgt_volave",
        "body": "wgt_volave(${1:q}, ${2:wgtz}, ${3:wgty}, ${4:wgtx}, ${5:opt})",
        "description": "Calculates the volume average of a quantity using weights."
    },
    "wgt_volave_ccm": {
        "prefix": "wgt_volave_ccm",
        "body": "wgt_volave_ccm(${1:q}, ${2:wgtz}, ${3:wgty}, ${4:wgtx}, ${5:opt})",
        "description": "Calculates the volume average of a quantity from the CCM using weights."
    },
    "wgt_volrmse": {
        "prefix": "wgt_volrmse",
        "body": "wgt_volrmse(${1:q}, ${2:r}, ${3:wgtz}, ${4:wgty}, ${5:wgtx}, ${6:opt})",
        "description": "Calculates a weighted volume root-mean-square-difference between two variables."
    },
    "wgt_volrmse_ccm": {
        "prefix": "wgt_volrmse_ccm",
        "body": "wgt_volrmse_ccm(${1:q}, ${2:r}, ${3:wgtq}, ${4:wgtr}, ${5:wgty}, ${6:wgtx}, ${7:opt})",
        "description": "Calculates a weighted volume root-mean-square-difference between two variables from the CCM."
    },
    "where": {
        "prefix": "where",
        "body": "where(${1:condtnl_expr}, ${2:true_value}, ${3:false_value})",
        "description": "Performs array assignments based on a conditional array."
    },
    "wind_component": {
        "prefix": "wind_component",
        "body": "wind_component(${1:wspd}, ${2:wdir}, ${3:opt})",
        "description": "Calculate zonal and meridional wind components from wind speed and wind direction."
    },
    "wind_direction": {
        "prefix": "wind_direction",
        "body": "wind_direction(${1:u}, ${2:v}, ${3:opt})",
        "description": "Calculate meteorological wind direction from zonal and meridional wind components."
    },
    "wind_speed": {
        "prefix": "wind_speed",
        "body": "wind_speed(${1:u}, ${2:v})",
        "description": "Calculate wind speed from zonal and meridional wind components."
    },
    "wind_stats": {
        "prefix": "wind_stats",
        "body": "wind_stats(${1:wspd}, ${2:wdir}, ${3:nDim}, ${4:opt})",
        "description": "Given a sequence of wind speeds and directions, compute assorted wind-related statistics including the standard deviation of the wind direction."
    },
    "WindRoseBasic": {
        "prefix": "WindRoseBasic",
        "body": "WindRoseBasic(${1:wks}, ${2:wspd}, ${3:wdir}, ${4:numPetals}, ${5:circFr}, ${6:res})",
        "description": "Plots a basic wind rose."
    },
    "WindRoseColor": {
        "prefix": "WindRoseColor",
        "body": "WindRoseColor(${1:wks}, ${2:wspd}, ${3:wdir}, ${4:numPetals}, ${5:circFr}, ${6:spdBounds}, ${7:colorBounds}, ${8:res})",
        "description": "Plot a wind rose diagram where different colors are used to differentiate speed ranges."
    },
    "WindRoseThickLine": {
        "prefix": "WindRoseThickLine",
        "body": "WindRoseThickLine(${1:wks}, ${2:wspd}, ${3:wdir}, ${4:numPetals}, ${5:circFr}, ${6:spdBounds}, ${7:res})",
        "description": "Plot a black and white wind rose diagram where different line thicknesses are used to differentiate speed ranges."
    },
    "wk_smooth121": {
        "prefix": "wk_smooth121",
        "body": "wk_smooth121(${1:x})",
        "description": "Performs a specialized 1-2-1 filter for Wheeler-Kiladis plots."
    },
    "wkSpaceTime": {
        "prefix": "wkSpaceTime",
        "body": "wkSpaceTime(${1:x}, ${2:diro}, ${3:caseName}, ${4:varName}, ${5:latBound}, ${6:spd}, ${7:nDayWin}, ${8:nDaySkip}, ${9:opt})",
        "description": "Calculates Wheeler-Kiladis space-time spectra."
    },
    "wkSpaceTime_cam": {
        "prefix": "wkSpaceTime_cam",
        "body": "wkSpaceTime_cam(${1:diri}, ${2:fili}, ${3:diro}, ${4:caseName}, ${5:varName}, ${6:latBound}, ${7:spd}, ${8:level}, ${9:nDayWin}, ${10:nDaySkip}, ${11:opt})",
        "description": "Calculates Wheeler-Kiladis space-time spectra using a generic CAM interface."
    },
    "wmbarb": {
        "prefix": "wmbarb",
        "body": "wmbarb(${1:wks}, ${2:x}, ${3:y}, ${4:dx}, ${5:dy})",
        "description": "Draws wind barbs on the given workstation."
    },
    "wmbarbmap": {
        "prefix": "wmbarbmap",
        "body": "wmbarbmap(${1:wks}, ${2:lat}, ${3:lon}, ${4:u}, ${5:v})",
        "description": "Draws wind barbs over maps."
    },
    "wmdrft": {
        "prefix": "wmdrft",
        "body": "wmdrft(${1:wks}, ${2:y}, ${3:x})",
        "description": "Draws weather front lines on the given workstation."
    },
    "wmgetp": {
        "prefix": "wmgetp",
        "body": "wmgetp(${1:pnam})",
        "description": "Retrieves parameter values for selected Wmap routines."
    },
    "wmlabs": {
        "prefix": "wmlabs",
        "body": "wmlabs(${1:wks}, ${2:x}, ${3:y}, ${4:sym})",
        "description": "Plots special symbols and icons for daily weather."
    },
    "wmsetp": {
        "prefix": "wmsetp",
        "body": "wmsetp(${1:pnam}, ${2:pval})",
        "description": "Sets parameter values for selected Wmap routines."
    },
    "wmstnm": {
        "prefix": "wmstnm",
        "body": "wmstnm(${1:wks}, ${2:x}, ${3:y}, ${4:imdat})",
        "description": "Plots station model data on the given workstation."
    },
    "wmvect": {
        "prefix": "wmvect",
        "body": "wmvect(${1:wks}, ${2:x}, ${3:y}, ${4:dx}, ${5:dy})",
        "description": "Draws vectors on the given workstation."
    },
    "wmvectmap": {
        "prefix": "wmvectmap",
        "body": "wmvectmap(${1:wks}, ${2:lat}, ${3:lon}, ${4:u}, ${5:v})",
        "description": "Draws vectors over maps."
    },
    "wmvlbl": {
        "prefix": "wmvlbl",
        "body": "wmvlbl(${1:wks}, ${2:x}, ${3:y})",
        "description": "Draws an informational label box for plots produced by wmvect or wmvectmap."
    },
    "wrf_avo": {
        "prefix": "wrf_avo",
        "body": "wrf_avo(${1:u}, ${2:v}, ${3:msfu}, ${4:msfv}, ${5:msfm}, ${6:cor}, ${7:dx}, ${8:dy}, ${9:opt})",
        "description": "Calculates absolute vorticity from WRF model output."
    },
    "wrf_cape_2d": {
        "prefix": "wrf_cape_2d",
        "body": "wrf_cape_2d(${1:p}, ${2:t}, ${3:q}, ${4:z}, ${5:zsfc}, ${6:psfc}, ${7:opt})",
        "description": "Computes maximum convective available potential energy (CAPE), maximum convective inhibition (CIN), lifted condensation level (LCL), and level of free convection (LFC)."
    },
    "wrf_cape_3d": {
        "prefix": "wrf_cape_3d",
        "body": "wrf_cape_3d(${1:p}, ${2:t}, ${3:q}, ${4:z}, ${5:zsfc}, ${6:psfc}, ${7:opt})",
        "description": "Computes convective available potential energy (CAPE) and convective inhibition (CIN)."
    },
    "wrf_contour": {
        "prefix": "wrf_contour",
        "body": "wrf_contour(${1:nc_file}, ${2:wks}, ${3:data}, ${4:res})",
        "description": "Creates a contour plot from ARW WRF model output."
    },
    "wrf_dbz": {
        "prefix": "wrf_dbz",
        "body": "wrf_dbz(${1:P}, ${2:T}, ${3:qv}, ${4:qr}, ${5:qs}, ${6:qg}, ${7:ivarint}, ${8:iliqskin})",
        "description": "Calculates simulated equivalent radar reflectivity factor [dBZ] from WRF model output."
    },
    "wrf_eth": {
        "prefix": "wrf_eth",
        "body": "wrf_eth(${1:qv}, ${2:T}, ${3:P})",
        "description": "Calculates equivalent potential temperature from WRF model output."
    },
    "wrf_helicity": {
        "prefix": "wrf_helicity",
        "body": "wrf_helicity(${1:UA}, ${2:VA}, ${3:Z}, ${4:TER}, ${5:top})",
        "description": "Calculates storm relative helicity from WRF model output."
    },
    "wrf_ij_to_ll": {
        "prefix": "wrf_ij_to_ll",
        "body": "wrf_ij_to_ll(${1:iloc}, ${2:jloc}, ${3:opt})",
        "description": "Finds the nearest longitude, latitude locations to the specified model grid indices (i,j) (deprecated)."
    },
    "wrf_interp_1d": {
        "prefix": "wrf_interp_1d",
        "body": "wrf_interp_1d(${1:v_in}, ${2:z_in}, ${3:z_out})",
        "description": "Linearly interpolates a one-dimensional variable in the vertical."
    },
    "wrf_interp_2d_xy": {
        "prefix": "wrf_interp_2d_xy",
        "body": "wrf_interp_2d_xy(${1:v3d}, ${2:xy})",
        "description": "Extracts a cross section from a given input field."
    },
    "wrf_interp_3d_z": {
        "prefix": "wrf_interp_3d_z",
        "body": "wrf_interp_3d_z(${1:v3d}, ${2:vert}, ${3:loc})",
        "description": "Interpolates to a specified pressure/height level."
    },
    "wrf_latlon_to_ij": {
        "prefix": "wrf_latlon_to_ij",
        "body": "wrf_latlon_to_ij(${1:lat_wrf}, ${2:lon_wrf}, ${3:lat_pts}, ${4:lon_pts})",
        "description": "Finds the nearest model grid indices (i,j) to the specific location(s) in latitude and longitude (deprecated)."
    },
    "wrf_ll_to_ij": {
        "prefix": "wrf_ll_to_ij",
        "body": "wrf_ll_to_ij(${1:lon}, ${2:lat}, ${3:opt})",
        "description": "Finds the nearest model grid indices (i,j) to the specified location(s) in longitude and latitude (deprecated)."
    },
    "wrf_map": {
        "prefix": "wrf_map",
        "body": "wrf_map(${1:wks}, ${2:nc_file}, ${3:res})",
        "description": "Creates a map background for ARW WRF model data."
    },
    "wrf_map_overlay": {
        "prefix": "wrf_map_overlay",
        "body": "wrf_map_overlay(${1:wks}, ${2:map}, ${3:plots}, ${4:res})",
        "description": "Overlays WRF plot(s) on a WRF-ARW map background (deprecated)."
    },
    "wrf_map_overlays": {
        "prefix": "wrf_map_overlays",
        "body": "wrf_map_overlays(${1:nc_file}, ${2:wks}, ${3:plots}, ${4:plt_res}, ${5:map_res})",
        "description": "Overlays contour and vector plots on a WRF-ARW map background."
    },
    "wrf_map_resources": {
        "prefix": "wrf_map_resources",
        "body": "wrf_map_resources(${1:nc_file}, ${2:res})",
        "description": "Sets map plotting resources based on an input WRF-ARW file."
    },
    "wrf_map_zoom": {
        "prefix": "wrf_map_zoom",
        "body": "wrf_map_zoom(${1:wks}, ${2:nc_file}, ${3:res}, ${4:y_start}, ${5:y_end}, ${6:x_start}, ${7:x_end})",
        "description": "Zooms into a portion of the ARW WRF model domain, and creates a map background (deprecated)."
    },
    "wrf_mapres_c": {
        "prefix": "wrf_mapres_c",
        "body": "wrf_mapres_c(${1:f}, ${2:res}, ${3:opt})",
        "description": "Sets the appropriate geographical mapping resources based upon WRF file contents. (deprecated)"
    },
    "wrf_omega": {
        "prefix": "wrf_omega",
        "body": "wrf_omega(${1:qv}, ${2:t}, ${3:v}, ${4:p})",
        "description": "Calculates approximate omega in C, given vertical velocity, water vapor mixing ratio, temperature, and pressure from WRF model output."
    },
    "wrf_overlay": {
        "prefix": "wrf_overlay",
        "body": "wrf_overlay(${1:wks}, ${2:plots}, ${3:res})",
        "description": "Overlays multiple plots created from other WRF-ARW plot functions (deprecated)."
    },
    "wrf_overlays": {
        "prefix": "wrf_overlays",
        "body": "wrf_overlays(${1:nc_file}, ${2:wks}, ${3:plots}, ${4:res})",
        "description": "Overlays multiple plots, created from other ARW WRF plot functions."
    },
    "wrf_pvo": {
        "prefix": "wrf_pvo",
        "body": "wrf_pvo(${1:u}, ${2:v}, ${3:THETA}, ${4:P}, ${5:msfu}, ${6:msfv}, ${7:msfm}, ${8:cor}, ${9:dx}, ${10:dy}, ${11:opt})",
        "description": "Calculates potential vorticity from WRF model output."
    },
    "wrf_rh": {
        "prefix": "wrf_rh",
        "body": "wrf_rh(${1:qv}, ${2:P}, ${3:T})",
        "description": "Calculates relative humidity from ARW WRF model output."
    },
    "wrf_slp": {
        "prefix": "wrf_slp",
        "body": "wrf_slp(${1:Z}, ${2:T}, ${3:P}, ${4:Q})",
        "description": "Calculates sea level pressure from ARW WRF model output."
    },
    "wrf_smooth_2d": {
        "prefix": "wrf_smooth_2d",
        "body": "wrf_smooth_2d(${1:fld}, ${2:iter})",
        "description": "Smooths a given field."
    },
    "wrf_td": {
        "prefix": "wrf_td",
        "body": "wrf_td(${1:P}, ${2:qv})",
        "description": "Calculates dewpoint temperature in [C] from ARW WRF model output."
    },
    "wrf_times_c": {
        "prefix": "wrf_times_c",
        "body": "wrf_times_c(${1:Times}, ${2:opt})",
        "description": "Converts WRF variable \"Times\" which is of type character to user specified numeric units."
    },
    "wrf_tk": {
        "prefix": "wrf_tk",
        "body": "wrf_tk(${1:P}, ${2:THETA})",
        "description": "Calculates temperature in [K] from ARW WRF model output."
    },
    "wrf_updraft_helicity": {
        "prefix": "wrf_updraft_helicity",
        "body": "wrf_updraft_helicity(${1:ZP}, ${2:MAPFCT}, ${3:US}, ${4:VS}, ${5:W}, ${6:dx}, ${7:dy}, ${8:opt})",
        "description": "Calculates updraft helicity from WRF model output."
    },
    "wrf_user_getvar": {
        "prefix": "wrf_user_getvar",
        "body": "wrf_user_getvar(${1:file_handle}, ${2:variable}, ${3:time})",
        "description": "Extracts data from ARW WRF model output, and does basic diagnostics calculations."
    },
    "wrf_user_ij_to_ll": {
        "prefix": "wrf_user_ij_to_ll",
        "body": "wrf_user_ij_to_ll(${1:file_handle}, ${2:i}, ${3:j}, ${4:opt})",
        "description": "Finds the nearest longitude, latitude locations to the specified WRF-ARW model grid indexes (deprecated)."
    },
    "wrf_user_interp_level": {
        "prefix": "wrf_user_interp_level",
        "body": "wrf_user_interp_level(${1:var3d}, ${2:vert}, ${3:desired_levels}, ${4:opt})",
        "description": "Interpolates a horizontal slice from a three-dimensional WRF-ARW field at the given vertical level(s)."
    },
    "wrf_user_interp_line": {
        "prefix": "wrf_user_interp_line",
        "body": "wrf_user_interp_line(${1:var2d}, ${2:loc_param}, ${3:opt})",
        "description": "Interpolates a two-dimensional WRF-ARW field along a line."
    },
    "wrf_user_intrp2d": {
        "prefix": "wrf_user_intrp2d",
        "body": "wrf_user_intrp2d(${1:var2d}, ${2:loc}, ${3:angle}, ${4:res})",
        "description": "Interpolates ARW WRF 2D model data along a given line (deprecated)."
    },
    "wrf_user_intrp3d": {
        "prefix": "wrf_user_intrp3d",
        "body": "wrf_user_intrp3d(${1:var3d}, ${2:vert}, ${3:plot_type}, ${4:loc}, ${5:angle}, ${6:res})",
        "description": "Interpolates ARW WRF model data vertically or horizontally (deprecated)."
    },
    "wrf_user_latlon_to_ij": {
        "prefix": "wrf_user_latlon_to_ij",
        "body": "wrf_user_latlon_to_ij(${1:nc_file}, ${2:latitude}, ${3:longitude})",
        "description": "Finds the nearest WRF-ARW model grid indexes (i,j) to the specific location (deprecated)."
    },
    "wrf_user_list_times": {
        "prefix": "wrf_user_list_times",
        "body": "wrf_user_list_times(${1:file_handle})",
        "description": "Extracts the list of available times in the ARW WRF model output."
    },
    "wrf_user_ll_to_ij": {
        "prefix": "wrf_user_ll_to_ij",
        "body": "wrf_user_ll_to_ij(${1:file_handle}, ${2:lon}, ${3:lat}, ${4:opt})",
        "description": "Finds the nearest WRF-ARW model grid indexes (i,j) to the requested longitude and latitude locations (deprecated)."
    },
    "wrf_user_ll_to_xy": {
        "prefix": "wrf_user_ll_to_xy",
        "body": "wrf_user_ll_to_xy(${1:file_handle}, ${2:lon}, ${3:lat}, ${4:opt})",
        "description": "Finds the nearest WRF-ARW model grid indexes (0-based) that are the closest to the requested longitude and latitude locations."
    },
    "wrf_user_unstagger": {
        "prefix": "wrf_user_unstagger",
        "body": "wrf_user_unstagger(${1:varin}, ${2:unstagDim})",
        "description": "Unstaggers an input variable along a specified dimension."
    },
    "wrf_user_vert_cross": {
        "prefix": "wrf_user_vert_cross",
        "body": "wrf_user_vert_cross(${1:var3d}, ${2:vert}, ${3:loc_param}, ${4:opt})",
        "description": "Interpolates a vertical cross-section from a three-dimensional WRF-ARW field at the given vertical level(s)."
    },
    "wrf_user_vert_interp": {
        "prefix": "wrf_user_vert_interp",
        "body": "wrf_user_vert_interp(${1:file_handle}, ${2:field}, ${3:vert_coordinate}, ${4:interp_levels}, ${5:opts})",
        "description": "Vertically interpolates ARW WRF variables given the type of surface and a set of new levels."
    },
    "wrf_user_xy_to_ll": {
        "prefix": "wrf_user_xy_to_ll",
        "body": "wrf_user_xy_to_ll(${1:file_handle}, ${2:x}, ${3:y}, ${4:opt})",
        "description": "Finds the nearest longitude, latitude locations to the specified WRF-ARW model grid indexes."
    },
    "wrf_uvmet": {
        "prefix": "wrf_uvmet",
        "body": "wrf_uvmet(${1:u}, ${2:v}, ${3:lat}, ${4:lon}, ${5:cen_lon}, ${6:cone})",
        "description": "Rotates u,v components of the wind to earth coordinates."
    },
    "wrf_vector": {
        "prefix": "wrf_vector",
        "body": "wrf_vector(${1:nc_file}, ${2:wks}, ${3:data_u}, ${4:data_v}, ${5:res})",
        "description": "Creates a vector plot from ARW WRF model output."
    },
    "wrf_virtual_temp": {
        "prefix": "wrf_virtual_temp",
        "body": "wrf_virtual_temp(${1:t}, ${2:qv})",
        "description": "Calculates virtual temperature, given temperature and mixing ratio from WRF model output."
    },
    "wrf_wetbulb": {
        "prefix": "wrf_wetbulb",
        "body": "wrf_wetbulb(${1:p}, ${2:t}, ${3:qv})",
        "description": "Calculates wet bulb temperature in K, given pressure in temperature in K and mixing ratio in kg/kg from WRF model output."
    },
    "wrf_wps_close_int": {
        "prefix": "wrf_wps_close_int",
        "body": "wrf_wps_close_int(${1:istatus})",
        "description": "Closes a currently open WPS intermediate file."
    },
    "wrf_wps_open_int": {
        "prefix": "wrf_wps_open_int",
        "body": "wrf_wps_open_int(${1:filename})",
        "description": "Opens a WPS intermediate file and returns a status."
    },
    "wrf_wps_rddata_int": {
        "prefix": "wrf_wps_rddata_int",
        "body": "wrf_wps_rddata_int(${1:istatus}, ${2:nx}, ${3:ny})",
        "description": "Reads a 2D field from an open WPS intermediate file."
    },
    "wrf_wps_rdhead_int": {
        "prefix": "wrf_wps_rdhead_int",
        "body": "wrf_wps_rdhead_int(${1:istatus}, ${2:rhead}, ${3:field}, ${4:date}, ${5:units}, ${6:map_source}, ${7:description})",
        "description": "Reads header information for the current field of an open WPS intermediate file."
    },
    "wrf_wps_read_int": {
        "prefix": "wrf_wps_read_int",
        "body": "wrf_wps_read_int(${1:filename})",
        "description": "Reads data from a WPS intermediate file."
    },
    "wrf_wps_write_int": {
        "prefix": "wrf_wps_write_int",
        "body": "wrf_wps_write_int(${1:filename}, ${2:field}, ${3:units}, ${4:description}, ${5:data}, ${6:opt})",
        "description": "Writes data to a WPS intermediate file."
    },
    "write_matrix": {
        "prefix": "write_matrix",
        "body": "write_matrix(${1:data}, ${2:fmtf}, ${3:option})",
        "description": "Writes nicely-formatted integer, float, or double precision two-dimensional (2D) arrays to standard out or to a file."
    },
    "write_table": {
        "prefix": "write_table",
        "body": "write_table(${1:filename}, ${2:option}, ${3:alist}, ${4:format})",
        "description": "Writes formatted elements from a list to an ASCII file."
    },
    "yiqrgb": {
        "prefix": "yiqrgb",
        "body": "yiqrgb(${1:yiq})",
        "description": "Converts YIQ color values to RGB."
    },
    "yyyyddd_to_yyyymmdd": {
        "prefix": "yyyyddd_to_yyyymmdd",
        "body": "yyyyddd_to_yyyymmdd(${1:yyyyddd})",
        "description": "Given concatenated year and day-of-year (yyyyddd) create a one-dimensional array containing concatenated year, month and day-of-month (yyyymmdd) values."
    },
    "yyyymm_time": {
        "prefix": "yyyymm_time",
        "body": "yyyymm_time(${1:yrStrt}, ${2:yrLast}, ${3:TYPE})",
        "description": "Creates a one-dimensional array containing year-month (yyyymm) values."
    },
    "yyyymm_to_yyyyfrac": {
        "prefix": "yyyymm_to_yyyyfrac",
        "body": "yyyymm_to_yyyyfrac(${1:yyyymm}, ${2:mm_offset})",
        "description": "Converts a one dimensional array containing yyyymm values to yyyy and fractional year."
    },
    "yyyymmdd_time": {
        "prefix": "yyyymmdd_time",
        "body": "yyyymmdd_time(${1:yrStrt}, ${2:yrLast}, ${3:TYPE})",
        "description": "Creates a one-dimensional array containing year-month-day (yyyymmdd) values."
    },
    "yyyymmdd_to_yyyyddd": {
        "prefix": "yyyymmdd_to_yyyyddd",
        "body": "yyyymmdd_to_yyyyddd(${1:yyyymmdd})",
        "description": "Given concatenated year-month-day_of_month (yyyymmdd) create a one-dimensional array containing concatenated year and day_of_year (yyyyddd) values."
    },
    "yyyymmdd_to_yyyyfrac": {
        "prefix": "yyyymmdd_to_yyyyfrac",
        "body": "yyyymmdd_to_yyyyfrac(${1:yyyymmdd}, ${2:dd_offset})",
        "description": "Converts a one-dimensional array containing yyyymmdd values to yyyy and fractional year."
    },
    "yyyymmddhh_time": {
        "prefix": "yyyymmddhh_time",
        "body": "yyyymmddhh_time(${1:yrStrt}, ${2:yrLast}, ${3:hrStep}, ${4:TYPE})",
        "description": "Creates a one-dimensional array containing year-month-day-hour (yyyymmddhh) values."
    },
    "yyyymmddhh_to_yyyyfrac": {
        "prefix": "yyyymmddhh_to_yyyyfrac",
        "body": "yyyymmddhh_to_yyyyfrac(${1:yyyymmddhh}, ${2:hh_offset})",
        "description": "Converts a one-dimensional array containing yyyymmddhh values to yyyy and fractional year."
    },
    "z2geouv": {
        "prefix": "z2geouv",
        "body": "z2geouv(${1:z}, ${2:lat}, ${3:lon}, ${4:iopt})",
        "description": "Computes the geostrophic zonal and meridional wind components  using geopotential height on isobaric levels (rectilinear grid only)."
    },
    "zonal_mpsi": {
        "prefix": "zonal_mpsi",
        "body": "zonal_mpsi(${1:v}, ${2:lat}, ${3:p}, ${4:ps})",
        "description": "Computes a zonal mean meridional stream function."
    },
    "zonal_mpsi_Wrap": {
        "prefix": "zonal_mpsi_Wrap",
        "body": "zonal_mpsi_Wrap(${1:v}, ${2:lat}, ${3:p}, ${4:ps})",
        "description": "Computes a zonal mean meridional stream function and retains metadata."
    },
    "zonalAve": {
        "prefix": "zonalAve",
        "body": "zonalAve(${1:x})",
        "description": "Computes a zonal average of the input array."
    },
    "zscore": {
        "prefix": "zscore",
        "body": "zscore(${1:x}, ${2:flag}, ${3:dims})",
        "description": "Computes the zscore of a variable's given dimensions at all other dimensions and retains metadata."
    },
    "amDataXF": {
        "prefix": "amDataXF",
        "body": "amDataXF"
    },
    "amDataYF": {
        "prefix": "amDataYF",
        "body": "amDataYF"
    },
    "amJust": {
        "prefix": "amJust",
        "body": "amJust"
    },
    "amOn": {
        "prefix": "amOn",
        "body": "amOn"
    },
    "amOrthogonalPosF": {
        "prefix": "amOrthogonalPosF",
        "body": "amOrthogonalPosF"
    },
    "amParallelPosF": {
        "prefix": "amParallelPosF",
        "body": "amParallelPosF"
    },
    "amResizeNotify": {
        "prefix": "amResizeNotify",
        "body": "amResizeNotify"
    },
    "amSide": {
        "prefix": "amSide",
        "body": "amSide"
    },
    "NhlTOP": {
        "prefix": "NhlTOP",
        "body": "NhlTOP"
    },
    "NhlBOTTOM": {
        "prefix": "NhlBOTTOM",
        "body": "NhlBOTTOM"
    },
    "NhlRIGHT": {
        "prefix": "NhlRIGHT",
        "body": "NhlRIGHT"
    },
    "NhlLEFT": {
        "prefix": "NhlLEFT",
        "body": "NhlLEFT"
    },
    "amTrackData": {
        "prefix": "amTrackData",
        "body": "amTrackData"
    },
    "amViewId": {
        "prefix": "amViewId",
        "body": "amViewId"
    },
    "amZone": {
        "prefix": "amZone",
        "body": "amZone"
    },
    "appDefaultParent": {
        "prefix": "appDefaultParent",
        "body": "appDefaultParent"
    },
    "appFileSuffix": {
        "prefix": "appFileSuffix",
        "body": "appFileSuffix"
    },
    "appResources": {
        "prefix": "appResources",
        "body": "appResources"
    },
    "appSysDir": {
        "prefix": "appSysDir",
        "body": "appSysDir"
    },
    "appUsrDir": {
        "prefix": "appUsrDir",
        "body": "appUsrDir"
    },
    "caCopyArrays": {
        "prefix": "caCopyArrays",
        "body": "caCopyArrays"
    },
    "caXArray": {
        "prefix": "caXArray",
        "body": "caXArray"
    },
    "caXCast": {
        "prefix": "caXCast",
        "body": "caXCast"
    },
    "SingleVector": {
        "prefix": "SingleVector",
        "body": "SingleVector"
    },
    "MultipleVectors": {
        "prefix": "MultipleVectors",
        "body": "MultipleVectors"
    },
    "SplitVectors": {
        "prefix": "SplitVectors",
        "body": "SplitVectors"
    },
    "caXMaxV": {
        "prefix": "caXMaxV",
        "body": "caXMaxV"
    },
    "caXMinV": {
        "prefix": "caXMinV",
        "body": "caXMinV"
    },
    "caXMissingV": {
        "prefix": "caXMissingV",
        "body": "caXMissingV"
    },
    "caYArray": {
        "prefix": "caYArray",
        "body": "caYArray"
    },
    "caYCast": {
        "prefix": "caYCast",
        "body": "caYCast"
    },
    "caYMaxV": {
        "prefix": "caYMaxV",
        "body": "caYMaxV"
    },
    "caYMinV": {
        "prefix": "caYMinV",
        "body": "caYMinV"
    },
    "caYMissingV": {
        "prefix": "caYMissingV",
        "body": "caYMissingV"
    },
    "cnCellFillEdgeColor": {
        "prefix": "cnCellFillEdgeColor",
        "body": "cnCellFillEdgeColor"
    },
    "cnCellFillMissingValEdgeColor": {
        "prefix": "cnCellFillMissingValEdgeColor",
        "body": "cnCellFillMissingValEdgeColor"
    },
    "cnConpackParams": {
        "prefix": "cnConpackParams",
        "body": "cnConpackParams"
    },
    "cnConstFEnableFill": {
        "prefix": "cnConstFEnableFill",
        "body": "cnConstFEnableFill"
    },
    "cnConstFLabelAngleF": {
        "prefix": "cnConstFLabelAngleF",
        "body": "cnConstFLabelAngleF"
    },
    "cnConstFLabelBackgroundColor": {
        "prefix": "cnConstFLabelBackgroundColor",
        "body": "cnConstFLabelBackgroundColor"
    },
    "cnConstFLabelConstantSpacingF": {
        "prefix": "cnConstFLabelConstantSpacingF",
        "body": "cnConstFLabelConstantSpacingF"
    },
    "cnConstFLabelFont": {
        "prefix": "cnConstFLabelFont",
        "body": "cnConstFLabelFont"
    },
    "cnConstFLabelFontAspectF": {
        "prefix": "cnConstFLabelFontAspectF",
        "body": "cnConstFLabelFontAspectF"
    },
    "cnConstFLabelFontColor": {
        "prefix": "cnConstFLabelFontColor",
        "body": "cnConstFLabelFontColor"
    },
    "cnConstFLabelFontHeightF": {
        "prefix": "cnConstFLabelFontHeightF",
        "body": "cnConstFLabelFontHeightF"
    },
    "cnConstFLabelFontQuality": {
        "prefix": "cnConstFLabelFontQuality",
        "body": "cnConstFLabelFontQuality"
    },
    "cnConstFLabelFontThicknessF": {
        "prefix": "cnConstFLabelFontThicknessF",
        "body": "cnConstFLabelFontThicknessF"
    },
    "cnConstFLabelFormat": {
        "prefix": "cnConstFLabelFormat",
        "body": "cnConstFLabelFormat"
    },
    "cnConstFLabelFuncCode": {
        "prefix": "cnConstFLabelFuncCode",
        "body": "cnConstFLabelFuncCode"
    },
    "cnConstFLabelJust": {
        "prefix": "cnConstFLabelJust",
        "body": "cnConstFLabelJust"
    },
    "cnConstFLabelOn": {
        "prefix": "cnConstFLabelOn",
        "body": "cnConstFLabelOn"
    },
    "cnConstFLabelOrthogonalPosF": {
        "prefix": "cnConstFLabelOrthogonalPosF",
        "body": "cnConstFLabelOrthogonalPosF"
    },
    "cnConstFLabelParallelPosF": {
        "prefix": "cnConstFLabelParallelPosF",
        "body": "cnConstFLabelParallelPosF"
    },
    "cnConstFLabelPerimColor": {
        "prefix": "cnConstFLabelPerimColor",
        "body": "cnConstFLabelPerimColor"
    },
    "cnConstFLabelPerimOn": {
        "prefix": "cnConstFLabelPerimOn",
        "body": "cnConstFLabelPerimOn"
    },
    "cnConstFLabelPerimSpaceF": {
        "prefix": "cnConstFLabelPerimSpaceF",
        "body": "cnConstFLabelPerimSpaceF"
    },
    "cnConstFLabelPerimThicknessF": {
        "prefix": "cnConstFLabelPerimThicknessF",
        "body": "cnConstFLabelPerimThicknessF"
    },
    "cnConstFLabelSide": {
        "prefix": "cnConstFLabelSide",
        "body": "cnConstFLabelSide"
    },
    "Top": {
        "prefix": "Top",
        "body": "Top"
    },
    "Bottom": {
        "prefix": "Bottom",
        "body": "Bottom"
    },
    "Right": {
        "prefix": "Right",
        "body": "Right"
    },
    "Left": {
        "prefix": "Left",
        "body": "Left"
    },
    "cnConstFLabelString": {
        "prefix": "cnConstFLabelString",
        "body": "cnConstFLabelString"
    },
    "cnConstFLabelTextDirection": {
        "prefix": "cnConstFLabelTextDirection",
        "body": "cnConstFLabelTextDirection"
    },
    "Down": {
        "prefix": "Down",
        "body": "Down"
    },
    "Across": {
        "prefix": "Across",
        "body": "Across"
    },
    "cnConstFLabelZone": {
        "prefix": "cnConstFLabelZone",
        "body": "cnConstFLabelZone"
    },
    "cnConstFUseInfoLabelRes": {
        "prefix": "cnConstFUseInfoLabelRes",
        "body": "cnConstFUseInfoLabelRes"
    },
    "cnExplicitLabelBarLabelsOn": {
        "prefix": "cnExplicitLabelBarLabelsOn",
        "body": "cnExplicitLabelBarLabelsOn"
    },
    "cnExplicitLegendLabelsOn": {
        "prefix": "cnExplicitLegendLabelsOn",
        "body": "cnExplicitLegendLabelsOn"
    },
    "cnExplicitLineLabelsOn": {
        "prefix": "cnExplicitLineLabelsOn",
        "body": "cnExplicitLineLabelsOn"
    },
    "cnFillBackgroundColor": {
        "prefix": "cnFillBackgroundColor",
        "body": "cnFillBackgroundColor"
    },
    "cnFillColor": {
        "prefix": "cnFillColor",
        "body": "cnFillColor"
    },
    "cnFillColors": {
        "prefix": "cnFillColors",
        "body": "cnFillColors"
    },
    "cnFillDotSizeF": {
        "prefix": "cnFillDotSizeF",
        "body": "cnFillDotSizeF"
    },
    "cnFillDrawOrder": {
        "prefix": "cnFillDrawOrder",
        "body": "cnFillDrawOrder"
    },
    "PreDraw": {
        "prefix": "PreDraw",
        "body": "PreDraw"
    },
    "Draw": {
        "prefix": "Draw",
        "body": "Draw"
    },
    "PostDraw": {
        "prefix": "PostDraw",
        "body": "PostDraw"
    },
    "cnFillMode": {
        "prefix": "cnFillMode",
        "body": "cnFillMode"
    },
    "AreaFill": {
        "prefix": "AreaFill",
        "body": "AreaFill"
    },
    "RasterFill": {
        "prefix": "RasterFill",
        "body": "RasterFill"
    },
    "CellFill": {
        "prefix": "CellFill",
        "body": "CellFill"
    },
    "cnFillOn": {
        "prefix": "cnFillOn",
        "body": "cnFillOn"
    },
    "cnFillOpacityF": {
        "prefix": "cnFillOpacityF",
        "body": "cnFillOpacityF"
    },
    "cnFillPalette": {
        "prefix": "cnFillPalette",
        "body": "cnFillPalette"
    },
    "cnFillPattern": {
        "prefix": "cnFillPattern",
        "body": "cnFillPattern"
    },
    "cnFillPatterns": {
        "prefix": "cnFillPatterns",
        "body": "cnFillPatterns"
    },
    "cnFillScaleF": {
        "prefix": "cnFillScaleF",
        "body": "cnFillScaleF"
    },
    "cnFillScales": {
        "prefix": "cnFillScales",
        "body": "cnFillScales"
    },
    "cnFixFillBleed": {
        "prefix": "cnFixFillBleed",
        "body": "cnFixFillBleed"
    },
    "cnGridBoundFillColor": {
        "prefix": "cnGridBoundFillColor",
        "body": "cnGridBoundFillColor"
    },
    "cnGridBoundFillPattern": {
        "prefix": "cnGridBoundFillPattern",
        "body": "cnGridBoundFillPattern"
    },
    "cnGridBoundFillScaleF": {
        "prefix": "cnGridBoundFillScaleF",
        "body": "cnGridBoundFillScaleF"
    },
    "cnGridBoundPerimColor": {
        "prefix": "cnGridBoundPerimColor",
        "body": "cnGridBoundPerimColor"
    },
    "cnGridBoundPerimDashPattern": {
        "prefix": "cnGridBoundPerimDashPattern",
        "body": "cnGridBoundPerimDashPattern"
    },
    "cnGridBoundPerimOn": {
        "prefix": "cnGridBoundPerimOn",
        "body": "cnGridBoundPerimOn"
    },
    "cnGridBoundPerimThicknessF": {
        "prefix": "cnGridBoundPerimThicknessF",
        "body": "cnGridBoundPerimThicknessF"
    },
    "cnHighLabelAngleF": {
        "prefix": "cnHighLabelAngleF",
        "body": "cnHighLabelAngleF"
    },
    "cnHighLabelBackgroundColor": {
        "prefix": "cnHighLabelBackgroundColor",
        "body": "cnHighLabelBackgroundColor"
    },
    "cnHighLabelConstantSpacingF": {
        "prefix": "cnHighLabelConstantSpacingF",
        "body": "cnHighLabelConstantSpacingF"
    },
    "cnHighLabelCount": {
        "prefix": "cnHighLabelCount",
        "body": "cnHighLabelCount"
    },
    "cnHighLabelFont": {
        "prefix": "cnHighLabelFont",
        "body": "cnHighLabelFont"
    },
    "cnHighLabelFontAspectF": {
        "prefix": "cnHighLabelFontAspectF",
        "body": "cnHighLabelFontAspectF"
    },
    "cnHighLabelFontColor": {
        "prefix": "cnHighLabelFontColor",
        "body": "cnHighLabelFontColor"
    },
    "cnHighLabelFontHeightF": {
        "prefix": "cnHighLabelFontHeightF",
        "body": "cnHighLabelFontHeightF"
    },
    "cnHighLabelFontQuality": {
        "prefix": "cnHighLabelFontQuality",
        "body": "cnHighLabelFontQuality"
    },
    "cnHighLabelFontThicknessF": {
        "prefix": "cnHighLabelFontThicknessF",
        "body": "cnHighLabelFontThicknessF"
    },
    "cnHighLabelFormat": {
        "prefix": "cnHighLabelFormat",
        "body": "cnHighLabelFormat"
    },
    "cnHighLabelFuncCode": {
        "prefix": "cnHighLabelFuncCode",
        "body": "cnHighLabelFuncCode"
    },
    "cnHighLabelPerimColor": {
        "prefix": "cnHighLabelPerimColor",
        "body": "cnHighLabelPerimColor"
    },
    "cnHighLabelPerimOn": {
        "prefix": "cnHighLabelPerimOn",
        "body": "cnHighLabelPerimOn"
    },
    "cnHighLabelPerimSpaceF": {
        "prefix": "cnHighLabelPerimSpaceF",
        "body": "cnHighLabelPerimSpaceF"
    },
    "cnHighLabelPerimThicknessF": {
        "prefix": "cnHighLabelPerimThicknessF",
        "body": "cnHighLabelPerimThicknessF"
    },
    "cnHighLabelString": {
        "prefix": "cnHighLabelString",
        "body": "cnHighLabelString"
    },
    "cnHighLabelsOn": {
        "prefix": "cnHighLabelsOn",
        "body": "cnHighLabelsOn"
    },
    "cnHighLowLabelOverlapMode": {
        "prefix": "cnHighLowLabelOverlapMode",
        "body": "cnHighLowLabelOverlapMode"
    },
    "IgnoreOverlap": {
        "prefix": "IgnoreOverlap",
        "body": "IgnoreOverlap"
    },
    "OmitOverHL": {
        "prefix": "OmitOverHL",
        "body": "OmitOverHL"
    },
    "OmitOverVP": {
        "prefix": "OmitOverVP",
        "body": "OmitOverVP"
    },
    "OmitOverVPAndHL": {
        "prefix": "OmitOverVPAndHL",
        "body": "OmitOverVPAndHL"
    },
    "AdjustVP": {
        "prefix": "AdjustVP",
        "body": "AdjustVP"
    },
    "AdjustVPOmitOverHL": {
        "prefix": "AdjustVPOmitOverHL",
        "body": "AdjustVPOmitOverHL"
    },
    "cnHighUseLineLabelRes": {
        "prefix": "cnHighUseLineLabelRes",
        "body": "cnHighUseLineLabelRes"
    },
    "cnInfoLabelAngleF": {
        "prefix": "cnInfoLabelAngleF",
        "body": "cnInfoLabelAngleF"
    },
    "cnInfoLabelBackgroundColor": {
        "prefix": "cnInfoLabelBackgroundColor",
        "body": "cnInfoLabelBackgroundColor"
    },
    "cnInfoLabelConstantSpacingF": {
        "prefix": "cnInfoLabelConstantSpacingF",
        "body": "cnInfoLabelConstantSpacingF"
    },
    "cnInfoLabelFont": {
        "prefix": "cnInfoLabelFont",
        "body": "cnInfoLabelFont"
    },
    "cnInfoLabelFontAspectF": {
        "prefix": "cnInfoLabelFontAspectF",
        "body": "cnInfoLabelFontAspectF"
    },
    "cnInfoLabelFontColor": {
        "prefix": "cnInfoLabelFontColor",
        "body": "cnInfoLabelFontColor"
    },
    "cnInfoLabelFontHeightF": {
        "prefix": "cnInfoLabelFontHeightF",
        "body": "cnInfoLabelFontHeightF"
    },
    "cnInfoLabelFontQuality": {
        "prefix": "cnInfoLabelFontQuality",
        "body": "cnInfoLabelFontQuality"
    },
    "cnInfoLabelFontThicknessF": {
        "prefix": "cnInfoLabelFontThicknessF",
        "body": "cnInfoLabelFontThicknessF"
    },
    "cnInfoLabelFormat": {
        "prefix": "cnInfoLabelFormat",
        "body": "cnInfoLabelFormat"
    },
    "cnInfoLabelFuncCode": {
        "prefix": "cnInfoLabelFuncCode",
        "body": "cnInfoLabelFuncCode"
    },
    "cnInfoLabelJust": {
        "prefix": "cnInfoLabelJust",
        "body": "cnInfoLabelJust"
    },
    "cnInfoLabelOn": {
        "prefix": "cnInfoLabelOn",
        "body": "cnInfoLabelOn"
    },
    "cnInfoLabelOrthogonalPosF": {
        "prefix": "cnInfoLabelOrthogonalPosF",
        "body": "cnInfoLabelOrthogonalPosF"
    },
    "cnInfoLabelParallelPosF": {
        "prefix": "cnInfoLabelParallelPosF",
        "body": "cnInfoLabelParallelPosF"
    },
    "cnInfoLabelPerimColor": {
        "prefix": "cnInfoLabelPerimColor",
        "body": "cnInfoLabelPerimColor"
    },
    "cnInfoLabelPerimOn": {
        "prefix": "cnInfoLabelPerimOn",
        "body": "cnInfoLabelPerimOn"
    },
    "cnInfoLabelPerimSpaceF": {
        "prefix": "cnInfoLabelPerimSpaceF",
        "body": "cnInfoLabelPerimSpaceF"
    },
    "cnInfoLabelPerimThicknessF": {
        "prefix": "cnInfoLabelPerimThicknessF",
        "body": "cnInfoLabelPerimThicknessF"
    },
    "cnInfoLabelSide": {
        "prefix": "cnInfoLabelSide",
        "body": "cnInfoLabelSide"
    },
    "cnInfoLabelString": {
        "prefix": "cnInfoLabelString",
        "body": "cnInfoLabelString"
    },
    "$CIU$": {
        "prefix": "$CIU$",
        "body": "$CIU$"
    },
    "$CMN$": {
        "prefix": "$CMN$",
        "body": "$CMN$"
    },
    "$CMX$": {
        "prefix": "$CMX$",
        "body": "$CMX$"
    },
    "$SFU$": {
        "prefix": "$SFU$",
        "body": "$SFU$"
    },
    "$ZMN$": {
        "prefix": "$ZMN$",
        "body": "$ZMN$"
    },
    "$ZMX$": {
        "prefix": "$ZMX$",
        "body": "$ZMX$"
    },
    "cnInfoLabelTextDirection": {
        "prefix": "cnInfoLabelTextDirection",
        "body": "cnInfoLabelTextDirection"
    },
    "cnInfoLabelZone": {
        "prefix": "cnInfoLabelZone",
        "body": "cnInfoLabelZone"
    },
    "cnLabelBarEndLabelsOn": {
        "prefix": "cnLabelBarEndLabelsOn",
        "body": "cnLabelBarEndLabelsOn"
    },
    "cnLabelBarEndStyle": {
        "prefix": "cnLabelBarEndStyle",
        "body": "cnLabelBarEndStyle"
    },
    "IncludeOuterBoxes": {
        "prefix": "IncludeOuterBoxes",
        "body": "IncludeOuterBoxes"
    },
    "IncludeMinMaxLabels": {
        "prefix": "IncludeMinMaxLabels",
        "body": "IncludeMinMaxLabels"
    },
    "ExcludeOuterBoxes": {
        "prefix": "ExcludeOuterBoxes",
        "body": "ExcludeOuterBoxes"
    },
    "cnLabelDrawOrder": {
        "prefix": "cnLabelDrawOrder",
        "body": "cnLabelDrawOrder"
    },
    "cnLabelMasking": {
        "prefix": "cnLabelMasking",
        "body": "cnLabelMasking"
    },
    "cnLabelScaleFactorF": {
        "prefix": "cnLabelScaleFactorF",
        "body": "cnLabelScaleFactorF"
    },
    "cnLabelScaleValueF": {
        "prefix": "cnLabelScaleValueF",
        "body": "cnLabelScaleValueF"
    },
    "cnLabelScalingMode": {
        "prefix": "cnLabelScalingMode",
        "body": "cnLabelScalingMode"
    },
    "ScaleFactor": {
        "prefix": "ScaleFactor",
        "body": "ScaleFactor"
    },
    "ConfineToRange": {
        "prefix": "ConfineToRange",
        "body": "ConfineToRange"
    },
    "TrimZeros": {
        "prefix": "TrimZeros",
        "body": "TrimZeros"
    },
    "MaxSigDigitsLeft": {
        "prefix": "MaxSigDigitsLeft",
        "body": "MaxSigDigitsLeft"
    },
    "AllIntegers": {
        "prefix": "AllIntegers",
        "body": "AllIntegers"
    },
    "cnLegendLevelFlags": {
        "prefix": "cnLegendLevelFlags",
        "body": "cnLegendLevelFlags"
    },
    "NoLine": {
        "prefix": "NoLine",
        "body": "NoLine"
    },
    "LineOnly": {
        "prefix": "LineOnly",
        "body": "LineOnly"
    },
    "LabelOnly": {
        "prefix": "LabelOnly",
        "body": "LabelOnly"
    },
    "LineAndLabel": {
        "prefix": "LineAndLabel",
        "body": "LineAndLabel"
    },
    "cnLevelCount": {
        "prefix": "cnLevelCount",
        "body": "cnLevelCount"
    },
    "cnLevelFlag": {
        "prefix": "cnLevelFlag",
        "body": "cnLevelFlag"
    },
    "cnLevelFlags": {
        "prefix": "cnLevelFlags",
        "body": "cnLevelFlags"
    },
    "cnLevelSelectionMode": {
        "prefix": "cnLevelSelectionMode",
        "body": "cnLevelSelectionMode"
    },
    "AutomaticLevels": {
        "prefix": "AutomaticLevels",
        "body": "AutomaticLevels"
    },
    "ManualLevels": {
        "prefix": "ManualLevels",
        "body": "ManualLevels"
    },
    "ExplicitLevels": {
        "prefix": "ExplicitLevels",
        "body": "ExplicitLevels"
    },
    "EqualSpacedLevels": {
        "prefix": "EqualSpacedLevels",
        "body": "EqualSpacedLevels"
    },
    "cnLevelSpacingF": {
        "prefix": "cnLevelSpacingF",
        "body": "cnLevelSpacingF"
    },
    "cnLevels": {
        "prefix": "cnLevels",
        "body": "cnLevels"
    },
    "cnLineColor": {
        "prefix": "cnLineColor",
        "body": "cnLineColor"
    },
    "cnLineColors": {
        "prefix": "cnLineColors",
        "body": "cnLineColors"
    },
    "cnLineDashPattern": {
        "prefix": "cnLineDashPattern",
        "body": "cnLineDashPattern"
    },
    "cnLineDashPatterns": {
        "prefix": "cnLineDashPatterns",
        "body": "cnLineDashPatterns"
    },
    "cnLineDashSegLenF": {
        "prefix": "cnLineDashSegLenF",
        "body": "cnLineDashSegLenF"
    },
    "cnLineDrawOrder": {
        "prefix": "cnLineDrawOrder",
        "body": "cnLineDrawOrder"
    },
    "cnLineLabelAngleF": {
        "prefix": "cnLineLabelAngleF",
        "body": "cnLineLabelAngleF"
    },
    "cnLineLabelBackgroundColor": {
        "prefix": "cnLineLabelBackgroundColor",
        "body": "cnLineLabelBackgroundColor"
    },
    "cnLineLabelConstantSpacingF": {
        "prefix": "cnLineLabelConstantSpacingF",
        "body": "cnLineLabelConstantSpacingF"
    },
    "cnLineLabelCount": {
        "prefix": "cnLineLabelCount",
        "body": "cnLineLabelCount"
    },
    "cnLineLabelDensityF": {
        "prefix": "cnLineLabelDensityF",
        "body": "cnLineLabelDensityF"
    },
    "cnLineLabelFont": {
        "prefix": "cnLineLabelFont",
        "body": "cnLineLabelFont"
    },
    "cnLineLabelFontAspectF": {
        "prefix": "cnLineLabelFontAspectF",
        "body": "cnLineLabelFontAspectF"
    },
    "cnLineLabelFontColor": {
        "prefix": "cnLineLabelFontColor",
        "body": "cnLineLabelFontColor"
    },
    "cnLineLabelFontColors": {
        "prefix": "cnLineLabelFontColors",
        "body": "cnLineLabelFontColors"
    },
    "cnLineLabelFontHeightF": {
        "prefix": "cnLineLabelFontHeightF",
        "body": "cnLineLabelFontHeightF"
    },
    "cnLineLabelFontQuality": {
        "prefix": "cnLineLabelFontQuality",
        "body": "cnLineLabelFontQuality"
    },
    "cnLineLabelFontThicknessF": {
        "prefix": "cnLineLabelFontThicknessF",
        "body": "cnLineLabelFontThicknessF"
    },
    "cnLineLabelFormat": {
        "prefix": "cnLineLabelFormat",
        "body": "cnLineLabelFormat"
    },
    "cnLineLabelFuncCode": {
        "prefix": "cnLineLabelFuncCode",
        "body": "cnLineLabelFuncCode"
    },
    "cnLineLabelInterval": {
        "prefix": "cnLineLabelInterval",
        "body": "cnLineLabelInterval"
    },
    "cnLineLabelPerimColor": {
        "prefix": "cnLineLabelPerimColor",
        "body": "cnLineLabelPerimColor"
    },
    "cnLineLabelPerimOn": {
        "prefix": "cnLineLabelPerimOn",
        "body": "cnLineLabelPerimOn"
    },
    "cnLineLabelPerimSpaceF": {
        "prefix": "cnLineLabelPerimSpaceF",
        "body": "cnLineLabelPerimSpaceF"
    },
    "cnLineLabelPerimThicknessF": {
        "prefix": "cnLineLabelPerimThicknessF",
        "body": "cnLineLabelPerimThicknessF"
    },
    "cnLineLabelPlacementMode": {
        "prefix": "cnLineLabelPlacementMode",
        "body": "cnLineLabelPlacementMode"
    },
    "Constant": {
        "prefix": "Constant",
        "body": "Constant"
    },
    "Randomized": {
        "prefix": "Randomized",
        "body": "Randomized"
    },
    "Computed": {
        "prefix": "Computed",
        "body": "Computed"
    },
    "cnLineLabelStrings": {
        "prefix": "cnLineLabelStrings",
        "body": "cnLineLabelStrings"
    },
    "cnLineLabelsOn": {
        "prefix": "cnLineLabelsOn",
        "body": "cnLineLabelsOn"
    },
    "cnLinePalette": {
        "prefix": "cnLinePalette",
        "body": "cnLinePalette"
    },
    "cnLineThicknessF": {
        "prefix": "cnLineThicknessF",
        "body": "cnLineThicknessF"
    },
    "cnLineThicknesses": {
        "prefix": "cnLineThicknesses",
        "body": "cnLineThicknesses"
    },
    "cnLinesOn": {
        "prefix": "cnLinesOn",
        "body": "cnLinesOn"
    },
    "cnLowLabelAngleF": {
        "prefix": "cnLowLabelAngleF",
        "body": "cnLowLabelAngleF"
    },
    "cnLowLabelBackgroundColor": {
        "prefix": "cnLowLabelBackgroundColor",
        "body": "cnLowLabelBackgroundColor"
    },
    "cnLowLabelConstantSpacingF": {
        "prefix": "cnLowLabelConstantSpacingF",
        "body": "cnLowLabelConstantSpacingF"
    },
    "cnLowLabelCount": {
        "prefix": "cnLowLabelCount",
        "body": "cnLowLabelCount"
    },
    "cnLowLabelFont": {
        "prefix": "cnLowLabelFont",
        "body": "cnLowLabelFont"
    },
    "cnLowLabelFontAspectF": {
        "prefix": "cnLowLabelFontAspectF",
        "body": "cnLowLabelFontAspectF"
    },
    "cnLowLabelFontColor": {
        "prefix": "cnLowLabelFontColor",
        "body": "cnLowLabelFontColor"
    },
    "cnLowLabelFontHeightF": {
        "prefix": "cnLowLabelFontHeightF",
        "body": "cnLowLabelFontHeightF"
    },
    "cnLowLabelFontQuality": {
        "prefix": "cnLowLabelFontQuality",
        "body": "cnLowLabelFontQuality"
    },
    "cnLowLabelFontThicknessF": {
        "prefix": "cnLowLabelFontThicknessF",
        "body": "cnLowLabelFontThicknessF"
    },
    "cnLowLabelFormat": {
        "prefix": "cnLowLabelFormat",
        "body": "cnLowLabelFormat"
    },
    "cnLowLabelFuncCode": {
        "prefix": "cnLowLabelFuncCode",
        "body": "cnLowLabelFuncCode"
    },
    "cnLowLabelPerimColor": {
        "prefix": "cnLowLabelPerimColor",
        "body": "cnLowLabelPerimColor"
    },
    "cnLowLabelPerimOn": {
        "prefix": "cnLowLabelPerimOn",
        "body": "cnLowLabelPerimOn"
    },
    "cnLowLabelPerimSpaceF": {
        "prefix": "cnLowLabelPerimSpaceF",
        "body": "cnLowLabelPerimSpaceF"
    },
    "cnLowLabelPerimThicknessF": {
        "prefix": "cnLowLabelPerimThicknessF",
        "body": "cnLowLabelPerimThicknessF"
    },
    "cnLowLabelString": {
        "prefix": "cnLowLabelString",
        "body": "cnLowLabelString"
    },
    "cnLowLabelsOn": {
        "prefix": "cnLowLabelsOn",
        "body": "cnLowLabelsOn"
    },
    "cnLowUseHighLabelRes": {
        "prefix": "cnLowUseHighLabelRes",
        "body": "cnLowUseHighLabelRes"
    },
    "cnMaxDataValueFormat": {
        "prefix": "cnMaxDataValueFormat",
        "body": "cnMaxDataValueFormat"
    },
    "cnMaxLevelCount": {
        "prefix": "cnMaxLevelCount",
        "body": "cnMaxLevelCount"
    },
    "cnMaxLevelValF": {
        "prefix": "cnMaxLevelValF",
        "body": "cnMaxLevelValF"
    },
    "cnMaxPointDistanceF": {
        "prefix": "cnMaxPointDistanceF",
        "body": "cnMaxPointDistanceF"
    },
    "cnMinLevelValF": {
        "prefix": "cnMinLevelValF",
        "body": "cnMinLevelValF"
    },
    "cnMissingValFillColor": {
        "prefix": "cnMissingValFillColor",
        "body": "cnMissingValFillColor"
    },
    "cnMissingValFillPattern": {
        "prefix": "cnMissingValFillPattern",
        "body": "cnMissingValFillPattern"
    },
    "cnMissingValFillScaleF": {
        "prefix": "cnMissingValFillScaleF",
        "body": "cnMissingValFillScaleF"
    },
    "cnMissingValPerimColor": {
        "prefix": "cnMissingValPerimColor",
        "body": "cnMissingValPerimColor"
    },
    "cnMissingValPerimDashPattern": {
        "prefix": "cnMissingValPerimDashPattern",
        "body": "cnMissingValPerimDashPattern"
    },
    "cnMissingValPerimGridBoundOn": {
        "prefix": "cnMissingValPerimGridBoundOn",
        "body": "cnMissingValPerimGridBoundOn"
    },
    "cnMissingValPerimOn": {
        "prefix": "cnMissingValPerimOn",
        "body": "cnMissingValPerimOn"
    },
    "cnMissingValPerimThicknessF": {
        "prefix": "cnMissingValPerimThicknessF",
        "body": "cnMissingValPerimThicknessF"
    },
    "cnMonoFillColor": {
        "prefix": "cnMonoFillColor",
        "body": "cnMonoFillColor"
    },
    "cnMonoFillPattern": {
        "prefix": "cnMonoFillPattern",
        "body": "cnMonoFillPattern"
    },
    "cnMonoFillScale": {
        "prefix": "cnMonoFillScale",
        "body": "cnMonoFillScale"
    },
    "cnMonoLevelFlag": {
        "prefix": "cnMonoLevelFlag",
        "body": "cnMonoLevelFlag"
    },
    "cnMonoLineColor": {
        "prefix": "cnMonoLineColor",
        "body": "cnMonoLineColor"
    },
    "cnMonoLineDashPattern": {
        "prefix": "cnMonoLineDashPattern",
        "body": "cnMonoLineDashPattern"
    },
    "cnMonoLineLabelFontColor": {
        "prefix": "cnMonoLineLabelFontColor",
        "body": "cnMonoLineLabelFontColor"
    },
    "cnMonoLineThickness": {
        "prefix": "cnMonoLineThickness",
        "body": "cnMonoLineThickness"
    },
    "cnNoDataLabelOn": {
        "prefix": "cnNoDataLabelOn",
        "body": "cnNoDataLabelOn"
    },
    "cnNoDataLabelString": {
        "prefix": "cnNoDataLabelString",
        "body": "cnNoDataLabelString"
    },
    "cnOutOfRangeFillColor": {
        "prefix": "cnOutOfRangeFillColor",
        "body": "cnOutOfRangeFillColor"
    },
    "cnOutOfRangeFillPattern": {
        "prefix": "cnOutOfRangeFillPattern",
        "body": "cnOutOfRangeFillPattern"
    },
    "cnOutOfRangeFillScaleF": {
        "prefix": "cnOutOfRangeFillScaleF",
        "body": "cnOutOfRangeFillScaleF"
    },
    "cnOutOfRangePerimColor": {
        "prefix": "cnOutOfRangePerimColor",
        "body": "cnOutOfRangePerimColor"
    },
    "cnOutOfRangePerimDashPattern": {
        "prefix": "cnOutOfRangePerimDashPattern",
        "body": "cnOutOfRangePerimDashPattern"
    },
    "cnOutOfRangePerimOn": {
        "prefix": "cnOutOfRangePerimOn",
        "body": "cnOutOfRangePerimOn"
    },
    "cnOutOfRangePerimThicknessF": {
        "prefix": "cnOutOfRangePerimThicknessF",
        "body": "cnOutOfRangePerimThicknessF"
    },
    "cnRasterCellSizeF": {
        "prefix": "cnRasterCellSizeF",
        "body": "cnRasterCellSizeF"
    },
    "cnRasterMinCellSizeF": {
        "prefix": "cnRasterMinCellSizeF",
        "body": "cnRasterMinCellSizeF"
    },
    "cnRasterModeOn": {
        "prefix": "cnRasterModeOn",
        "body": "cnRasterModeOn"
    },
    "cnRasterSampleFactorF": {
        "prefix": "cnRasterSampleFactorF",
        "body": "cnRasterSampleFactorF"
    },
    "cnRasterSmoothingOn": {
        "prefix": "cnRasterSmoothingOn",
        "body": "cnRasterSmoothingOn"
    },
    "cnScalarFieldData": {
        "prefix": "cnScalarFieldData",
        "body": "cnScalarFieldData"
    },
    "cnSmoothingDistanceF": {
        "prefix": "cnSmoothingDistanceF",
        "body": "cnSmoothingDistanceF"
    },
    "cnSmoothingOn": {
        "prefix": "cnSmoothingOn",
        "body": "cnSmoothingOn"
    },
    "cnSmoothingTensionF": {
        "prefix": "cnSmoothingTensionF",
        "body": "cnSmoothingTensionF"
    },
    "cnSpanFillPalette": {
        "prefix": "cnSpanFillPalette",
        "body": "cnSpanFillPalette"
    },
    "cnSpanLinePalette": {
        "prefix": "cnSpanLinePalette",
        "body": "cnSpanLinePalette"
    },
    "ctCopyTables": {
        "prefix": "ctCopyTables",
        "body": "ctCopyTables"
    },
    "ctXElementSize": {
        "prefix": "ctXElementSize",
        "body": "ctXElementSize"
    },
    "ctXMaxV": {
        "prefix": "ctXMaxV",
        "body": "ctXMaxV"
    },
    "ctXMinV": {
        "prefix": "ctXMinV",
        "body": "ctXMinV"
    },
    "ctXMissingV": {
        "prefix": "ctXMissingV",
        "body": "ctXMissingV"
    },
    "ctXTable": {
        "prefix": "ctXTable",
        "body": "ctXTable"
    },
    "ctXTableLengths": {
        "prefix": "ctXTableLengths",
        "body": "ctXTableLengths"
    },
    "ctXTableType": {
        "prefix": "ctXTableType",
        "body": "ctXTableType"
    },
    "ctYElementSize": {
        "prefix": "ctYElementSize",
        "body": "ctYElementSize"
    },
    "ctYMaxV": {
        "prefix": "ctYMaxV",
        "body": "ctYMaxV"
    },
    "ctYMinV": {
        "prefix": "ctYMinV",
        "body": "ctYMinV"
    },
    "ctYMissingV": {
        "prefix": "ctYMissingV",
        "body": "ctYMissingV"
    },
    "ctYTable": {
        "prefix": "ctYTable",
        "body": "ctYTable"
    },
    "ctYTableLengths": {
        "prefix": "ctYTableLengths",
        "body": "ctYTableLengths"
    },
    "ctYTableType": {
        "prefix": "ctYTableType",
        "body": "ctYTableType"
    },
    "dcDelayCompute": {
        "prefix": "dcDelayCompute",
        "body": "dcDelayCompute"
    },
    "errBuffer": {
        "prefix": "errBuffer",
        "body": "errBuffer"
    },
    "errFileName": {
        "prefix": "errFileName",
        "body": "errFileName"
    },
    "errFilePtr": {
        "prefix": "errFilePtr",
        "body": "errFilePtr"
    },
    "errLevel": {
        "prefix": "errLevel",
        "body": "errLevel"
    },
    "errPrint": {
        "prefix": "errPrint",
        "body": "errPrint"
    },
    "errUnitNumber": {
        "prefix": "errUnitNumber",
        "body": "errUnitNumber"
    },
    "gsClipOn": {
        "prefix": "gsClipOn",
        "body": "gsClipOn"
    },
    "gsColors": {
        "prefix": "gsColors",
        "body": "gsColors"
    },
    "gsEdgeColor": {
        "prefix": "gsEdgeColor",
        "body": "gsEdgeColor"
    },
    "gsEdgeDashPattern": {
        "prefix": "gsEdgeDashPattern",
        "body": "gsEdgeDashPattern"
    },
    "gsEdgeDashSegLenF": {
        "prefix": "gsEdgeDashSegLenF",
        "body": "gsEdgeDashSegLenF"
    },
    "gsEdgeThicknessF": {
        "prefix": "gsEdgeThicknessF",
        "body": "gsEdgeThicknessF"
    },
    "gsEdgesOn": {
        "prefix": "gsEdgesOn",
        "body": "gsEdgesOn"
    },
    "gsFillBackgroundColor": {
        "prefix": "gsFillBackgroundColor",
        "body": "gsFillBackgroundColor"
    },
    "gsFillColor": {
        "prefix": "gsFillColor",
        "body": "gsFillColor"
    },
    "gsFillDotSizeF": {
        "prefix": "gsFillDotSizeF",
        "body": "gsFillDotSizeF"
    },
    "gsFillIndex": {
        "prefix": "gsFillIndex",
        "body": "gsFillIndex"
    },
    "gsFillLineThicknessF": {
        "prefix": "gsFillLineThicknessF",
        "body": "gsFillLineThicknessF"
    },
    "gsFillOpacityF": {
        "prefix": "gsFillOpacityF",
        "body": "gsFillOpacityF"
    },
    "gsFillScaleF": {
        "prefix": "gsFillScaleF",
        "body": "gsFillScaleF"
    },
    "gsFont": {
        "prefix": "gsFont",
        "body": "gsFont"
    },
    "gsFontAspectF": {
        "prefix": "gsFontAspectF",
        "body": "gsFontAspectF"
    },
    "gsFontColor": {
        "prefix": "gsFontColor",
        "body": "gsFontColor"
    },
    "gsFontHeightF": {
        "prefix": "gsFontHeightF",
        "body": "gsFontHeightF"
    },
    "gsFontOpacityF": {
        "prefix": "gsFontOpacityF",
        "body": "gsFontOpacityF"
    },
    "gsFontQuality": {
        "prefix": "gsFontQuality",
        "body": "gsFontQuality"
    },
    "High": {
        "prefix": "High",
        "body": "High"
    },
    "Medium": {
        "prefix": "Medium",
        "body": "Medium"
    },
    "Low": {
        "prefix": "Low",
        "body": "Low"
    },
    "gsFontThicknessF": {
        "prefix": "gsFontThicknessF",
        "body": "gsFontThicknessF"
    },
    "gsLineColor": {
        "prefix": "gsLineColor",
        "body": "gsLineColor"
    },
    "gsLineDashPattern": {
        "prefix": "gsLineDashPattern",
        "body": "gsLineDashPattern"
    },
    "gsLineDashSegLenF": {
        "prefix": "gsLineDashSegLenF",
        "body": "gsLineDashSegLenF"
    },
    "gsLineLabelConstantSpacingF": {
        "prefix": "gsLineLabelConstantSpacingF",
        "body": "gsLineLabelConstantSpacingF"
    },
    "gsLineLabelFont": {
        "prefix": "gsLineLabelFont",
        "body": "gsLineLabelFont"
    },
    "gsLineLabelFontAspectF": {
        "prefix": "gsLineLabelFontAspectF",
        "body": "gsLineLabelFontAspectF"
    },
    "gsLineLabelFontColor": {
        "prefix": "gsLineLabelFontColor",
        "body": "gsLineLabelFontColor"
    },
    "gsLineLabelFontHeightF": {
        "prefix": "gsLineLabelFontHeightF",
        "body": "gsLineLabelFontHeightF"
    },
    "gsLineLabelFontQuality": {
        "prefix": "gsLineLabelFontQuality",
        "body": "gsLineLabelFontQuality"
    },
    "gsLineLabelFontThicknessF": {
        "prefix": "gsLineLabelFontThicknessF",
        "body": "gsLineLabelFontThicknessF"
    },
    "gsLineLabelFuncCode": {
        "prefix": "gsLineLabelFuncCode",
        "body": "gsLineLabelFuncCode"
    },
    "gsLineLabelString": {
        "prefix": "gsLineLabelString",
        "body": "gsLineLabelString"
    },
    "gsLineOpacityF": {
        "prefix": "gsLineOpacityF",
        "body": "gsLineOpacityF"
    },
    "gsLineThicknessF": {
        "prefix": "gsLineThicknessF",
        "body": "gsLineThicknessF"
    },
    "gsMarkerColor": {
        "prefix": "gsMarkerColor",
        "body": "gsMarkerColor"
    },
    "gsMarkerIndex": {
        "prefix": "gsMarkerIndex",
        "body": "gsMarkerIndex"
    },
    "gsMarkerOpacityF": {
        "prefix": "gsMarkerOpacityF",
        "body": "gsMarkerOpacityF"
    },
    "gsMarkerSizeF": {
        "prefix": "gsMarkerSizeF",
        "body": "gsMarkerSizeF"
    },
    "gsMarkerThicknessF": {
        "prefix": "gsMarkerThicknessF",
        "body": "gsMarkerThicknessF"
    },
    "gsSegments": {
        "prefix": "gsSegments",
        "body": "gsSegments"
    },
    "gsTextAngleF": {
        "prefix": "gsTextAngleF",
        "body": "gsTextAngleF"
    },
    "gsTextConstantSpacingF": {
        "prefix": "gsTextConstantSpacingF",
        "body": "gsTextConstantSpacingF"
    },
    "gsTextDirection": {
        "prefix": "gsTextDirection",
        "body": "gsTextDirection"
    },
    "gsTextFuncCode": {
        "prefix": "gsTextFuncCode",
        "body": "gsTextFuncCode"
    },
    "gsTextJustification": {
        "prefix": "gsTextJustification",
        "body": "gsTextJustification"
    },
    "gsnAboveYRefLineBarColors": {
        "prefix": "gsnAboveYRefLineBarColors",
        "body": "gsnAboveYRefLineBarColors"
    },
    "gsnAboveYRefLineBarFillScales": {
        "prefix": "gsnAboveYRefLineBarFillScales",
        "body": "gsnAboveYRefLineBarFillScales"
    },
    "gsnAboveYRefLineBarPatterns": {
        "prefix": "gsnAboveYRefLineBarPatterns",
        "body": "gsnAboveYRefLineBarPatterns"
    },
    "gsnAboveYRefLineColor": {
        "prefix": "gsnAboveYRefLineColor",
        "body": "gsnAboveYRefLineColor"
    },
    "gsnAddCyclic": {
        "prefix": "gsnAddCyclic",
        "body": "gsnAddCyclic"
    },
    "gsnAttachBorderOn": {
        "prefix": "gsnAttachBorderOn",
        "body": "gsnAttachBorderOn"
    },
    "gsnAttachPlotsXAxis": {
        "prefix": "gsnAttachPlotsXAxis",
        "body": "gsnAttachPlotsXAxis"
    },
    "gsnBelowYRefLineBarColors": {
        "prefix": "gsnBelowYRefLineBarColors",
        "body": "gsnBelowYRefLineBarColors"
    },
    "gsnBelowYRefLineBarFillScales": {
        "prefix": "gsnBelowYRefLineBarFillScales",
        "body": "gsnBelowYRefLineBarFillScales"
    },
    "gsnBelowYRefLineBarPatterns": {
        "prefix": "gsnBelowYRefLineBarPatterns",
        "body": "gsnBelowYRefLineBarPatterns"
    },
    "gsnBelowYRefLineColor": {
        "prefix": "gsnBelowYRefLineColor",
        "body": "gsnBelowYRefLineColor"
    },
    "gsnBoxMargin": {
        "prefix": "gsnBoxMargin",
        "body": "gsnBoxMargin"
    },
    "gsnCenterString": {
        "prefix": "gsnCenterString",
        "body": "gsnCenterString"
    },
    "gsnCenterStringFontColor": {
        "prefix": "gsnCenterStringFontColor",
        "body": "gsnCenterStringFontColor"
    },
    "gsnCenterStringFontHeightF": {
        "prefix": "gsnCenterStringFontHeightF",
        "body": "gsnCenterStringFontHeightF"
    },
    "gsnCenterStringFuncCode": {
        "prefix": "gsnCenterStringFuncCode",
        "body": "gsnCenterStringFuncCode"
    },
    "gsnCenterStringOrthogonalPosF": {
        "prefix": "gsnCenterStringOrthogonalPosF",
        "body": "gsnCenterStringOrthogonalPosF"
    },
    "gsnCenterStringParallelPosF": {
        "prefix": "gsnCenterStringParallelPosF",
        "body": "gsnCenterStringParallelPosF"
    },
    "gsnContourLineThicknessesScale": {
        "prefix": "gsnContourLineThicknessesScale",
        "body": "gsnContourLineThicknessesScale"
    },
    "gsnContourNegLineDashPattern": {
        "prefix": "gsnContourNegLineDashPattern",
        "body": "gsnContourNegLineDashPattern"
    },
    "gsnContourPosLineDashPattern": {
        "prefix": "gsnContourPosLineDashPattern",
        "body": "gsnContourPosLineDashPattern"
    },
    "gsnContourZeroLineThicknessF": {
        "prefix": "gsnContourZeroLineThicknessF",
        "body": "gsnContourZeroLineThicknessF"
    },
    "gsnDebugWriteFileName": {
        "prefix": "gsnDebugWriteFileName",
        "body": "gsnDebugWriteFileName"
    },
    "gsnDraw": {
        "prefix": "gsnDraw",
        "body": "gsnDraw"
    },
    "gsnFrame": {
        "prefix": "gsnFrame",
        "body": "gsnFrame"
    },
    "gsnHistogramBarColors": {
        "prefix": "gsnHistogramBarColors",
        "body": "gsnHistogramBarColors"
    },
    "gsnHistogramBarWidthPercent": {
        "prefix": "gsnHistogramBarWidthPercent",
        "body": "gsnHistogramBarWidthPercent"
    },
    "gsnHistogramBinIntervals": {
        "prefix": "gsnHistogramBinIntervals",
        "body": "gsnHistogramBinIntervals"
    },
    "gsnHistogramBinMissing": {
        "prefix": "gsnHistogramBinMissing",
        "body": "gsnHistogramBinMissing"
    },
    "gsnHistogramBinWidth": {
        "prefix": "gsnHistogramBinWidth",
        "body": "gsnHistogramBinWidth"
    },
    "gsnHistogramClassIntervals": {
        "prefix": "gsnHistogramClassIntervals",
        "body": "gsnHistogramClassIntervals"
    },
    "gsnHistogramCompare": {
        "prefix": "gsnHistogramCompare",
        "body": "gsnHistogramCompare"
    },
    "gsnHistogramComputePercentages": {
        "prefix": "gsnHistogramComputePercentages",
        "body": "gsnHistogramComputePercentages"
    },
    "gsnHistogramComputePercentagesNoMissing": {
        "prefix": "gsnHistogramComputePercentagesNoMissing",
        "body": "gsnHistogramComputePercentagesNoMissing"
    },
    "gsnHistogramDiscreteBinValues": {
        "prefix": "gsnHistogramDiscreteBinValues",
        "body": "gsnHistogramDiscreteBinValues"
    },
    "gsnHistogramDiscreteClassValues": {
        "prefix": "gsnHistogramDiscreteClassValues",
        "body": "gsnHistogramDiscreteClassValues"
    },
    "gsnHistogramHorizontal": {
        "prefix": "gsnHistogramHorizontal",
        "body": "gsnHistogramHorizontal"
    },
    "gsnHistogramMinMaxBinsOn": {
        "prefix": "gsnHistogramMinMaxBinsOn",
        "body": "gsnHistogramMinMaxBinsOn"
    },
    "gsnHistogramNumberOfBins": {
        "prefix": "gsnHistogramNumberOfBins",
        "body": "gsnHistogramNumberOfBins"
    },
    "gsnHistogramPercentSign": {
        "prefix": "gsnHistogramPercentSign",
        "body": "gsnHistogramPercentSign"
    },
    "gsnHistogramSelectNiceIntervals": {
        "prefix": "gsnHistogramSelectNiceIntervals",
        "body": "gsnHistogramSelectNiceIntervals"
    },
    "gsnLeftString": {
        "prefix": "gsnLeftString",
        "body": "gsnLeftString"
    },
    "gsnLeftStringFontColor": {
        "prefix": "gsnLeftStringFontColor",
        "body": "gsnLeftStringFontColor"
    },
    "gsnLeftStringFontHeightF": {
        "prefix": "gsnLeftStringFontHeightF",
        "body": "gsnLeftStringFontHeightF"
    },
    "gsnLeftStringFuncCode": {
        "prefix": "gsnLeftStringFuncCode",
        "body": "gsnLeftStringFuncCode"
    },
    "gsnLeftStringOrthogonalPosF": {
        "prefix": "gsnLeftStringOrthogonalPosF",
        "body": "gsnLeftStringOrthogonalPosF"
    },
    "gsnLeftStringParallelPosF": {
        "prefix": "gsnLeftStringParallelPosF",
        "body": "gsnLeftStringParallelPosF"
    },
    "gsnLeftXRefLineBarColors": {
        "prefix": "gsnLeftXRefLineBarColors",
        "body": "gsnLeftXRefLineBarColors"
    },
    "gsnLeftXRefLineBarFillScales": {
        "prefix": "gsnLeftXRefLineBarFillScales",
        "body": "gsnLeftXRefLineBarFillScales"
    },
    "gsnLeftXRefLineBarPatterns": {
        "prefix": "gsnLeftXRefLineBarPatterns",
        "body": "gsnLeftXRefLineBarPatterns"
    },
    "gsnLeftXRefLineColor": {
        "prefix": "gsnLeftXRefLineColor",
        "body": "gsnLeftXRefLineColor"
    },
    "gsnMajorLatSpacing": {
        "prefix": "gsnMajorLatSpacing",
        "body": "gsnMajorLatSpacing"
    },
    "gsnMajorLonSpacing": {
        "prefix": "gsnMajorLonSpacing",
        "body": "gsnMajorLonSpacing"
    },
    "gsnMaskLambertConformal": {
        "prefix": "gsnMaskLambertConformal",
        "body": "gsnMaskLambertConformal"
    },
    "gsnMaskLambertConformalOutlineOn": {
        "prefix": "gsnMaskLambertConformalOutlineOn",
        "body": "gsnMaskLambertConformalOutlineOn"
    },
    "gsnMaximize": {
        "prefix": "gsnMaximize",
        "body": "gsnMaximize"
    },
    "gsnMinorLatSpacing": {
        "prefix": "gsnMinorLatSpacing",
        "body": "gsnMinorLatSpacing"
    },
    "gsnMinorLonSpacing": {
        "prefix": "gsnMinorLonSpacing",
        "body": "gsnMinorLonSpacing"
    },
    "gsnPanelBottom": {
        "prefix": "gsnPanelBottom",
        "body": "gsnPanelBottom"
    },
    "gsnPanelCenter": {
        "prefix": "gsnPanelCenter",
        "body": "gsnPanelCenter"
    },
    "gsnPanelDebug": {
        "prefix": "gsnPanelDebug",
        "body": "gsnPanelDebug"
    },
    "gsnPanelFigureStrings": {
        "prefix": "gsnPanelFigureStrings",
        "body": "gsnPanelFigureStrings"
    },
    "gsnPanelFigureStringsBackgroundFillColor": {
        "prefix": "gsnPanelFigureStringsBackgroundFillColor",
        "body": "gsnPanelFigureStringsBackgroundFillColor"
    },
    "gsnPanelFigureStringsFontHeightF": {
        "prefix": "gsnPanelFigureStringsFontHeightF",
        "body": "gsnPanelFigureStringsFontHeightF"
    },
    "gsnPanelFigureStringsJust": {
        "prefix": "gsnPanelFigureStringsJust",
        "body": "gsnPanelFigureStringsJust"
    },
    "gsnPanelFigureStringsPerimOn": {
        "prefix": "gsnPanelFigureStringsPerimOn",
        "body": "gsnPanelFigureStringsPerimOn"
    },
    "gsnPanelLabelBar": {
        "prefix": "gsnPanelLabelBar",
        "body": "gsnPanelLabelBar"
    },
    "gsnPanelLeft": {
        "prefix": "gsnPanelLeft",
        "body": "gsnPanelLeft"
    },
    "gsnPanelMainFont": {
        "prefix": "gsnPanelMainFont",
        "body": "gsnPanelMainFont"
    },
    "gsnPanelMainFontColor": {
        "prefix": "gsnPanelMainFontColor",
        "body": "gsnPanelMainFontColor"
    },
    "gsnPanelMainFontHeightF": {
        "prefix": "gsnPanelMainFontHeightF",
        "body": "gsnPanelMainFontHeightF"
    },
    "gsnPanelMainPosXF": {
        "prefix": "gsnPanelMainPosXF",
        "body": "gsnPanelMainPosXF"
    },
    "gsnPanelMainPosYF": {
        "prefix": "gsnPanelMainPosYF",
        "body": "gsnPanelMainPosYF"
    },
    "gsnPanelMainString": {
        "prefix": "gsnPanelMainString",
        "body": "gsnPanelMainString"
    },
    "gsnPanelRight": {
        "prefix": "gsnPanelRight",
        "body": "gsnPanelRight"
    },
    "gsnPanelRowSpec": {
        "prefix": "gsnPanelRowSpec",
        "body": "gsnPanelRowSpec"
    },
    "gsnPanelScalePlotIndex": {
        "prefix": "gsnPanelScalePlotIndex",
        "body": "gsnPanelScalePlotIndex"
    },
    "gsnPanelTop": {
        "prefix": "gsnPanelTop",
        "body": "gsnPanelTop"
    },
    "gsnPanelXF": {
        "prefix": "gsnPanelXF",
        "body": "gsnPanelXF"
    },
    "gsnPanelXWhiteSpacePercent": {
        "prefix": "gsnPanelXWhiteSpacePercent",
        "body": "gsnPanelXWhiteSpacePercent"
    },
    "gsnPanelYF": {
        "prefix": "gsnPanelYF",
        "body": "gsnPanelYF"
    },
    "gsnPanelYWhiteSpacePercent": {
        "prefix": "gsnPanelYWhiteSpacePercent",
        "body": "gsnPanelYWhiteSpacePercent"
    },
    "gsnPaperHeight": {
        "prefix": "gsnPaperHeight",
        "body": "gsnPaperHeight"
    },
    "gsnPaperMargin": {
        "prefix": "gsnPaperMargin",
        "body": "gsnPaperMargin"
    },
    "gsnPaperOrientation": {
        "prefix": "gsnPaperOrientation",
        "body": "gsnPaperOrientation"
    },
    "gsnPaperWidth": {
        "prefix": "gsnPaperWidth",
        "body": "gsnPaperWidth"
    },
    "gsnPolar": {
        "prefix": "gsnPolar",
        "body": "gsnPolar"
    },
    "gsnPolarLabelDistance": {
        "prefix": "gsnPolarLabelDistance",
        "body": "gsnPolarLabelDistance"
    },
    "gsnPolarLabelFont": {
        "prefix": "gsnPolarLabelFont",
        "body": "gsnPolarLabelFont"
    },
    "gsnPolarLabelFontHeightF": {
        "prefix": "gsnPolarLabelFontHeightF",
        "body": "gsnPolarLabelFontHeightF"
    },
    "gsnPolarLabelSpacing": {
        "prefix": "gsnPolarLabelSpacing",
        "body": "gsnPolarLabelSpacing"
    },
    "gsnPolarTime": {
        "prefix": "gsnPolarTime",
        "body": "gsnPolarTime"
    },
    "gsnPolarUT": {
        "prefix": "gsnPolarUT",
        "body": "gsnPolarUT"
    },
    "gsnRightString": {
        "prefix": "gsnRightString",
        "body": "gsnRightString"
    },
    "gsnRightStringFontColor": {
        "prefix": "gsnRightStringFontColor",
        "body": "gsnRightStringFontColor"
    },
    "gsnRightStringFontHeightF": {
        "prefix": "gsnRightStringFontHeightF",
        "body": "gsnRightStringFontHeightF"
    },
    "gsnRightStringFuncCode": {
        "prefix": "gsnRightStringFuncCode",
        "body": "gsnRightStringFuncCode"
    },
    "gsnRightStringOrthogonalPosF": {
        "prefix": "gsnRightStringOrthogonalPosF",
        "body": "gsnRightStringOrthogonalPosF"
    },
    "gsnRightStringParallelPosF": {
        "prefix": "gsnRightStringParallelPosF",
        "body": "gsnRightStringParallelPosF"
    },
    "gsnRightXRefLineBarColors": {
        "prefix": "gsnRightXRefLineBarColors",
        "body": "gsnRightXRefLineBarColors"
    },
    "gsnRightXRefLineBarFillScales": {
        "prefix": "gsnRightXRefLineBarFillScales",
        "body": "gsnRightXRefLineBarFillScales"
    },
    "gsnRightXRefLineBarPatterns": {
        "prefix": "gsnRightXRefLineBarPatterns",
        "body": "gsnRightXRefLineBarPatterns"
    },
    "gsnRightXRefLineColor": {
        "prefix": "gsnRightXRefLineColor",
        "body": "gsnRightXRefLineColor"
    },
    "gsnScalarContour": {
        "prefix": "gsnScalarContour",
        "body": "gsnScalarContour"
    },
    "gsnScale": {
        "prefix": "gsnScale",
        "body": "gsnScale"
    },
    "gsnShape": {
        "prefix": "gsnShape",
        "body": "gsnShape"
    },
    "gsnSpreadColorEnd": {
        "prefix": "gsnSpreadColorEnd",
        "body": "gsnSpreadColorEnd"
    },
    "gsnSpreadColorStart": {
        "prefix": "gsnSpreadColorStart",
        "body": "gsnSpreadColorStart"
    },
    "gsnSpreadColors": {
        "prefix": "gsnSpreadColors",
        "body": "gsnSpreadColors"
    },
    "gsnStringFont": {
        "prefix": "gsnStringFont",
        "body": "gsnStringFont"
    },
    "gsnStringFontColor": {
        "prefix": "gsnStringFontColor",
        "body": "gsnStringFontColor"
    },
    "gsnStringFontHeightF": {
        "prefix": "gsnStringFontHeightF",
        "body": "gsnStringFontHeightF"
    },
    "gsnStringFuncCode": {
        "prefix": "gsnStringFuncCode",
        "body": "gsnStringFuncCode"
    },
    "gsnTickMarksOn": {
        "prefix": "gsnTickMarksOn",
        "body": "gsnTickMarksOn"
    },
    "gsnXAxisIrregular2Linear": {
        "prefix": "gsnXAxisIrregular2Linear",
        "body": "gsnXAxisIrregular2Linear"
    },
    "gsnXAxisIrregular2Log": {
        "prefix": "gsnXAxisIrregular2Log",
        "body": "gsnXAxisIrregular2Log"
    },
    "gsnXRefLine": {
        "prefix": "gsnXRefLine",
        "body": "gsnXRefLine"
    },
    "gsnXRefLineColor": {
        "prefix": "gsnXRefLineColor",
        "body": "gsnXRefLineColor"
    },
    "gsnXRefLineColors": {
        "prefix": "gsnXRefLineColors",
        "body": "gsnXRefLineColors"
    },
    "gsnXRefLineDashPattern": {
        "prefix": "gsnXRefLineDashPattern",
        "body": "gsnXRefLineDashPattern"
    },
    "gsnXRefLineDashPatterns": {
        "prefix": "gsnXRefLineDashPatterns",
        "body": "gsnXRefLineDashPatterns"
    },
    "gsnXRefLineThicknessF": {
        "prefix": "gsnXRefLineThicknessF",
        "body": "gsnXRefLineThicknessF"
    },
    "gsnXRefLineThicknesses": {
        "prefix": "gsnXRefLineThicknesses",
        "body": "gsnXRefLineThicknesses"
    },
    "gsnXYAboveFillColors": {
        "prefix": "gsnXYAboveFillColors",
        "body": "gsnXYAboveFillColors"
    },
    "gsnXYBarChart": {
        "prefix": "gsnXYBarChart",
        "body": "gsnXYBarChart"
    },
    "gsnXYBarChartBarWidth": {
        "prefix": "gsnXYBarChartBarWidth",
        "body": "gsnXYBarChartBarWidth"
    },
    "gsnXYBarChartColors": {
        "prefix": "gsnXYBarChartColors",
        "body": "gsnXYBarChartColors"
    },
    "gsnXYBarChartColors2": {
        "prefix": "gsnXYBarChartColors2",
        "body": "gsnXYBarChartColors2"
    },
    "gsnXYBarChartFillDotSizeF": {
        "prefix": "gsnXYBarChartFillDotSizeF",
        "body": "gsnXYBarChartFillDotSizeF"
    },
    "gsnXYBarChartFillLineThicknessF": {
        "prefix": "gsnXYBarChartFillLineThicknessF",
        "body": "gsnXYBarChartFillLineThicknessF"
    },
    "gsnXYBarChartFillOpacityF": {
        "prefix": "gsnXYBarChartFillOpacityF",
        "body": "gsnXYBarChartFillOpacityF"
    },
    "gsnXYBarChartFillScaleF": {
        "prefix": "gsnXYBarChartFillScaleF",
        "body": "gsnXYBarChartFillScaleF"
    },
    "gsnXYBarChartOutlineOnly": {
        "prefix": "gsnXYBarChartOutlineOnly",
        "body": "gsnXYBarChartOutlineOnly"
    },
    "gsnXYBarChartOutlineThicknessF": {
        "prefix": "gsnXYBarChartOutlineThicknessF",
        "body": "gsnXYBarChartOutlineThicknessF"
    },
    "gsnXYBarChartPatterns": {
        "prefix": "gsnXYBarChartPatterns",
        "body": "gsnXYBarChartPatterns"
    },
    "gsnXYBarChartPatterns2": {
        "prefix": "gsnXYBarChartPatterns2",
        "body": "gsnXYBarChartPatterns2"
    },
    "gsnXYBelowFillColors": {
        "prefix": "gsnXYBelowFillColors",
        "body": "gsnXYBelowFillColors"
    },
    "gsnXYFillColors": {
        "prefix": "gsnXYFillColors",
        "body": "gsnXYFillColors"
    },
    "gsnXYFillOpacities": {
        "prefix": "gsnXYFillOpacities",
        "body": "gsnXYFillOpacities"
    },
    "gsnXYLeftFillColors": {
        "prefix": "gsnXYLeftFillColors",
        "body": "gsnXYLeftFillColors"
    },
    "gsnXYRightFillColors": {
        "prefix": "gsnXYRightFillColors",
        "body": "gsnXYRightFillColors"
    },
    "gsnYAxisIrregular2Linear": {
        "prefix": "gsnYAxisIrregular2Linear",
        "body": "gsnYAxisIrregular2Linear"
    },
    "gsnYAxisIrregular2Log": {
        "prefix": "gsnYAxisIrregular2Log",
        "body": "gsnYAxisIrregular2Log"
    },
    "gsnYRefLine": {
        "prefix": "gsnYRefLine",
        "body": "gsnYRefLine"
    },
    "gsnYRefLineColor": {
        "prefix": "gsnYRefLineColor",
        "body": "gsnYRefLineColor"
    },
    "gsnYRefLineColors": {
        "prefix": "gsnYRefLineColors",
        "body": "gsnYRefLineColors"
    },
    "gsnYRefLineDashPattern": {
        "prefix": "gsnYRefLineDashPattern",
        "body": "gsnYRefLineDashPattern"
    },
    "gsnYRefLineDashPatterns": {
        "prefix": "gsnYRefLineDashPatterns",
        "body": "gsnYRefLineDashPatterns"
    },
    "gsnYRefLineThicknessF": {
        "prefix": "gsnYRefLineThicknessF",
        "body": "gsnYRefLineThicknessF"
    },
    "gsnYRefLineThicknesses": {
        "prefix": "gsnYRefLineThicknesses",
        "body": "gsnYRefLineThicknesses"
    },
    "gsnZonalMean": {
        "prefix": "gsnZonalMean",
        "body": "gsnZonalMean"
    },
    "gsnZonalMeanXMaxF": {
        "prefix": "gsnZonalMeanXMaxF",
        "body": "gsnZonalMeanXMaxF"
    },
    "gsnZonalMeanXMinF": {
        "prefix": "gsnZonalMeanXMinF",
        "body": "gsnZonalMeanXMinF"
    },
    "gsnZonalMeanYRefLine": {
        "prefix": "gsnZonalMeanYRefLine",
        "body": "gsnZonalMeanYRefLine"
    },
    "lbAutoManage": {
        "prefix": "lbAutoManage",
        "body": "lbAutoManage"
    },
    "lbBottomMarginF": {
        "prefix": "lbBottomMarginF",
        "body": "lbBottomMarginF"
    },
    "lbBoxCount": {
        "prefix": "lbBoxCount",
        "body": "lbBoxCount"
    },
    "lbBoxEndCapStyle": {
        "prefix": "lbBoxEndCapStyle",
        "body": "lbBoxEndCapStyle"
    },
    "RectangleEnds": {
        "prefix": "RectangleEnds",
        "body": "RectangleEnds"
    },
    "TriangleLowEnd": {
        "prefix": "TriangleLowEnd",
        "body": "TriangleLowEnd"
    },
    "TriangleHighEnd": {
        "prefix": "TriangleHighEnd",
        "body": "TriangleHighEnd"
    },
    "TriangleBothEnds": {
        "prefix": "TriangleBothEnds",
        "body": "TriangleBothEnds"
    },
    "lbBoxFractions": {
        "prefix": "lbBoxFractions",
        "body": "lbBoxFractions"
    },
    "lbBoxLineColor": {
        "prefix": "lbBoxLineColor",
        "body": "lbBoxLineColor"
    },
    "lbBoxLineDashPattern": {
        "prefix": "lbBoxLineDashPattern",
        "body": "lbBoxLineDashPattern"
    },
    "lbBoxLineDashSegLenF": {
        "prefix": "lbBoxLineDashSegLenF",
        "body": "lbBoxLineDashSegLenF"
    },
    "lbBoxLineThicknessF": {
        "prefix": "lbBoxLineThicknessF",
        "body": "lbBoxLineThicknessF"
    },
    "lbBoxLinesOn": {
        "prefix": "lbBoxLinesOn",
        "body": "lbBoxLinesOn"
    },
    "lbBoxMajorExtentF": {
        "prefix": "lbBoxMajorExtentF",
        "body": "lbBoxMajorExtentF"
    },
    "lbBoxMinorExtentF": {
        "prefix": "lbBoxMinorExtentF",
        "body": "lbBoxMinorExtentF"
    },
    "lbBoxSeparatorLinesOn": {
        "prefix": "lbBoxSeparatorLinesOn",
        "body": "lbBoxSeparatorLinesOn"
    },
    "lbBoxSizing": {
        "prefix": "lbBoxSizing",
        "body": "lbBoxSizing"
    },
    "lbFillBackground": {
        "prefix": "lbFillBackground",
        "body": "lbFillBackground"
    },
    "lbFillColor": {
        "prefix": "lbFillColor",
        "body": "lbFillColor"
    },
    "lbFillColors": {
        "prefix": "lbFillColors",
        "body": "lbFillColors"
    },
    "lbFillDotSizeF": {
        "prefix": "lbFillDotSizeF",
        "body": "lbFillDotSizeF"
    },
    "lbFillLineThicknessF": {
        "prefix": "lbFillLineThicknessF",
        "body": "lbFillLineThicknessF"
    },
    "lbFillOpacityF": {
        "prefix": "lbFillOpacityF",
        "body": "lbFillOpacityF"
    },
    "lbFillPattern": {
        "prefix": "lbFillPattern",
        "body": "lbFillPattern"
    },
    "lbFillPatterns": {
        "prefix": "lbFillPatterns",
        "body": "lbFillPatterns"
    },
    "lbFillScaleF": {
        "prefix": "lbFillScaleF",
        "body": "lbFillScaleF"
    },
    "lbFillScales": {
        "prefix": "lbFillScales",
        "body": "lbFillScales"
    },
    "lbJustification": {
        "prefix": "lbJustification",
        "body": "lbJustification"
    },
    "lbLabelAlignment": {
        "prefix": "lbLabelAlignment",
        "body": "lbLabelAlignment"
    },
    "lbLabelAngleF": {
        "prefix": "lbLabelAngleF",
        "body": "lbLabelAngleF"
    },
    "lbLabelAutoStride": {
        "prefix": "lbLabelAutoStride",
        "body": "lbLabelAutoStride"
    },
    "lbLabelBarOn": {
        "prefix": "lbLabelBarOn",
        "body": "lbLabelBarOn"
    },
    "lbLabelConstantSpacingF": {
        "prefix": "lbLabelConstantSpacingF",
        "body": "lbLabelConstantSpacingF"
    },
    "lbLabelDirection": {
        "prefix": "lbLabelDirection",
        "body": "lbLabelDirection"
    },
    "lbLabelFont": {
        "prefix": "lbLabelFont",
        "body": "lbLabelFont"
    },
    "lbLabelFontAspectF": {
        "prefix": "lbLabelFontAspectF",
        "body": "lbLabelFontAspectF"
    },
    "lbLabelFontColor": {
        "prefix": "lbLabelFontColor",
        "body": "lbLabelFontColor"
    },
    "lbLabelFontHeightF": {
        "prefix": "lbLabelFontHeightF",
        "body": "lbLabelFontHeightF"
    },
    "lbLabelFontQuality": {
        "prefix": "lbLabelFontQuality",
        "body": "lbLabelFontQuality"
    },
    "lbLabelFontThicknessF": {
        "prefix": "lbLabelFontThicknessF",
        "body": "lbLabelFontThicknessF"
    },
    "lbLabelFuncCode": {
        "prefix": "lbLabelFuncCode",
        "body": "lbLabelFuncCode"
    },
    "lbLabelJust": {
        "prefix": "lbLabelJust",
        "body": "lbLabelJust"
    },
    "lbLabelOffsetF": {
        "prefix": "lbLabelOffsetF",
        "body": "lbLabelOffsetF"
    },
    "lbLabelPosition": {
        "prefix": "lbLabelPosition",
        "body": "lbLabelPosition"
    },
    "lbLabelStride": {
        "prefix": "lbLabelStride",
        "body": "lbLabelStride"
    },
    "lbLabelStrings": {
        "prefix": "lbLabelStrings",
        "body": "lbLabelStrings"
    },
    "lbLabelsOn": {
        "prefix": "lbLabelsOn",
        "body": "lbLabelsOn"
    },
    "lbLeftMarginF": {
        "prefix": "lbLeftMarginF",
        "body": "lbLeftMarginF"
    },
    "lbMaxLabelLenF": {
        "prefix": "lbMaxLabelLenF",
        "body": "lbMaxLabelLenF"
    },
    "lbMinLabelSpacingF": {
        "prefix": "lbMinLabelSpacingF",
        "body": "lbMinLabelSpacingF"
    },
    "lbMonoFillColor": {
        "prefix": "lbMonoFillColor",
        "body": "lbMonoFillColor"
    },
    "lbMonoFillPattern": {
        "prefix": "lbMonoFillPattern",
        "body": "lbMonoFillPattern"
    },
    "lbMonoFillScale": {
        "prefix": "lbMonoFillScale",
        "body": "lbMonoFillScale"
    },
    "lbOrientation": {
        "prefix": "lbOrientation",
        "body": "lbOrientation"
    },
    "lbOverrideFillOpacity": {
        "prefix": "lbOverrideFillOpacity",
        "body": "lbOverrideFillOpacity"
    },
    "lbPerimColor": {
        "prefix": "lbPerimColor",
        "body": "lbPerimColor"
    },
    "lbPerimDashPattern": {
        "prefix": "lbPerimDashPattern",
        "body": "lbPerimDashPattern"
    },
    "lbPerimDashSegLenF": {
        "prefix": "lbPerimDashSegLenF",
        "body": "lbPerimDashSegLenF"
    },
    "lbPerimFill": {
        "prefix": "lbPerimFill",
        "body": "lbPerimFill"
    },
    "lbPerimFillColor": {
        "prefix": "lbPerimFillColor",
        "body": "lbPerimFillColor"
    },
    "lbPerimOn": {
        "prefix": "lbPerimOn",
        "body": "lbPerimOn"
    },
    "lbPerimThicknessF": {
        "prefix": "lbPerimThicknessF",
        "body": "lbPerimThicknessF"
    },
    "lbRasterFillOn": {
        "prefix": "lbRasterFillOn",
        "body": "lbRasterFillOn"
    },
    "lbRightMarginF": {
        "prefix": "lbRightMarginF",
        "body": "lbRightMarginF"
    },
    "lbTitleAngleF": {
        "prefix": "lbTitleAngleF",
        "body": "lbTitleAngleF"
    },
    "lbTitleConstantSpacingF": {
        "prefix": "lbTitleConstantSpacingF",
        "body": "lbTitleConstantSpacingF"
    },
    "lbTitleDirection": {
        "prefix": "lbTitleDirection",
        "body": "lbTitleDirection"
    },
    "lbTitleExtentF": {
        "prefix": "lbTitleExtentF",
        "body": "lbTitleExtentF"
    },
    "lbTitleFont": {
        "prefix": "lbTitleFont",
        "body": "lbTitleFont"
    },
    "lbTitleFontAspectF": {
        "prefix": "lbTitleFontAspectF",
        "body": "lbTitleFontAspectF"
    },
    "lbTitleFontColor": {
        "prefix": "lbTitleFontColor",
        "body": "lbTitleFontColor"
    },
    "lbTitleFontHeightF": {
        "prefix": "lbTitleFontHeightF",
        "body": "lbTitleFontHeightF"
    },
    "lbTitleFontQuality": {
        "prefix": "lbTitleFontQuality",
        "body": "lbTitleFontQuality"
    },
    "lbTitleFontThicknessF": {
        "prefix": "lbTitleFontThicknessF",
        "body": "lbTitleFontThicknessF"
    },
    "lbTitleFuncCode": {
        "prefix": "lbTitleFuncCode",
        "body": "lbTitleFuncCode"
    },
    "lbTitleJust": {
        "prefix": "lbTitleJust",
        "body": "lbTitleJust"
    },
    "lbTitleOffsetF": {
        "prefix": "lbTitleOffsetF",
        "body": "lbTitleOffsetF"
    },
    "lbTitleOn": {
        "prefix": "lbTitleOn",
        "body": "lbTitleOn"
    },
    "lbTitlePosition": {
        "prefix": "lbTitlePosition",
        "body": "lbTitlePosition"
    },
    "lbTitleString": {
        "prefix": "lbTitleString",
        "body": "lbTitleString"
    },
    "lbTopMarginF": {
        "prefix": "lbTopMarginF",
        "body": "lbTopMarginF"
    },
    "lgAutoManage": {
        "prefix": "lgAutoManage",
        "body": "lgAutoManage"
    },
    "lgBottomMarginF": {
        "prefix": "lgBottomMarginF",
        "body": "lgBottomMarginF"
    },
    "lgBoxBackground": {
        "prefix": "lgBoxBackground",
        "body": "lgBoxBackground"
    },
    "lgBoxLineColor": {
        "prefix": "lgBoxLineColor",
        "body": "lgBoxLineColor"
    },
    "lgBoxLineDashPattern": {
        "prefix": "lgBoxLineDashPattern",
        "body": "lgBoxLineDashPattern"
    },
    "lgBoxLineDashSegLenF": {
        "prefix": "lgBoxLineDashSegLenF",
        "body": "lgBoxLineDashSegLenF"
    },
    "lgBoxLineThicknessF": {
        "prefix": "lgBoxLineThicknessF",
        "body": "lgBoxLineThicknessF"
    },
    "lgBoxLinesOn": {
        "prefix": "lgBoxLinesOn",
        "body": "lgBoxLinesOn"
    },
    "lgBoxMajorExtentF": {
        "prefix": "lgBoxMajorExtentF",
        "body": "lgBoxMajorExtentF"
    },
    "lgBoxMinorExtentF": {
        "prefix": "lgBoxMinorExtentF",
        "body": "lgBoxMinorExtentF"
    },
    "lgDashIndex": {
        "prefix": "lgDashIndex",
        "body": "lgDashIndex"
    },
    "lgDashIndexes": {
        "prefix": "lgDashIndexes",
        "body": "lgDashIndexes"
    },
    "lgItemCount": {
        "prefix": "lgItemCount",
        "body": "lgItemCount"
    },
    "lgItemOrder": {
        "prefix": "lgItemOrder",
        "body": "lgItemOrder"
    },
    "lgItemPlacement": {
        "prefix": "lgItemPlacement",
        "body": "lgItemPlacement"
    },
    "lgItemPositions": {
        "prefix": "lgItemPositions",
        "body": "lgItemPositions"
    },
    "lgItemType": {
        "prefix": "lgItemType",
        "body": "lgItemType"
    },
    "lgItemTypes": {
        "prefix": "lgItemTypes",
        "body": "lgItemTypes"
    },
    "lgJustification": {
        "prefix": "lgJustification",
        "body": "lgJustification"
    },
    "lgLabelAlignment": {
        "prefix": "lgLabelAlignment",
        "body": "lgLabelAlignment"
    },
    "lgLabelAngleF": {
        "prefix": "lgLabelAngleF",
        "body": "lgLabelAngleF"
    },
    "lgLabelAutoStride": {
        "prefix": "lgLabelAutoStride",
        "body": "lgLabelAutoStride"
    },
    "lgLabelConstantSpacingF": {
        "prefix": "lgLabelConstantSpacingF",
        "body": "lgLabelConstantSpacingF"
    },
    "lgLabelDirection": {
        "prefix": "lgLabelDirection",
        "body": "lgLabelDirection"
    },
    "lgLabelFont": {
        "prefix": "lgLabelFont",
        "body": "lgLabelFont"
    },
    "lgLabelFontAspectF": {
        "prefix": "lgLabelFontAspectF",
        "body": "lgLabelFontAspectF"
    },
    "lgLabelFontColor": {
        "prefix": "lgLabelFontColor",
        "body": "lgLabelFontColor"
    },
    "lgLabelFontHeightF": {
        "prefix": "lgLabelFontHeightF",
        "body": "lgLabelFontHeightF"
    },
    "lgLabelFontQuality": {
        "prefix": "lgLabelFontQuality",
        "body": "lgLabelFontQuality"
    },
    "lgLabelFontThicknessF": {
        "prefix": "lgLabelFontThicknessF",
        "body": "lgLabelFontThicknessF"
    },
    "lgLabelFuncCode": {
        "prefix": "lgLabelFuncCode",
        "body": "lgLabelFuncCode"
    },
    "lgLabelJust": {
        "prefix": "lgLabelJust",
        "body": "lgLabelJust"
    },
    "lgLabelOffsetF": {
        "prefix": "lgLabelOffsetF",
        "body": "lgLabelOffsetF"
    },
    "lgLabelPosition": {
        "prefix": "lgLabelPosition",
        "body": "lgLabelPosition"
    },
    "lgLabelStride": {
        "prefix": "lgLabelStride",
        "body": "lgLabelStride"
    },
    "lgLabelStrings": {
        "prefix": "lgLabelStrings",
        "body": "lgLabelStrings"
    },
    "lgLabelsOn": {
        "prefix": "lgLabelsOn",
        "body": "lgLabelsOn"
    },
    "lgLeftMarginF": {
        "prefix": "lgLeftMarginF",
        "body": "lgLeftMarginF"
    },
    "lgLegendOn": {
        "prefix": "lgLegendOn",
        "body": "lgLegendOn"
    },
    "lgLineColor": {
        "prefix": "lgLineColor",
        "body": "lgLineColor"
    },
    "lgLineColors": {
        "prefix": "lgLineColors",
        "body": "lgLineColors"
    },
    "lgLineDashSegLenF": {
        "prefix": "lgLineDashSegLenF",
        "body": "lgLineDashSegLenF"
    },
    "lgLineDashSegLens": {
        "prefix": "lgLineDashSegLens",
        "body": "lgLineDashSegLens"
    },
    "lgLineLabelConstantSpacingF": {
        "prefix": "lgLineLabelConstantSpacingF",
        "body": "lgLineLabelConstantSpacingF"
    },
    "lgLineLabelFont": {
        "prefix": "lgLineLabelFont",
        "body": "lgLineLabelFont"
    },
    "lgLineLabelFontAspectF": {
        "prefix": "lgLineLabelFontAspectF",
        "body": "lgLineLabelFontAspectF"
    },
    "lgLineLabelFontColor": {
        "prefix": "lgLineLabelFontColor",
        "body": "lgLineLabelFontColor"
    },
    "lgLineLabelFontColors": {
        "prefix": "lgLineLabelFontColors",
        "body": "lgLineLabelFontColors"
    },
    "lgLineLabelFontHeightF": {
        "prefix": "lgLineLabelFontHeightF",
        "body": "lgLineLabelFontHeightF"
    },
    "lgLineLabelFontHeights": {
        "prefix": "lgLineLabelFontHeights",
        "body": "lgLineLabelFontHeights"
    },
    "lgLineLabelFontQuality": {
        "prefix": "lgLineLabelFontQuality",
        "body": "lgLineLabelFontQuality"
    },
    "lgLineLabelFontThicknessF": {
        "prefix": "lgLineLabelFontThicknessF",
        "body": "lgLineLabelFontThicknessF"
    },
    "lgLineLabelFuncCode": {
        "prefix": "lgLineLabelFuncCode",
        "body": "lgLineLabelFuncCode"
    },
    "lgLineLabelStrings": {
        "prefix": "lgLineLabelStrings",
        "body": "lgLineLabelStrings"
    },
    "lgLineLabelsOn": {
        "prefix": "lgLineLabelsOn",
        "body": "lgLineLabelsOn"
    },
    "lgLineThicknessF": {
        "prefix": "lgLineThicknessF",
        "body": "lgLineThicknessF"
    },
    "lgLineThicknesses": {
        "prefix": "lgLineThicknesses",
        "body": "lgLineThicknesses"
    },
    "lgMarkerColor": {
        "prefix": "lgMarkerColor",
        "body": "lgMarkerColor"
    },
    "lgMarkerColors": {
        "prefix": "lgMarkerColors",
        "body": "lgMarkerColors"
    },
    "lgMarkerIndex": {
        "prefix": "lgMarkerIndex",
        "body": "lgMarkerIndex"
    },
    "lgMarkerIndexes": {
        "prefix": "lgMarkerIndexes",
        "body": "lgMarkerIndexes"
    },
    "lgMarkerSizeF": {
        "prefix": "lgMarkerSizeF",
        "body": "lgMarkerSizeF"
    },
    "lgMarkerSizes": {
        "prefix": "lgMarkerSizes",
        "body": "lgMarkerSizes"
    },
    "lgMarkerThicknessF": {
        "prefix": "lgMarkerThicknessF",
        "body": "lgMarkerThicknessF"
    },
    "lgMarkerThicknesses": {
        "prefix": "lgMarkerThicknesses",
        "body": "lgMarkerThicknesses"
    },
    "lgMonoDashIndex": {
        "prefix": "lgMonoDashIndex",
        "body": "lgMonoDashIndex"
    },
    "lgMonoItemType": {
        "prefix": "lgMonoItemType",
        "body": "lgMonoItemType"
    },
    "lgMonoLineColor": {
        "prefix": "lgMonoLineColor",
        "body": "lgMonoLineColor"
    },
    "lgMonoLineDashSegLen": {
        "prefix": "lgMonoLineDashSegLen",
        "body": "lgMonoLineDashSegLen"
    },
    "lgMonoLineLabelFontColor": {
        "prefix": "lgMonoLineLabelFontColor",
        "body": "lgMonoLineLabelFontColor"
    },
    "lgMonoLineLabelFontHeight": {
        "prefix": "lgMonoLineLabelFontHeight",
        "body": "lgMonoLineLabelFontHeight"
    },
    "lgMonoLineThickness": {
        "prefix": "lgMonoLineThickness",
        "body": "lgMonoLineThickness"
    },
    "lgMonoMarkerColor": {
        "prefix": "lgMonoMarkerColor",
        "body": "lgMonoMarkerColor"
    },
    "lgMonoMarkerIndex": {
        "prefix": "lgMonoMarkerIndex",
        "body": "lgMonoMarkerIndex"
    },
    "lgMonoMarkerSize": {
        "prefix": "lgMonoMarkerSize",
        "body": "lgMonoMarkerSize"
    },
    "lgMonoMarkerThickness": {
        "prefix": "lgMonoMarkerThickness",
        "body": "lgMonoMarkerThickness"
    },
    "lgOrientation": {
        "prefix": "lgOrientation",
        "body": "lgOrientation"
    },
    "lgPerimColor": {
        "prefix": "lgPerimColor",
        "body": "lgPerimColor"
    },
    "lgPerimDashPattern": {
        "prefix": "lgPerimDashPattern",
        "body": "lgPerimDashPattern"
    },
    "lgPerimDashSegLenF": {
        "prefix": "lgPerimDashSegLenF",
        "body": "lgPerimDashSegLenF"
    },
    "lgPerimFill": {
        "prefix": "lgPerimFill",
        "body": "lgPerimFill"
    },
    "lgPerimFillColor": {
        "prefix": "lgPerimFillColor",
        "body": "lgPerimFillColor"
    },
    "lgPerimOn": {
        "prefix": "lgPerimOn",
        "body": "lgPerimOn"
    },
    "lgPerimThicknessF": {
        "prefix": "lgPerimThicknessF",
        "body": "lgPerimThicknessF"
    },
    "lgRightMarginF": {
        "prefix": "lgRightMarginF",
        "body": "lgRightMarginF"
    },
    "lgTitleAngleF": {
        "prefix": "lgTitleAngleF",
        "body": "lgTitleAngleF"
    },
    "lgTitleConstantSpacingF": {
        "prefix": "lgTitleConstantSpacingF",
        "body": "lgTitleConstantSpacingF"
    },
    "lgTitleDirection": {
        "prefix": "lgTitleDirection",
        "body": "lgTitleDirection"
    },
    "lgTitleExtentF": {
        "prefix": "lgTitleExtentF",
        "body": "lgTitleExtentF"
    },
    "lgTitleFont": {
        "prefix": "lgTitleFont",
        "body": "lgTitleFont"
    },
    "lgTitleFontAspectF": {
        "prefix": "lgTitleFontAspectF",
        "body": "lgTitleFontAspectF"
    },
    "lgTitleFontColor": {
        "prefix": "lgTitleFontColor",
        "body": "lgTitleFontColor"
    },
    "lgTitleFontHeightF": {
        "prefix": "lgTitleFontHeightF",
        "body": "lgTitleFontHeightF"
    },
    "lgTitleFontQuality": {
        "prefix": "lgTitleFontQuality",
        "body": "lgTitleFontQuality"
    },
    "lgTitleFontThicknessF": {
        "prefix": "lgTitleFontThicknessF",
        "body": "lgTitleFontThicknessF"
    },
    "lgTitleFuncCode": {
        "prefix": "lgTitleFuncCode",
        "body": "lgTitleFuncCode"
    },
    "lgTitleJust": {
        "prefix": "lgTitleJust",
        "body": "lgTitleJust"
    },
    "lgTitleOffsetF": {
        "prefix": "lgTitleOffsetF",
        "body": "lgTitleOffsetF"
    },
    "lgTitleOn": {
        "prefix": "lgTitleOn",
        "body": "lgTitleOn"
    },
    "lgTitlePosition": {
        "prefix": "lgTitlePosition",
        "body": "lgTitlePosition"
    },
    "lgTitleString": {
        "prefix": "lgTitleString",
        "body": "lgTitleString"
    },
    "lgTopMarginF": {
        "prefix": "lgTopMarginF",
        "body": "lgTopMarginF"
    },
    "mpAreaGroupCount": {
        "prefix": "mpAreaGroupCount",
        "body": "mpAreaGroupCount"
    },
    "mpAreaMaskingOn": {
        "prefix": "mpAreaMaskingOn",
        "body": "mpAreaMaskingOn"
    },
    "mpAreaNames": {
        "prefix": "mpAreaNames",
        "body": "mpAreaNames"
    },
    "Ncarg4_0": {
        "prefix": "Ncarg4_0",
        "body": "Ncarg4_0"
    },
    "Ncarg4_1": {
        "prefix": "Ncarg4_1",
        "body": "Ncarg4_1"
    },
    "RANGS": {
        "prefix": "RANGS",
        "body": "RANGS"
    },
    "mpAreaTypes": {
        "prefix": "mpAreaTypes",
        "body": "mpAreaTypes"
    },
    "mpBottomAngleF": {
        "prefix": "mpBottomAngleF",
        "body": "mpBottomAngleF"
    },
    "mpBottomMapPosF": {
        "prefix": "mpBottomMapPosF",
        "body": "mpBottomMapPosF"
    },
    "mpBottomNDCF": {
        "prefix": "mpBottomNDCF",
        "body": "mpBottomNDCF"
    },
    "mpBottomNPCF": {
        "prefix": "mpBottomNPCF",
        "body": "mpBottomNPCF"
    },
    "mpBottomPointLatF": {
        "prefix": "mpBottomPointLatF",
        "body": "mpBottomPointLatF"
    },
    "mpBottomPointLonF": {
        "prefix": "mpBottomPointLonF",
        "body": "mpBottomPointLonF"
    },
    "mpBottomWindowF": {
        "prefix": "mpBottomWindowF",
        "body": "mpBottomWindowF"
    },
    "mpCenterLatF": {
        "prefix": "mpCenterLatF",
        "body": "mpCenterLatF"
    },
    "mpCenterLonF": {
        "prefix": "mpCenterLonF",
        "body": "mpCenterLonF"
    },
    "mpCenterRotF": {
        "prefix": "mpCenterRotF",
        "body": "mpCenterRotF"
    },
    "mpCountyLineColor": {
        "prefix": "mpCountyLineColor",
        "body": "mpCountyLineColor"
    },
    "mpCountyLineDashPattern": {
        "prefix": "mpCountyLineDashPattern",
        "body": "mpCountyLineDashPattern"
    },
    "mpCountyLineDashSegLenF": {
        "prefix": "mpCountyLineDashSegLenF",
        "body": "mpCountyLineDashSegLenF"
    },
    "mpCountyLineThicknessF": {
        "prefix": "mpCountyLineThicknessF",
        "body": "mpCountyLineThicknessF"
    },
    "mpDataBaseVersion": {
        "prefix": "mpDataBaseVersion",
        "body": "mpDataBaseVersion"
    },
    "RANGS_GSHHS": {
        "prefix": "RANGS_GSHHS",
        "body": "RANGS_GSHHS"
    },
    "Dynamic": {
        "prefix": "Dynamic",
        "body": "Dynamic"
    },
    "mpDataResolution": {
        "prefix": "mpDataResolution",
        "body": "mpDataResolution"
    },
    "UnspecifiedResolution": {
        "prefix": "UnspecifiedResolution",
        "body": "UnspecifiedResolution"
    },
    "FinestResolution": {
        "prefix": "FinestResolution",
        "body": "FinestResolution"
    },
    "FineResolution": {
        "prefix": "FineResolution",
        "body": "FineResolution"
    },
    "MediumResolution": {
        "prefix": "MediumResolution",
        "body": "MediumResolution"
    },
    "CoarseResolution": {
        "prefix": "CoarseResolution",
        "body": "CoarseResolution"
    },
    "CoarsestResolution": {
        "prefix": "CoarsestResolution",
        "body": "CoarsestResolution"
    },
    "mpDataSetName": {
        "prefix": "mpDataSetName",
        "body": "mpDataSetName"
    },
    "Earth..1": {
        "prefix": "Earth..1",
        "body": "Earth..1"
    },
    "Earth..2": {
        "prefix": "Earth..2",
        "body": "Earth..2"
    },
    "Earth..3": {
        "prefix": "Earth..3",
        "body": "Earth..3"
    },
    "Earth..4": {
        "prefix": "Earth..4",
        "body": "Earth..4"
    },
    "mpDefaultFillColor": {
        "prefix": "mpDefaultFillColor",
        "body": "mpDefaultFillColor"
    },
    "mpDefaultFillPattern": {
        "prefix": "mpDefaultFillPattern",
        "body": "mpDefaultFillPattern"
    },
    "mpDefaultFillScaleF": {
        "prefix": "mpDefaultFillScaleF",
        "body": "mpDefaultFillScaleF"
    },
    "mpDynamicAreaGroups": {
        "prefix": "mpDynamicAreaGroups",
        "body": "mpDynamicAreaGroups"
    },
    "mpEllipticalBoundary": {
        "prefix": "mpEllipticalBoundary",
        "body": "mpEllipticalBoundary"
    },
    "mpFillAreaSpecifiers": {
        "prefix": "mpFillAreaSpecifiers",
        "body": "mpFillAreaSpecifiers"
    },
    "mpFillBoundarySets": {
        "prefix": "mpFillBoundarySets",
        "body": "mpFillBoundarySets"
    },
    "NoBoundaries": {
        "prefix": "NoBoundaries",
        "body": "NoBoundaries"
    },
    "Geophysical": {
        "prefix": "Geophysical",
        "body": "Geophysical"
    },
    "National": {
        "prefix": "National",
        "body": "National"
    },
    "USStates": {
        "prefix": "USStates",
        "body": "USStates"
    },
    "GeophysicalAndUSStates": {
        "prefix": "GeophysicalAndUSStates",
        "body": "GeophysicalAndUSStates"
    },
    "AllBoundaries": {
        "prefix": "AllBoundaries",
        "body": "AllBoundaries"
    },
    "mpFillColor": {
        "prefix": "mpFillColor",
        "body": "mpFillColor"
    },
    "mpFillColors": {
        "prefix": "mpFillColors",
        "body": "mpFillColors"
    },
    "mpFillDotSizeF": {
        "prefix": "mpFillDotSizeF",
        "body": "mpFillDotSizeF"
    },
    "mpFillDrawOrder": {
        "prefix": "mpFillDrawOrder",
        "body": "mpFillDrawOrder"
    },
    "mpFillOn": {
        "prefix": "mpFillOn",
        "body": "mpFillOn"
    },
    "mpFillPatternBackground": {
        "prefix": "mpFillPatternBackground",
        "body": "mpFillPatternBackground"
    },
    "mpFillPattern": {
        "prefix": "mpFillPattern",
        "body": "mpFillPattern"
    },
    "mpFillPatterns": {
        "prefix": "mpFillPatterns",
        "body": "mpFillPatterns"
    },
    "mpFillScaleF": {
        "prefix": "mpFillScaleF",
        "body": "mpFillScaleF"
    },
    "mpFillScales": {
        "prefix": "mpFillScales",
        "body": "mpFillScales"
    },
    "mpFixedAreaGroups": {
        "prefix": "mpFixedAreaGroups",
        "body": "mpFixedAreaGroups"
    },
    "mpGeophysicalLineColor": {
        "prefix": "mpGeophysicalLineColor",
        "body": "mpGeophysicalLineColor"
    },
    "mpGeophysicalLineDashPattern": {
        "prefix": "mpGeophysicalLineDashPattern",
        "body": "mpGeophysicalLineDashPattern"
    },
    "mpGeophysicalLineDashSegLenF": {
        "prefix": "mpGeophysicalLineDashSegLenF",
        "body": "mpGeophysicalLineDashSegLenF"
    },
    "mpGeophysicalLineThicknessF": {
        "prefix": "mpGeophysicalLineThicknessF",
        "body": "mpGeophysicalLineThicknessF"
    },
    "mpGreatCircleLinesOn": {
        "prefix": "mpGreatCircleLinesOn",
        "body": "mpGreatCircleLinesOn"
    },
    "mpGridAndLimbDrawOrder": {
        "prefix": "mpGridAndLimbDrawOrder",
        "body": "mpGridAndLimbDrawOrder"
    },
    "mpGridAndLimbOn": {
        "prefix": "mpGridAndLimbOn",
        "body": "mpGridAndLimbOn"
    },
    "mpGridLatSpacingF": {
        "prefix": "mpGridLatSpacingF",
        "body": "mpGridLatSpacingF"
    },
    "mpGridLineColor": {
        "prefix": "mpGridLineColor",
        "body": "mpGridLineColor"
    },
    "mpGridLineDashPattern": {
        "prefix": "mpGridLineDashPattern",
        "body": "mpGridLineDashPattern"
    },
    "mpGridLineDashSegLenF": {
        "prefix": "mpGridLineDashSegLenF",
        "body": "mpGridLineDashSegLenF"
    },
    "mpGridLineThicknessF": {
        "prefix": "mpGridLineThicknessF",
        "body": "mpGridLineThicknessF"
    },
    "mpGridLonSpacingF": {
        "prefix": "mpGridLonSpacingF",
        "body": "mpGridLonSpacingF"
    },
    "mpGridMaskMode": {
        "prefix": "mpGridMaskMode",
        "body": "mpGridMaskMode"
    },
    "MaskNone": {
        "prefix": "MaskNone",
        "body": "MaskNone"
    },
    "MaskOcean": {
        "prefix": "MaskOcean",
        "body": "MaskOcean"
    },
    "MaskNotOcean": {
        "prefix": "MaskNotOcean",
        "body": "MaskNotOcean"
    },
    "MaskLand": {
        "prefix": "MaskLand",
        "body": "MaskLand"
    },
    "MaskNotLand": {
        "prefix": "MaskNotLand",
        "body": "MaskNotLand"
    },
    "MaskFillArea": {
        "prefix": "MaskFillArea",
        "body": "MaskFillArea"
    },
    "MaskMaskArea": {
        "prefix": "MaskMaskArea",
        "body": "MaskMaskArea"
    },
    "mpGridMaxLatF": {
        "prefix": "mpGridMaxLatF",
        "body": "mpGridMaxLatF"
    },
    "mpGridPolarLonSpacingF": {
        "prefix": "mpGridPolarLonSpacingF",
        "body": "mpGridPolarLonSpacingF"
    },
    "mpGridSpacingF": {
        "prefix": "mpGridSpacingF",
        "body": "mpGridSpacingF"
    },
    "mpInlandWaterFillColor": {
        "prefix": "mpInlandWaterFillColor",
        "body": "mpInlandWaterFillColor"
    },
    "mpInlandWaterFillPattern": {
        "prefix": "mpInlandWaterFillPattern",
        "body": "mpInlandWaterFillPattern"
    },
    "mpInlandWaterFillScaleF": {
        "prefix": "mpInlandWaterFillScaleF",
        "body": "mpInlandWaterFillScaleF"
    },
    "mpLabelDrawOrder": {
        "prefix": "mpLabelDrawOrder",
        "body": "mpLabelDrawOrder"
    },
    "mpLabelFontColor": {
        "prefix": "mpLabelFontColor",
        "body": "mpLabelFontColor"
    },
    "mpLabelFontHeightF": {
        "prefix": "mpLabelFontHeightF",
        "body": "mpLabelFontHeightF"
    },
    "mpLabelsOn": {
        "prefix": "mpLabelsOn",
        "body": "mpLabelsOn"
    },
    "mpLambertMeridianF": {
        "prefix": "mpLambertMeridianF",
        "body": "mpLambertMeridianF"
    },
    "mpLambertParallel1F": {
        "prefix": "mpLambertParallel1F",
        "body": "mpLambertParallel1F"
    },
    "mpLambertParallel2F": {
        "prefix": "mpLambertParallel2F",
        "body": "mpLambertParallel2F"
    },
    "mpLandFillColor": {
        "prefix": "mpLandFillColor",
        "body": "mpLandFillColor"
    },
    "mpLandFillPattern": {
        "prefix": "mpLandFillPattern",
        "body": "mpLandFillPattern"
    },
    "mpLandFillScaleF": {
        "prefix": "mpLandFillScaleF",
        "body": "mpLandFillScaleF"
    },
    "mpLeftAngleF": {
        "prefix": "mpLeftAngleF",
        "body": "mpLeftAngleF"
    },
    "mpLeftCornerLatF": {
        "prefix": "mpLeftCornerLatF",
        "body": "mpLeftCornerLatF"
    },
    "mpLeftCornerLonF": {
        "prefix": "mpLeftCornerLonF",
        "body": "mpLeftCornerLonF"
    },
    "mpLeftMapPosF": {
        "prefix": "mpLeftMapPosF",
        "body": "mpLeftMapPosF"
    },
    "mpLeftNDCF": {
        "prefix": "mpLeftNDCF",
        "body": "mpLeftNDCF"
    },
    "mpLeftNPCF": {
        "prefix": "mpLeftNPCF",
        "body": "mpLeftNPCF"
    },
    "mpLeftPointLatF": {
        "prefix": "mpLeftPointLatF",
        "body": "mpLeftPointLatF"
    },
    "mpLeftPointLonF": {
        "prefix": "mpLeftPointLonF",
        "body": "mpLeftPointLonF"
    },
    "mpLeftWindowF": {
        "prefix": "mpLeftWindowF",
        "body": "mpLeftWindowF"
    },
    "mpLimbLineColor": {
        "prefix": "mpLimbLineColor",
        "body": "mpLimbLineColor"
    },
    "mpLimbLineDashPattern": {
        "prefix": "mpLimbLineDashPattern",
        "body": "mpLimbLineDashPattern"
    },
    "mpLimbLineDashSegLenF": {
        "prefix": "mpLimbLineDashSegLenF",
        "body": "mpLimbLineDashSegLenF"
    },
    "mpLimbLineThicknessF": {
        "prefix": "mpLimbLineThicknessF",
        "body": "mpLimbLineThicknessF"
    },
    "mpLimitMode": {
        "prefix": "mpLimitMode",
        "body": "mpLimitMode"
    },
    "MaximalArea": {
        "prefix": "MaximalArea",
        "body": "MaximalArea"
    },
    "LatLon": {
        "prefix": "LatLon",
        "body": "LatLon"
    },
    "Angles": {
        "prefix": "Angles",
        "body": "Angles"
    },
    "Orthographic": {
        "prefix": "Orthographic",
        "body": "Orthographic"
    },
    "Stereographic": {
        "prefix": "Stereographic",
        "body": "Stereographic"
    },
    "LambertEqualArea": {
        "prefix": "LambertEqualArea",
        "body": "LambertEqualArea"
    },
    "Gnomonic": {
        "prefix": "Gnomonic",
        "body": "Gnomonic"
    },
    "AzimuthalEquidistant": {
        "prefix": "AzimuthalEquidistant",
        "body": "AzimuthalEquidistant"
    },
    "Satellite": {
        "prefix": "Satellite",
        "body": "Satellite"
    },
    "Mollweide": {
        "prefix": "Mollweide",
        "body": "Mollweide"
    },
    "Mercator": {
        "prefix": "Mercator",
        "body": "Mercator"
    },
    "CylindricalEquidistant": {
        "prefix": "CylindricalEquidistant",
        "body": "CylindricalEquidistant"
    },
    "LambertConformal": {
        "prefix": "LambertConformal",
        "body": "LambertConformal"
    },
    "Robinson": {
        "prefix": "Robinson",
        "body": "Robinson"
    },
    "CylindricalEqualArea": {
        "prefix": "CylindricalEqualArea",
        "body": "CylindricalEqualArea"
    },
    "RotatedMercator": {
        "prefix": "RotatedMercator",
        "body": "RotatedMercator"
    },
    "NPC": {
        "prefix": "NPC",
        "body": "NPC"
    },
    "NDC": {
        "prefix": "NDC",
        "body": "NDC"
    },
    "Corners": {
        "prefix": "Corners",
        "body": "Corners"
    },
    "Points": {
        "prefix": "Points",
        "body": "Points"
    },
    "Window": {
        "prefix": "Window",
        "body": "Window"
    },
    "mpMaskAreaSpecifiers": {
        "prefix": "mpMaskAreaSpecifiers",
        "body": "mpMaskAreaSpecifiers"
    },
    "mpMaskOutlineSpecifiers": {
        "prefix": "mpMaskOutlineSpecifiers",
        "body": "mpMaskOutlineSpecifiers"
    },
    "mpMaxLatF": {
        "prefix": "mpMaxLatF",
        "body": "mpMaxLatF"
    },
    "mpMaxLonF": {
        "prefix": "mpMaxLonF",
        "body": "mpMaxLonF"
    },
    "mpMinLatF": {
        "prefix": "mpMinLatF",
        "body": "mpMinLatF"
    },
    "mpMinLonF": {
        "prefix": "mpMinLonF",
        "body": "mpMinLonF"
    },
    "mpMonoFillColor": {
        "prefix": "mpMonoFillColor",
        "body": "mpMonoFillColor"
    },
    "mpMonoFillPattern": {
        "prefix": "mpMonoFillPattern",
        "body": "mpMonoFillPattern"
    },
    "mpMonoFillScale": {
        "prefix": "mpMonoFillScale",
        "body": "mpMonoFillScale"
    },
    "mpNationalLineColor": {
        "prefix": "mpNationalLineColor",
        "body": "mpNationalLineColor"
    },
    "mpNationalLineDashPattern": {
        "prefix": "mpNationalLineDashPattern",
        "body": "mpNationalLineDashPattern"
    },
    "mpNationalLineDashSegLenF": {
        "prefix": "mpNationalLineDashSegLenF",
        "body": "mpNationalLineDashSegLenF"
    },
    "mpNationalLineThicknessF": {
        "prefix": "mpNationalLineThicknessF",
        "body": "mpNationalLineThicknessF"
    },
    "mpOceanFillColor": {
        "prefix": "mpOceanFillColor",
        "body": "mpOceanFillColor"
    },
    "mpOceanFillPattern": {
        "prefix": "mpOceanFillPattern",
        "body": "mpOceanFillPattern"
    },
    "mpOceanFillScaleF": {
        "prefix": "mpOceanFillScaleF",
        "body": "mpOceanFillScaleF"
    },
    "mpOutlineBoundarySets": {
        "prefix": "mpOutlineBoundarySets",
        "body": "mpOutlineBoundarySets"
    },
    "mpOutlineDrawOrder": {
        "prefix": "mpOutlineDrawOrder",
        "body": "mpOutlineDrawOrder"
    },
    "mpOutlineMaskingOn": {
        "prefix": "mpOutlineMaskingOn",
        "body": "mpOutlineMaskingOn"
    },
    "mpOutlineOn": {
        "prefix": "mpOutlineOn",
        "body": "mpOutlineOn"
    },
    "mpOutlineSpecifiers": {
        "prefix": "mpOutlineSpecifiers",
        "body": "mpOutlineSpecifiers"
    },
    "mpPerimDrawOrder": {
        "prefix": "mpPerimDrawOrder",
        "body": "mpPerimDrawOrder"
    },
    "mpPerimLineColor": {
        "prefix": "mpPerimLineColor",
        "body": "mpPerimLineColor"
    },
    "mpPerimLineDashPattern": {
        "prefix": "mpPerimLineDashPattern",
        "body": "mpPerimLineDashPattern"
    },
    "mpPerimLineDashSegLenF": {
        "prefix": "mpPerimLineDashSegLenF",
        "body": "mpPerimLineDashSegLenF"
    },
    "mpPerimLineThicknessF": {
        "prefix": "mpPerimLineThicknessF",
        "body": "mpPerimLineThicknessF"
    },
    "mpPerimOn": {
        "prefix": "mpPerimOn",
        "body": "mpPerimOn"
    },
    "mpPolyMode": {
        "prefix": "mpPolyMode",
        "body": "mpPolyMode"
    },
    "mpProjection": {
        "prefix": "mpProjection",
        "body": "mpProjection"
    },
    "PseudoMollweide": {
        "prefix": "PseudoMollweide",
        "body": "PseudoMollweide"
    },
    "Aitoff": {
        "prefix": "Aitoff",
        "body": "Aitoff"
    },
    "Hammer": {
        "prefix": "Hammer",
        "body": "Hammer"
    },
    "WinkelTripel": {
        "prefix": "WinkelTripel",
        "body": "WinkelTripel"
    },
    "mpProvincialLineColor": {
        "prefix": "mpProvincialLineColor",
        "body": "mpProvincialLineColor"
    },
    "mpProvincialLineDashPattern": {
        "prefix": "mpProvincialLineDashPattern",
        "body": "mpProvincialLineDashPattern"
    },
    "mpProvincialLineDashSegLenF": {
        "prefix": "mpProvincialLineDashSegLenF",
        "body": "mpProvincialLineDashSegLenF"
    },
    "mpProvincialLineThicknessF": {
        "prefix": "mpProvincialLineThicknessF",
        "body": "mpProvincialLineThicknessF"
    },
    "mpRelativeCenterLat": {
        "prefix": "mpRelativeCenterLat",
        "body": "mpRelativeCenterLat"
    },
    "mpRelativeCenterLon": {
        "prefix": "mpRelativeCenterLon",
        "body": "mpRelativeCenterLon"
    },
    "mpRightAngleF": {
        "prefix": "mpRightAngleF",
        "body": "mpRightAngleF"
    },
    "mpRightCornerLatF": {
        "prefix": "mpRightCornerLatF",
        "body": "mpRightCornerLatF"
    },
    "mpRightCornerLonF": {
        "prefix": "mpRightCornerLonF",
        "body": "mpRightCornerLonF"
    },
    "mpRightMapPosF": {
        "prefix": "mpRightMapPosF",
        "body": "mpRightMapPosF"
    },
    "mpRightNDCF": {
        "prefix": "mpRightNDCF",
        "body": "mpRightNDCF"
    },
    "mpRightNPCF": {
        "prefix": "mpRightNPCF",
        "body": "mpRightNPCF"
    },
    "mpRightPointLatF": {
        "prefix": "mpRightPointLatF",
        "body": "mpRightPointLatF"
    },
    "mpRightPointLonF": {
        "prefix": "mpRightPointLonF",
        "body": "mpRightPointLonF"
    },
    "mpRightWindowF": {
        "prefix": "mpRightWindowF",
        "body": "mpRightWindowF"
    },
    "mpSatelliteAngle1F": {
        "prefix": "mpSatelliteAngle1F",
        "body": "mpSatelliteAngle1F"
    },
    "mpSatelliteAngle2F": {
        "prefix": "mpSatelliteAngle2F",
        "body": "mpSatelliteAngle2F"
    },
    "mpSatelliteDistF": {
        "prefix": "mpSatelliteDistF",
        "body": "mpSatelliteDistF"
    },
    "mpShapeMode": {
        "prefix": "mpShapeMode",
        "body": "mpShapeMode"
    },
    "FreeAspect": {
        "prefix": "FreeAspect",
        "body": "FreeAspect"
    },
    "FixedAspectFitBB": {
        "prefix": "FixedAspectFitBB",
        "body": "FixedAspectFitBB"
    },
    "FixedAspectNoFitBB": {
        "prefix": "FixedAspectNoFitBB",
        "body": "FixedAspectNoFitBB"
    },
    "mpSpecifiedFillColors": {
        "prefix": "mpSpecifiedFillColors",
        "body": "mpSpecifiedFillColors"
    },
    "mpSpecifiedFillDirectIndexing": {
        "prefix": "mpSpecifiedFillDirectIndexing",
        "body": "mpSpecifiedFillDirectIndexing"
    },
    "mpSpecifiedFillPatterns": {
        "prefix": "mpSpecifiedFillPatterns",
        "body": "mpSpecifiedFillPatterns"
    },
    "mpSpecifiedFillPriority": {
        "prefix": "mpSpecifiedFillPriority",
        "body": "mpSpecifiedFillPriority"
    },
    "GeophysicalPriority": {
        "prefix": "GeophysicalPriority",
        "body": "GeophysicalPriority"
    },
    "PoliticalPriority": {
        "prefix": "PoliticalPriority",
        "body": "PoliticalPriority"
    },
    "mpSpecifiedFillScales": {
        "prefix": "mpSpecifiedFillScales",
        "body": "mpSpecifiedFillScales"
    },
    "mpTopAngleF": {
        "prefix": "mpTopAngleF",
        "body": "mpTopAngleF"
    },
    "mpTopMapPosF": {
        "prefix": "mpTopMapPosF",
        "body": "mpTopMapPosF"
    },
    "mpTopNDCF": {
        "prefix": "mpTopNDCF",
        "body": "mpTopNDCF"
    },
    "mpTopNPCF": {
        "prefix": "mpTopNPCF",
        "body": "mpTopNPCF"
    },
    "mpTopPointLatF": {
        "prefix": "mpTopPointLatF",
        "body": "mpTopPointLatF"
    },
    "mpTopPointLonF": {
        "prefix": "mpTopPointLonF",
        "body": "mpTopPointLonF"
    },
    "mpTopWindowF": {
        "prefix": "mpTopWindowF",
        "body": "mpTopWindowF"
    },
    "mpUSStateLineColor": {
        "prefix": "mpUSStateLineColor",
        "body": "mpUSStateLineColor"
    },
    "mpUSStateLineDashPattern": {
        "prefix": "mpUSStateLineDashPattern",
        "body": "mpUSStateLineDashPattern"
    },
    "mpUSStateLineDashSegLenF": {
        "prefix": "mpUSStateLineDashSegLenF",
        "body": "mpUSStateLineDashSegLenF"
    },
    "mpUSStateLineThicknessF": {
        "prefix": "mpUSStateLineThicknessF",
        "body": "mpUSStateLineThicknessF"
    },
    "pmAnnoManagers": {
        "prefix": "pmAnnoManagers",
        "body": "pmAnnoManagers"
    },
    "pmAnnoViews": {
        "prefix": "pmAnnoViews",
        "body": "pmAnnoViews"
    },
    "pmLabelBarDisplayMode": {
        "prefix": "pmLabelBarDisplayMode",
        "body": "pmLabelBarDisplayMode"
    },
    "NoCreate": {
        "prefix": "NoCreate",
        "body": "NoCreate"
    },
    "Never": {
        "prefix": "Never",
        "body": "Never"
    },
    "Always": {
        "prefix": "Always",
        "body": "Always"
    },
    "Conditional": {
        "prefix": "Conditional",
        "body": "Conditional"
    },
    "pmLabelBarHeightF": {
        "prefix": "pmLabelBarHeightF",
        "body": "pmLabelBarHeightF"
    },
    "pmLabelBarKeepAspect": {
        "prefix": "pmLabelBarKeepAspect",
        "body": "pmLabelBarKeepAspect"
    },
    "pmLabelBarOrthogonalPosF": {
        "prefix": "pmLabelBarOrthogonalPosF",
        "body": "pmLabelBarOrthogonalPosF"
    },
    "pmLabelBarParallelPosF": {
        "prefix": "pmLabelBarParallelPosF",
        "body": "pmLabelBarParallelPosF"
    },
    "pmLabelBarSide": {
        "prefix": "pmLabelBarSide",
        "body": "pmLabelBarSide"
    },
    "pmLabelBarWidthF": {
        "prefix": "pmLabelBarWidthF",
        "body": "pmLabelBarWidthF"
    },
    "pmLabelBarZone": {
        "prefix": "pmLabelBarZone",
        "body": "pmLabelBarZone"
    },
    "pmLegendDisplayMode": {
        "prefix": "pmLegendDisplayMode",
        "body": "pmLegendDisplayMode"
    },
    "pmLegendHeightF": {
        "prefix": "pmLegendHeightF",
        "body": "pmLegendHeightF"
    },
    "pmLegendKeepAspect": {
        "prefix": "pmLegendKeepAspect",
        "body": "pmLegendKeepAspect"
    },
    "pmLegendOrthogonalPosF": {
        "prefix": "pmLegendOrthogonalPosF",
        "body": "pmLegendOrthogonalPosF"
    },
    "pmLegendParallelPosF": {
        "prefix": "pmLegendParallelPosF",
        "body": "pmLegendParallelPosF"
    },
    "pmLegendSide": {
        "prefix": "pmLegendSide",
        "body": "pmLegendSide"
    },
    "pmLegendWidthF": {
        "prefix": "pmLegendWidthF",
        "body": "pmLegendWidthF"
    },
    "pmLegendZone": {
        "prefix": "pmLegendZone",
        "body": "pmLegendZone"
    },
    "pmOverlaySequenceIds": {
        "prefix": "pmOverlaySequenceIds",
        "body": "pmOverlaySequenceIds"
    },
    "pmTickMarkDisplayMode": {
        "prefix": "pmTickMarkDisplayMode",
        "body": "pmTickMarkDisplayMode"
    },
    "pmTickMarkZone": {
        "prefix": "pmTickMarkZone",
        "body": "pmTickMarkZone"
    },
    "pmTitleDisplayMode": {
        "prefix": "pmTitleDisplayMode",
        "body": "pmTitleDisplayMode"
    },
    "pmTitleZone": {
        "prefix": "pmTitleZone",
        "body": "pmTitleZone"
    },
    "prGraphicStyle": {
        "prefix": "prGraphicStyle",
        "body": "prGraphicStyle"
    },
    "prPolyType": {
        "prefix": "prPolyType",
        "body": "prPolyType"
    },
    "Polyline": {
        "prefix": "Polyline",
        "body": "Polyline"
    },
    "Polygon": {
        "prefix": "Polygon",
        "body": "Polygon"
    },
    "Polymarker": {
        "prefix": "Polymarker",
        "body": "Polymarker"
    },
    "prXArray": {
        "prefix": "prXArray",
        "body": "prXArray"
    },
    "prYArray": {
        "prefix": "prYArray",
        "body": "prYArray"
    },
    "sfCopyData": {
        "prefix": "sfCopyData",
        "body": "sfCopyData"
    },
    "sfDataArray": {
        "prefix": "sfDataArray",
        "body": "sfDataArray"
    },
    "sfDataMaxV": {
        "prefix": "sfDataMaxV",
        "body": "sfDataMaxV"
    },
    "sfDataMinV": {
        "prefix": "sfDataMinV",
        "body": "sfDataMinV"
    },
    "sfElementNodes": {
        "prefix": "sfElementNodes",
        "body": "sfElementNodes"
    },
    "sfExchangeDimensions": {
        "prefix": "sfExchangeDimensions",
        "body": "sfExchangeDimensions"
    },
    "sfFirstNodeIndex": {
        "prefix": "sfFirstNodeIndex",
        "body": "sfFirstNodeIndex"
    },
    "sfMissingValueV": {
        "prefix": "sfMissingValueV",
        "body": "sfMissingValueV"
    },
    "sfXArray": {
        "prefix": "sfXArray",
        "body": "sfXArray"
    },
    "sfXCActualEndF": {
        "prefix": "sfXCActualEndF",
        "body": "sfXCActualEndF"
    },
    "sfXCActualStartF": {
        "prefix": "sfXCActualStartF",
        "body": "sfXCActualStartF"
    },
    "sfXCEndIndex": {
        "prefix": "sfXCEndIndex",
        "body": "sfXCEndIndex"
    },
    "sfXCEndSubsetV": {
        "prefix": "sfXCEndSubsetV",
        "body": "sfXCEndSubsetV"
    },
    "sfXCEndV": {
        "prefix": "sfXCEndV",
        "body": "sfXCEndV"
    },
    "sfXCStartIndex": {
        "prefix": "sfXCStartIndex",
        "body": "sfXCStartIndex"
    },
    "sfXCStartSubsetV": {
        "prefix": "sfXCStartSubsetV",
        "body": "sfXCStartSubsetV"
    },
    "sfXCStartV": {
        "prefix": "sfXCStartV",
        "body": "sfXCStartV"
    },
    "sfXCStride": {
        "prefix": "sfXCStride",
        "body": "sfXCStride"
    },
    "sfXCellBounds": {
        "prefix": "sfXCellBounds",
        "body": "sfXCellBounds"
    },
    "sfYArray": {
        "prefix": "sfYArray",
        "body": "sfYArray"
    },
    "sfYCActualEndF": {
        "prefix": "sfYCActualEndF",
        "body": "sfYCActualEndF"
    },
    "sfYCActualStartF": {
        "prefix": "sfYCActualStartF",
        "body": "sfYCActualStartF"
    },
    "sfYCEndIndex": {
        "prefix": "sfYCEndIndex",
        "body": "sfYCEndIndex"
    },
    "sfYCEndSubsetV": {
        "prefix": "sfYCEndSubsetV",
        "body": "sfYCEndSubsetV"
    },
    "sfYCEndV": {
        "prefix": "sfYCEndV",
        "body": "sfYCEndV"
    },
    "sfYCStartIndex": {
        "prefix": "sfYCStartIndex",
        "body": "sfYCStartIndex"
    },
    "sfYCStartSubsetV": {
        "prefix": "sfYCStartSubsetV",
        "body": "sfYCStartSubsetV"
    },
    "sfYCStartV": {
        "prefix": "sfYCStartV",
        "body": "sfYCStartV"
    },
    "sfYCStride": {
        "prefix": "sfYCStride",
        "body": "sfYCStride"
    },
    "sfYCellBounds": {
        "prefix": "sfYCellBounds",
        "body": "sfYCellBounds"
    },
    "stArrowLengthF": {
        "prefix": "stArrowLengthF",
        "body": "stArrowLengthF"
    },
    "stArrowStride": {
        "prefix": "stArrowStride",
        "body": "stArrowStride"
    },
    "stCrossoverCheckCount": {
        "prefix": "stCrossoverCheckCount",
        "body": "stCrossoverCheckCount"
    },
    "stExplicitLabelBarLabelsOn": {
        "prefix": "stExplicitLabelBarLabelsOn",
        "body": "stExplicitLabelBarLabelsOn"
    },
    "stLabelBarEndLabelsOn": {
        "prefix": "stLabelBarEndLabelsOn",
        "body": "stLabelBarEndLabelsOn"
    },
    "stLabelFormat": {
        "prefix": "stLabelFormat",
        "body": "stLabelFormat"
    },
    "stLengthCheckCount": {
        "prefix": "stLengthCheckCount",
        "body": "stLengthCheckCount"
    },
    "stLevelColors": {
        "prefix": "stLevelColors",
        "body": "stLevelColors"
    },
    "stLevelCount": {
        "prefix": "stLevelCount",
        "body": "stLevelCount"
    },
    "stLevelPalette": {
        "prefix": "stLevelPalette",
        "body": "stLevelPalette"
    },
    "stLevelSelectionMode": {
        "prefix": "stLevelSelectionMode",
        "body": "stLevelSelectionMode"
    },
    "stLevelSpacingF": {
        "prefix": "stLevelSpacingF",
        "body": "stLevelSpacingF"
    },
    "stLevels": {
        "prefix": "stLevels",
        "body": "stLevels"
    },
    "stLineColor": {
        "prefix": "stLineColor",
        "body": "stLineColor"
    },
    "stLineOpacityF": {
        "prefix": "stLineOpacityF",
        "body": "stLineOpacityF"
    },
    "stLineStartStride": {
        "prefix": "stLineStartStride",
        "body": "stLineStartStride"
    },
    "stLineThicknessF": {
        "prefix": "stLineThicknessF",
        "body": "stLineThicknessF"
    },
    "stMapDirection": {
        "prefix": "stMapDirection",
        "body": "stMapDirection"
    },
    "stMaxLevelCount": {
        "prefix": "stMaxLevelCount",
        "body": "stMaxLevelCount"
    },
    "stMaxLevelValF": {
        "prefix": "stMaxLevelValF",
        "body": "stMaxLevelValF"
    },
    "stMinArrowSpacingF": {
        "prefix": "stMinArrowSpacingF",
        "body": "stMinArrowSpacingF"
    },
    "stMinDistanceF": {
        "prefix": "stMinDistanceF",
        "body": "stMinDistanceF"
    },
    "stMinLevelValF": {
        "prefix": "stMinLevelValF",
        "body": "stMinLevelValF"
    },
    "stMinLineSpacingF": {
        "prefix": "stMinLineSpacingF",
        "body": "stMinLineSpacingF"
    },
    "stMinStepFactorF": {
        "prefix": "stMinStepFactorF",
        "body": "stMinStepFactorF"
    },
    "stMonoLineColor": {
        "prefix": "stMonoLineColor",
        "body": "stMonoLineColor"
    },
    "stNoDataLabelOn": {
        "prefix": "stNoDataLabelOn",
        "body": "stNoDataLabelOn"
    },
    "stNoDataLabelString": {
        "prefix": "stNoDataLabelString",
        "body": "stNoDataLabelString"
    },
    "stScalarFieldData": {
        "prefix": "stScalarFieldData",
        "body": "stScalarFieldData"
    },
    "stScalarMissingValColor": {
        "prefix": "stScalarMissingValColor",
        "body": "stScalarMissingValColor"
    },
    "stSpanLevelPalette": {
        "prefix": "stSpanLevelPalette",
        "body": "stSpanLevelPalette"
    },
    "stStepSizeF": {
        "prefix": "stStepSizeF",
        "body": "stStepSizeF"
    },
    "stStreamlineDrawOrder": {
        "prefix": "stStreamlineDrawOrder",
        "body": "stStreamlineDrawOrder"
    },
    "stUseScalarArray": {
        "prefix": "stUseScalarArray",
        "body": "stUseScalarArray"
    },
    "stVectorFieldData": {
        "prefix": "stVectorFieldData",
        "body": "stVectorFieldData"
    },
    "stZeroFLabelAngleF": {
        "prefix": "stZeroFLabelAngleF",
        "body": "stZeroFLabelAngleF"
    },
    "stZeroFLabelBackgroundColor": {
        "prefix": "stZeroFLabelBackgroundColor",
        "body": "stZeroFLabelBackgroundColor"
    },
    "stZeroFLabelConstantSpacingF": {
        "prefix": "stZeroFLabelConstantSpacingF",
        "body": "stZeroFLabelConstantSpacingF"
    },
    "stZeroFLabelFont": {
        "prefix": "stZeroFLabelFont",
        "body": "stZeroFLabelFont"
    },
    "stZeroFLabelFontAspectF": {
        "prefix": "stZeroFLabelFontAspectF",
        "body": "stZeroFLabelFontAspectF"
    },
    "stZeroFLabelFontColor": {
        "prefix": "stZeroFLabelFontColor",
        "body": "stZeroFLabelFontColor"
    },
    "stZeroFLabelFontHeightF": {
        "prefix": "stZeroFLabelFontHeightF",
        "body": "stZeroFLabelFontHeightF"
    },
    "stZeroFLabelFontQuality": {
        "prefix": "stZeroFLabelFontQuality",
        "body": "stZeroFLabelFontQuality"
    },
    "stZeroFLabelFontThicknessF": {
        "prefix": "stZeroFLabelFontThicknessF",
        "body": "stZeroFLabelFontThicknessF"
    },
    "stZeroFLabelFuncCode": {
        "prefix": "stZeroFLabelFuncCode",
        "body": "stZeroFLabelFuncCode"
    },
    "stZeroFLabelJust": {
        "prefix": "stZeroFLabelJust",
        "body": "stZeroFLabelJust"
    },
    "stZeroFLabelOn": {
        "prefix": "stZeroFLabelOn",
        "body": "stZeroFLabelOn"
    },
    "stZeroFLabelOrthogonalPosF": {
        "prefix": "stZeroFLabelOrthogonalPosF",
        "body": "stZeroFLabelOrthogonalPosF"
    },
    "stZeroFLabelParallelPosF": {
        "prefix": "stZeroFLabelParallelPosF",
        "body": "stZeroFLabelParallelPosF"
    },
    "stZeroFLabelPerimColor": {
        "prefix": "stZeroFLabelPerimColor",
        "body": "stZeroFLabelPerimColor"
    },
    "stZeroFLabelPerimOn": {
        "prefix": "stZeroFLabelPerimOn",
        "body": "stZeroFLabelPerimOn"
    },
    "stZeroFLabelPerimSpaceF": {
        "prefix": "stZeroFLabelPerimSpaceF",
        "body": "stZeroFLabelPerimSpaceF"
    },
    "stZeroFLabelPerimThicknessF": {
        "prefix": "stZeroFLabelPerimThicknessF",
        "body": "stZeroFLabelPerimThicknessF"
    },
    "stZeroFLabelSide": {
        "prefix": "stZeroFLabelSide",
        "body": "stZeroFLabelSide"
    },
    "stZeroFLabelString": {
        "prefix": "stZeroFLabelString",
        "body": "stZeroFLabelString"
    },
    "stZeroFLabelTextDirection": {
        "prefix": "stZeroFLabelTextDirection",
        "body": "stZeroFLabelTextDirection"
    },
    "stZeroFLabelZone": {
        "prefix": "stZeroFLabelZone",
        "body": "stZeroFLabelZone"
    },
    "tfDoNDCOverlay": {
        "prefix": "tfDoNDCOverlay",
        "body": "tfDoNDCOverlay"
    },
    "DataTransform": {
        "prefix": "DataTransform",
        "body": "DataTransform"
    },
    "NDCViewport": {
        "prefix": "NDCViewport",
        "body": "NDCViewport"
    },
    "NDCDataExtent": {
        "prefix": "NDCDataExtent",
        "body": "NDCDataExtent"
    },
    "tfPlotManagerOn": {
        "prefix": "tfPlotManagerOn",
        "body": "tfPlotManagerOn"
    },
    "tfPolyDrawList": {
        "prefix": "tfPolyDrawList",
        "body": "tfPolyDrawList"
    },
    "tfPolyDrawOrder": {
        "prefix": "tfPolyDrawOrder",
        "body": "tfPolyDrawOrder"
    },
    "tiDeltaF": {
        "prefix": "tiDeltaF",
        "body": "tiDeltaF"
    },
    "tiMainAngleF": {
        "prefix": "tiMainAngleF",
        "body": "tiMainAngleF"
    },
    "tiMainConstantSpacingF": {
        "prefix": "tiMainConstantSpacingF",
        "body": "tiMainConstantSpacingF"
    },
    "tiMainDirection": {
        "prefix": "tiMainDirection",
        "body": "tiMainDirection"
    },
    "tiMainFont": {
        "prefix": "tiMainFont",
        "body": "tiMainFont"
    },
    "tiMainFontAspectF": {
        "prefix": "tiMainFontAspectF",
        "body": "tiMainFontAspectF"
    },
    "tiMainFontColor": {
        "prefix": "tiMainFontColor",
        "body": "tiMainFontColor"
    },
    "tiMainFontHeightF": {
        "prefix": "tiMainFontHeightF",
        "body": "tiMainFontHeightF"
    },
    "tiMainFontQuality": {
        "prefix": "tiMainFontQuality",
        "body": "tiMainFontQuality"
    },
    "tiMainFontThicknessF": {
        "prefix": "tiMainFontThicknessF",
        "body": "tiMainFontThicknessF"
    },
    "tiMainFuncCode": {
        "prefix": "tiMainFuncCode",
        "body": "tiMainFuncCode"
    },
    "tiMainJust": {
        "prefix": "tiMainJust",
        "body": "tiMainJust"
    },
    "tiMainOffsetXF": {
        "prefix": "tiMainOffsetXF",
        "body": "tiMainOffsetXF"
    },
    "tiMainOffsetYF": {
        "prefix": "tiMainOffsetYF",
        "body": "tiMainOffsetYF"
    },
    "tiMainOn": {
        "prefix": "tiMainOn",
        "body": "tiMainOn"
    },
    "tiMainPosition": {
        "prefix": "tiMainPosition",
        "body": "tiMainPosition"
    },
    "Center": {
        "prefix": "Center",
        "body": "Center"
    },
    "tiMainSide": {
        "prefix": "tiMainSide",
        "body": "tiMainSide"
    },
    "tiMainString": {
        "prefix": "tiMainString",
        "body": "tiMainString"
    },
    "tiUseMainAttributes": {
        "prefix": "tiUseMainAttributes",
        "body": "tiUseMainAttributes"
    },
    "tiXAxisAngleF": {
        "prefix": "tiXAxisAngleF",
        "body": "tiXAxisAngleF"
    },
    "tiXAxisConstantSpacingF": {
        "prefix": "tiXAxisConstantSpacingF",
        "body": "tiXAxisConstantSpacingF"
    },
    "tiXAxisDirection": {
        "prefix": "tiXAxisDirection",
        "body": "tiXAxisDirection"
    },
    "tiXAxisFont": {
        "prefix": "tiXAxisFont",
        "body": "tiXAxisFont"
    },
    "tiXAxisFontAspectF": {
        "prefix": "tiXAxisFontAspectF",
        "body": "tiXAxisFontAspectF"
    },
    "tiXAxisFontColor": {
        "prefix": "tiXAxisFontColor",
        "body": "tiXAxisFontColor"
    },
    "tiXAxisFontHeightF": {
        "prefix": "tiXAxisFontHeightF",
        "body": "tiXAxisFontHeightF"
    },
    "tiXAxisFontQuality": {
        "prefix": "tiXAxisFontQuality",
        "body": "tiXAxisFontQuality"
    },
    "tiXAxisFontThicknessF": {
        "prefix": "tiXAxisFontThicknessF",
        "body": "tiXAxisFontThicknessF"
    },
    "tiXAxisFuncCode": {
        "prefix": "tiXAxisFuncCode",
        "body": "tiXAxisFuncCode"
    },
    "tiXAxisJust": {
        "prefix": "tiXAxisJust",
        "body": "tiXAxisJust"
    },
    "tiXAxisOffsetXF": {
        "prefix": "tiXAxisOffsetXF",
        "body": "tiXAxisOffsetXF"
    },
    "tiXAxisOffsetYF": {
        "prefix": "tiXAxisOffsetYF",
        "body": "tiXAxisOffsetYF"
    },
    "tiXAxisOn": {
        "prefix": "tiXAxisOn",
        "body": "tiXAxisOn"
    },
    "tiXAxisPosition": {
        "prefix": "tiXAxisPosition",
        "body": "tiXAxisPosition"
    },
    "tiXAxisSide": {
        "prefix": "tiXAxisSide",
        "body": "tiXAxisSide"
    },
    "tiXAxisString": {
        "prefix": "tiXAxisString",
        "body": "tiXAxisString"
    },
    "tiYAxisAngleF": {
        "prefix": "tiYAxisAngleF",
        "body": "tiYAxisAngleF"
    },
    "tiYAxisConstantSpacingF": {
        "prefix": "tiYAxisConstantSpacingF",
        "body": "tiYAxisConstantSpacingF"
    },
    "tiYAxisDirection": {
        "prefix": "tiYAxisDirection",
        "body": "tiYAxisDirection"
    },
    "tiYAxisFont": {
        "prefix": "tiYAxisFont",
        "body": "tiYAxisFont"
    },
    "tiYAxisFontAspectF": {
        "prefix": "tiYAxisFontAspectF",
        "body": "tiYAxisFontAspectF"
    },
    "tiYAxisFontColor": {
        "prefix": "tiYAxisFontColor",
        "body": "tiYAxisFontColor"
    },
    "tiYAxisFontHeightF": {
        "prefix": "tiYAxisFontHeightF",
        "body": "tiYAxisFontHeightF"
    },
    "tiYAxisFontQuality": {
        "prefix": "tiYAxisFontQuality",
        "body": "tiYAxisFontQuality"
    },
    "tiYAxisFontThicknessF": {
        "prefix": "tiYAxisFontThicknessF",
        "body": "tiYAxisFontThicknessF"
    },
    "tiYAxisFuncCode": {
        "prefix": "tiYAxisFuncCode",
        "body": "tiYAxisFuncCode"
    },
    "tiYAxisJust": {
        "prefix": "tiYAxisJust",
        "body": "tiYAxisJust"
    },
    "tiYAxisOffsetXF": {
        "prefix": "tiYAxisOffsetXF",
        "body": "tiYAxisOffsetXF"
    },
    "tiYAxisOffsetYF": {
        "prefix": "tiYAxisOffsetYF",
        "body": "tiYAxisOffsetYF"
    },
    "tiYAxisOn": {
        "prefix": "tiYAxisOn",
        "body": "tiYAxisOn"
    },
    "tiYAxisPosition": {
        "prefix": "tiYAxisPosition",
        "body": "tiYAxisPosition"
    },
    "tiYAxisSide": {
        "prefix": "tiYAxisSide",
        "body": "tiYAxisSide"
    },
    "tiYAxisString": {
        "prefix": "tiYAxisString",
        "body": "tiYAxisString"
    },
    "tmBorderLineColor": {
        "prefix": "tmBorderLineColor",
        "body": "tmBorderLineColor"
    },
    "tmBorderThicknessF": {
        "prefix": "tmBorderThicknessF",
        "body": "tmBorderThicknessF"
    },
    "tmEqualizeXYSizes": {
        "prefix": "tmEqualizeXYSizes",
        "body": "tmEqualizeXYSizes"
    },
    "tmGridDrawOrder": {
        "prefix": "tmGridDrawOrder",
        "body": "tmGridDrawOrder"
    },
    "tmLabelAutoStride": {
        "prefix": "tmLabelAutoStride",
        "body": "tmLabelAutoStride"
    },
    "tmSciNoteCutoff": {
        "prefix": "tmSciNoteCutoff",
        "body": "tmSciNoteCutoff"
    },
    "tmXBAutoPrecision": {
        "prefix": "tmXBAutoPrecision",
        "body": "tmXBAutoPrecision"
    },
    "tmXBBorderOn": {
        "prefix": "tmXBBorderOn",
        "body": "tmXBBorderOn"
    },
    "tmXBDataLeftF": {
        "prefix": "tmXBDataLeftF",
        "body": "tmXBDataLeftF"
    },
    "tmXBDataRightF": {
        "prefix": "tmXBDataRightF",
        "body": "tmXBDataRightF"
    },
    "tmXBFormat": {
        "prefix": "tmXBFormat",
        "body": "tmXBFormat"
    },
    "tmXBIrrTensionF": {
        "prefix": "tmXBIrrTensionF",
        "body": "tmXBIrrTensionF"
    },
    "tmXBIrregularPoints": {
        "prefix": "tmXBIrregularPoints",
        "body": "tmXBIrregularPoints"
    },
    "tmXBLabelAngleF": {
        "prefix": "tmXBLabelAngleF",
        "body": "tmXBLabelAngleF"
    },
    "tmXBLabelConstantSpacingF": {
        "prefix": "tmXBLabelConstantSpacingF",
        "body": "tmXBLabelConstantSpacingF"
    },
    "tmXBLabelDeltaF": {
        "prefix": "tmXBLabelDeltaF",
        "body": "tmXBLabelDeltaF"
    },
    "tmXBLabelDirection": {
        "prefix": "tmXBLabelDirection",
        "body": "tmXBLabelDirection"
    },
    "tmXBLabelFont": {
        "prefix": "tmXBLabelFont",
        "body": "tmXBLabelFont"
    },
    "tmXBLabelFontAspectF": {
        "prefix": "tmXBLabelFontAspectF",
        "body": "tmXBLabelFontAspectF"
    },
    "tmXBLabelFontColor": {
        "prefix": "tmXBLabelFontColor",
        "body": "tmXBLabelFontColor"
    },
    "tmXBLabelFontHeightF": {
        "prefix": "tmXBLabelFontHeightF",
        "body": "tmXBLabelFontHeightF"
    },
    "tmXBLabelFontQuality": {
        "prefix": "tmXBLabelFontQuality",
        "body": "tmXBLabelFontQuality"
    },
    "tmXBLabelFontThicknessF": {
        "prefix": "tmXBLabelFontThicknessF",
        "body": "tmXBLabelFontThicknessF"
    },
    "tmXBLabelFuncCode": {
        "prefix": "tmXBLabelFuncCode",
        "body": "tmXBLabelFuncCode"
    },
    "tmXBLabelJust": {
        "prefix": "tmXBLabelJust",
        "body": "tmXBLabelJust"
    },
    "tmXBLabelStride": {
        "prefix": "tmXBLabelStride",
        "body": "tmXBLabelStride"
    },
    "tmXBLabels": {
        "prefix": "tmXBLabels",
        "body": "tmXBLabels"
    },
    "tmXBLabelsOn": {
        "prefix": "tmXBLabelsOn",
        "body": "tmXBLabelsOn"
    },
    "tmXBMajorLengthF": {
        "prefix": "tmXBMajorLengthF",
        "body": "tmXBMajorLengthF"
    },
    "tmXBMajorLineColor": {
        "prefix": "tmXBMajorLineColor",
        "body": "tmXBMajorLineColor"
    },
    "tmXBMajorOutwardLengthF": {
        "prefix": "tmXBMajorOutwardLengthF",
        "body": "tmXBMajorOutwardLengthF"
    },
    "tmXBMajorThicknessF": {
        "prefix": "tmXBMajorThicknessF",
        "body": "tmXBMajorThicknessF"
    },
    "tmXBMaxLabelLenF": {
        "prefix": "tmXBMaxLabelLenF",
        "body": "tmXBMaxLabelLenF"
    },
    "tmXBMaxTicks": {
        "prefix": "tmXBMaxTicks",
        "body": "tmXBMaxTicks"
    },
    "tmXBMinLabelSpacingF": {
        "prefix": "tmXBMinLabelSpacingF",
        "body": "tmXBMinLabelSpacingF"
    },
    "tmXBMinorLengthF": {
        "prefix": "tmXBMinorLengthF",
        "body": "tmXBMinorLengthF"
    },
    "tmXBMinorLineColor": {
        "prefix": "tmXBMinorLineColor",
        "body": "tmXBMinorLineColor"
    },
    "tmXBMinorOn": {
        "prefix": "tmXBMinorOn",
        "body": "tmXBMinorOn"
    },
    "tmXBMinorOutwardLengthF": {
        "prefix": "tmXBMinorOutwardLengthF",
        "body": "tmXBMinorOutwardLengthF"
    },
    "tmXBMinorPerMajor": {
        "prefix": "tmXBMinorPerMajor",
        "body": "tmXBMinorPerMajor"
    },
    "tmXBMinorThicknessF": {
        "prefix": "tmXBMinorThicknessF",
        "body": "tmXBMinorThicknessF"
    },
    "tmXBMinorValues": {
        "prefix": "tmXBMinorValues",
        "body": "tmXBMinorValues"
    },
    "tmXBMode": {
        "prefix": "tmXBMode",
        "body": "tmXBMode"
    },
    "Automatic": {
        "prefix": "Automatic",
        "body": "Automatic"
    },
    "Manual": {
        "prefix": "Manual",
        "body": "Manual"
    },
    "Explicit": {
        "prefix": "Explicit",
        "body": "Explicit"
    },
    "tmXBOn": {
        "prefix": "tmXBOn",
        "body": "tmXBOn"
    },
    "tmXBPrecision": {
        "prefix": "tmXBPrecision",
        "body": "tmXBPrecision"
    },
    "tmXBStyle": {
        "prefix": "tmXBStyle",
        "body": "tmXBStyle"
    },
    "Linear": {
        "prefix": "Linear",
        "body": "Linear"
    },
    "Log": {
        "prefix": "Log",
        "body": "Log"
    },
    "Irregular": {
        "prefix": "Irregular",
        "body": "Irregular"
    },
    "Time": {
        "prefix": "Time",
        "body": "Time"
    },
    "Geographic": {
        "prefix": "Geographic",
        "body": "Geographic"
    },
    "tmXBTickEndF": {
        "prefix": "tmXBTickEndF",
        "body": "tmXBTickEndF"
    },
    "tmXBTickSpacingF": {
        "prefix": "tmXBTickSpacingF",
        "body": "tmXBTickSpacingF"
    },
    "tmXBTickStartF": {
        "prefix": "tmXBTickStartF",
        "body": "tmXBTickStartF"
    },
    "tmXBValues": {
        "prefix": "tmXBValues",
        "body": "tmXBValues"
    },
    "tmXMajorGrid": {
        "prefix": "tmXMajorGrid",
        "body": "tmXMajorGrid"
    },
    "tmXMajorGridLineColor": {
        "prefix": "tmXMajorGridLineColor",
        "body": "tmXMajorGridLineColor"
    },
    "tmXMajorGridLineDashPattern": {
        "prefix": "tmXMajorGridLineDashPattern",
        "body": "tmXMajorGridLineDashPattern"
    },
    "tmXMajorGridThicknessF": {
        "prefix": "tmXMajorGridThicknessF",
        "body": "tmXMajorGridThicknessF"
    },
    "tmXMinorGrid": {
        "prefix": "tmXMinorGrid",
        "body": "tmXMinorGrid"
    },
    "tmXMinorGridLineColor": {
        "prefix": "tmXMinorGridLineColor",
        "body": "tmXMinorGridLineColor"
    },
    "tmXMinorGridLineDashPattern": {
        "prefix": "tmXMinorGridLineDashPattern",
        "body": "tmXMinorGridLineDashPattern"
    },
    "tmXMinorGridThicknessF": {
        "prefix": "tmXMinorGridThicknessF",
        "body": "tmXMinorGridThicknessF"
    },
    "tmXTAutoPrecision": {
        "prefix": "tmXTAutoPrecision",
        "body": "tmXTAutoPrecision"
    },
    "tmXTBorderOn": {
        "prefix": "tmXTBorderOn",
        "body": "tmXTBorderOn"
    },
    "tmXTDataLeftF": {
        "prefix": "tmXTDataLeftF",
        "body": "tmXTDataLeftF"
    },
    "tmXTDataRightF": {
        "prefix": "tmXTDataRightF",
        "body": "tmXTDataRightF"
    },
    "tmXTFormat": {
        "prefix": "tmXTFormat",
        "body": "tmXTFormat"
    },
    "tmXTIrrTensionF": {
        "prefix": "tmXTIrrTensionF",
        "body": "tmXTIrrTensionF"
    },
    "tmXTIrregularPoints": {
        "prefix": "tmXTIrregularPoints",
        "body": "tmXTIrregularPoints"
    },
    "tmXTLabelAngleF": {
        "prefix": "tmXTLabelAngleF",
        "body": "tmXTLabelAngleF"
    },
    "tmXTLabelConstantSpacingF": {
        "prefix": "tmXTLabelConstantSpacingF",
        "body": "tmXTLabelConstantSpacingF"
    },
    "tmXTLabelDeltaF": {
        "prefix": "tmXTLabelDeltaF",
        "body": "tmXTLabelDeltaF"
    },
    "tmXTLabelDirection": {
        "prefix": "tmXTLabelDirection",
        "body": "tmXTLabelDirection"
    },
    "tmXTLabelFont": {
        "prefix": "tmXTLabelFont",
        "body": "tmXTLabelFont"
    },
    "tmXTLabelFontAspectF": {
        "prefix": "tmXTLabelFontAspectF",
        "body": "tmXTLabelFontAspectF"
    },
    "tmXTLabelFontColor": {
        "prefix": "tmXTLabelFontColor",
        "body": "tmXTLabelFontColor"
    },
    "tmXTLabelFontHeightF": {
        "prefix": "tmXTLabelFontHeightF",
        "body": "tmXTLabelFontHeightF"
    },
    "tmXTLabelFontQuality": {
        "prefix": "tmXTLabelFontQuality",
        "body": "tmXTLabelFontQuality"
    },
    "tmXTLabelFontThicknessF": {
        "prefix": "tmXTLabelFontThicknessF",
        "body": "tmXTLabelFontThicknessF"
    },
    "tmXTLabelFuncCode": {
        "prefix": "tmXTLabelFuncCode",
        "body": "tmXTLabelFuncCode"
    },
    "tmXTLabelJust": {
        "prefix": "tmXTLabelJust",
        "body": "tmXTLabelJust"
    },
    "tmXTLabelStride": {
        "prefix": "tmXTLabelStride",
        "body": "tmXTLabelStride"
    },
    "tmXTLabels": {
        "prefix": "tmXTLabels",
        "body": "tmXTLabels"
    },
    "tmXTLabelsOn": {
        "prefix": "tmXTLabelsOn",
        "body": "tmXTLabelsOn"
    },
    "tmXTMajorLengthF": {
        "prefix": "tmXTMajorLengthF",
        "body": "tmXTMajorLengthF"
    },
    "tmXTMajorLineColor": {
        "prefix": "tmXTMajorLineColor",
        "body": "tmXTMajorLineColor"
    },
    "tmXTMajorOutwardLengthF": {
        "prefix": "tmXTMajorOutwardLengthF",
        "body": "tmXTMajorOutwardLengthF"
    },
    "tmXTMajorThicknessF": {
        "prefix": "tmXTMajorThicknessF",
        "body": "tmXTMajorThicknessF"
    },
    "tmXTMaxLabelLenF": {
        "prefix": "tmXTMaxLabelLenF",
        "body": "tmXTMaxLabelLenF"
    },
    "tmXTMaxTicks": {
        "prefix": "tmXTMaxTicks",
        "body": "tmXTMaxTicks"
    },
    "tmXTMinLabelSpacingF": {
        "prefix": "tmXTMinLabelSpacingF",
        "body": "tmXTMinLabelSpacingF"
    },
    "tmXTMinorLengthF": {
        "prefix": "tmXTMinorLengthF",
        "body": "tmXTMinorLengthF"
    },
    "tmXTMinorLineColor": {
        "prefix": "tmXTMinorLineColor",
        "body": "tmXTMinorLineColor"
    },
    "tmXTMinorOn": {
        "prefix": "tmXTMinorOn",
        "body": "tmXTMinorOn"
    },
    "tmXTMinorOutwardLengthF": {
        "prefix": "tmXTMinorOutwardLengthF",
        "body": "tmXTMinorOutwardLengthF"
    },
    "tmXTMinorPerMajor": {
        "prefix": "tmXTMinorPerMajor",
        "body": "tmXTMinorPerMajor"
    },
    "tmXTMinorThicknessF": {
        "prefix": "tmXTMinorThicknessF",
        "body": "tmXTMinorThicknessF"
    },
    "tmXTMinorValues": {
        "prefix": "tmXTMinorValues",
        "body": "tmXTMinorValues"
    },
    "tmXTMode": {
        "prefix": "tmXTMode",
        "body": "tmXTMode"
    },
    "tmXTOn": {
        "prefix": "tmXTOn",
        "body": "tmXTOn"
    },
    "tmXTPrecision": {
        "prefix": "tmXTPrecision",
        "body": "tmXTPrecision"
    },
    "tmXTStyle": {
        "prefix": "tmXTStyle",
        "body": "tmXTStyle"
    },
    "tmXTTickEndF": {
        "prefix": "tmXTTickEndF",
        "body": "tmXTTickEndF"
    },
    "tmXTTickSpacingF": {
        "prefix": "tmXTTickSpacingF",
        "body": "tmXTTickSpacingF"
    },
    "tmXTTickStartF": {
        "prefix": "tmXTTickStartF",
        "body": "tmXTTickStartF"
    },
    "tmXTValues": {
        "prefix": "tmXTValues",
        "body": "tmXTValues"
    },
    "tmXUseBottom": {
        "prefix": "tmXUseBottom",
        "body": "tmXUseBottom"
    },
    "tmYLAutoPrecision": {
        "prefix": "tmYLAutoPrecision",
        "body": "tmYLAutoPrecision"
    },
    "tmYLBorderOn": {
        "prefix": "tmYLBorderOn",
        "body": "tmYLBorderOn"
    },
    "tmYLDataBottomF": {
        "prefix": "tmYLDataBottomF",
        "body": "tmYLDataBottomF"
    },
    "tmYLDataTopF": {
        "prefix": "tmYLDataTopF",
        "body": "tmYLDataTopF"
    },
    "tmYLFormat": {
        "prefix": "tmYLFormat",
        "body": "tmYLFormat"
    },
    "tmYLIrrTensionF": {
        "prefix": "tmYLIrrTensionF",
        "body": "tmYLIrrTensionF"
    },
    "tmYLIrregularPoints": {
        "prefix": "tmYLIrregularPoints",
        "body": "tmYLIrregularPoints"
    },
    "tmYLLabelAngleF": {
        "prefix": "tmYLLabelAngleF",
        "body": "tmYLLabelAngleF"
    },
    "tmYLLabelConstantSpacingF": {
        "prefix": "tmYLLabelConstantSpacingF",
        "body": "tmYLLabelConstantSpacingF"
    },
    "tmYLLabelDeltaF": {
        "prefix": "tmYLLabelDeltaF",
        "body": "tmYLLabelDeltaF"
    },
    "tmYLLabelDirection": {
        "prefix": "tmYLLabelDirection",
        "body": "tmYLLabelDirection"
    },
    "tmYLLabelFont": {
        "prefix": "tmYLLabelFont",
        "body": "tmYLLabelFont"
    },
    "tmYLLabelFontAspectF": {
        "prefix": "tmYLLabelFontAspectF",
        "body": "tmYLLabelFontAspectF"
    },
    "tmYLLabelFontColor": {
        "prefix": "tmYLLabelFontColor",
        "body": "tmYLLabelFontColor"
    },
    "tmYLLabelFontHeightF": {
        "prefix": "tmYLLabelFontHeightF",
        "body": "tmYLLabelFontHeightF"
    },
    "tmYLLabelFontQuality": {
        "prefix": "tmYLLabelFontQuality",
        "body": "tmYLLabelFontQuality"
    },
    "tmYLLabelFontThicknessF": {
        "prefix": "tmYLLabelFontThicknessF",
        "body": "tmYLLabelFontThicknessF"
    },
    "tmYLLabelFuncCode": {
        "prefix": "tmYLLabelFuncCode",
        "body": "tmYLLabelFuncCode"
    },
    "tmYLLabelJust": {
        "prefix": "tmYLLabelJust",
        "body": "tmYLLabelJust"
    },
    "tmYLLabelStride": {
        "prefix": "tmYLLabelStride",
        "body": "tmYLLabelStride"
    },
    "tmYLLabels": {
        "prefix": "tmYLLabels",
        "body": "tmYLLabels"
    },
    "tmYLLabelsOn": {
        "prefix": "tmYLLabelsOn",
        "body": "tmYLLabelsOn"
    },
    "tmYLMajorLengthF": {
        "prefix": "tmYLMajorLengthF",
        "body": "tmYLMajorLengthF"
    },
    "tmYLMajorLineColor": {
        "prefix": "tmYLMajorLineColor",
        "body": "tmYLMajorLineColor"
    },
    "tmYLMajorOutwardLengthF": {
        "prefix": "tmYLMajorOutwardLengthF",
        "body": "tmYLMajorOutwardLengthF"
    },
    "tmYLMajorThicknessF": {
        "prefix": "tmYLMajorThicknessF",
        "body": "tmYLMajorThicknessF"
    },
    "tmYLMaxLabelLenF": {
        "prefix": "tmYLMaxLabelLenF",
        "body": "tmYLMaxLabelLenF"
    },
    "tmYLMaxTicks": {
        "prefix": "tmYLMaxTicks",
        "body": "tmYLMaxTicks"
    },
    "tmYLMinLabelSpacingF": {
        "prefix": "tmYLMinLabelSpacingF",
        "body": "tmYLMinLabelSpacingF"
    },
    "tmYLMinorLengthF": {
        "prefix": "tmYLMinorLengthF",
        "body": "tmYLMinorLengthF"
    },
    "tmYLMinorLineColor": {
        "prefix": "tmYLMinorLineColor",
        "body": "tmYLMinorLineColor"
    },
    "tmYLMinorOn": {
        "prefix": "tmYLMinorOn",
        "body": "tmYLMinorOn"
    },
    "tmYLMinorOutwardLengthF": {
        "prefix": "tmYLMinorOutwardLengthF",
        "body": "tmYLMinorOutwardLengthF"
    },
    "tmYLMinorPerMajor": {
        "prefix": "tmYLMinorPerMajor",
        "body": "tmYLMinorPerMajor"
    },
    "tmYLMinorThicknessF": {
        "prefix": "tmYLMinorThicknessF",
        "body": "tmYLMinorThicknessF"
    },
    "tmYLMinorValues": {
        "prefix": "tmYLMinorValues",
        "body": "tmYLMinorValues"
    },
    "tmYLMode": {
        "prefix": "tmYLMode",
        "body": "tmYLMode"
    },
    "tmYLOn": {
        "prefix": "tmYLOn",
        "body": "tmYLOn"
    },
    "tmYLPrecision": {
        "prefix": "tmYLPrecision",
        "body": "tmYLPrecision"
    },
    "tmYLStyle": {
        "prefix": "tmYLStyle",
        "body": "tmYLStyle"
    },
    "tmYLTickEndF": {
        "prefix": "tmYLTickEndF",
        "body": "tmYLTickEndF"
    },
    "tmYLTickSpacingF": {
        "prefix": "tmYLTickSpacingF",
        "body": "tmYLTickSpacingF"
    },
    "tmYLTickStartF": {
        "prefix": "tmYLTickStartF",
        "body": "tmYLTickStartF"
    },
    "tmYLValues": {
        "prefix": "tmYLValues",
        "body": "tmYLValues"
    },
    "tmYMajorGrid": {
        "prefix": "tmYMajorGrid",
        "body": "tmYMajorGrid"
    },
    "tmYMajorGridLineColor": {
        "prefix": "tmYMajorGridLineColor",
        "body": "tmYMajorGridLineColor"
    },
    "tmYMajorGridLineDashPattern": {
        "prefix": "tmYMajorGridLineDashPattern",
        "body": "tmYMajorGridLineDashPattern"
    },
    "tmYMajorGridThicknessF": {
        "prefix": "tmYMajorGridThicknessF",
        "body": "tmYMajorGridThicknessF"
    },
    "tmYMinorGrid": {
        "prefix": "tmYMinorGrid",
        "body": "tmYMinorGrid"
    },
    "tmYMinorGridLineColor": {
        "prefix": "tmYMinorGridLineColor",
        "body": "tmYMinorGridLineColor"
    },
    "tmYMinorGridLineDashPattern": {
        "prefix": "tmYMinorGridLineDashPattern",
        "body": "tmYMinorGridLineDashPattern"
    },
    "tmYMinorGridThicknessF": {
        "prefix": "tmYMinorGridThicknessF",
        "body": "tmYMinorGridThicknessF"
    },
    "tmYRAutoPrecision": {
        "prefix": "tmYRAutoPrecision",
        "body": "tmYRAutoPrecision"
    },
    "tmYRBorderOn": {
        "prefix": "tmYRBorderOn",
        "body": "tmYRBorderOn"
    },
    "tmYRDataBottomF": {
        "prefix": "tmYRDataBottomF",
        "body": "tmYRDataBottomF"
    },
    "tmYRDataTopF": {
        "prefix": "tmYRDataTopF",
        "body": "tmYRDataTopF"
    },
    "tmYRFormat": {
        "prefix": "tmYRFormat",
        "body": "tmYRFormat"
    },
    "tmYRIrrTensionF": {
        "prefix": "tmYRIrrTensionF",
        "body": "tmYRIrrTensionF"
    },
    "tmYRIrregularPoints": {
        "prefix": "tmYRIrregularPoints",
        "body": "tmYRIrregularPoints"
    },
    "tmYRLabelAngleF": {
        "prefix": "tmYRLabelAngleF",
        "body": "tmYRLabelAngleF"
    },
    "tmYRLabelConstantSpacingF": {
        "prefix": "tmYRLabelConstantSpacingF",
        "body": "tmYRLabelConstantSpacingF"
    },
    "tmYRLabelDeltaF": {
        "prefix": "tmYRLabelDeltaF",
        "body": "tmYRLabelDeltaF"
    },
    "tmYRLabelDirection": {
        "prefix": "tmYRLabelDirection",
        "body": "tmYRLabelDirection"
    },
    "tmYRLabelFont": {
        "prefix": "tmYRLabelFont",
        "body": "tmYRLabelFont"
    },
    "tmYRLabelFontAspectF": {
        "prefix": "tmYRLabelFontAspectF",
        "body": "tmYRLabelFontAspectF"
    },
    "tmYRLabelFontColor": {
        "prefix": "tmYRLabelFontColor",
        "body": "tmYRLabelFontColor"
    },
    "tmYRLabelFontHeightF": {
        "prefix": "tmYRLabelFontHeightF",
        "body": "tmYRLabelFontHeightF"
    },
    "tmYRLabelFontQuality": {
        "prefix": "tmYRLabelFontQuality",
        "body": "tmYRLabelFontQuality"
    },
    "tmYRLabelFontThicknessF": {
        "prefix": "tmYRLabelFontThicknessF",
        "body": "tmYRLabelFontThicknessF"
    },
    "tmYRLabelFuncCode": {
        "prefix": "tmYRLabelFuncCode",
        "body": "tmYRLabelFuncCode"
    },
    "tmYRLabelJust": {
        "prefix": "tmYRLabelJust",
        "body": "tmYRLabelJust"
    },
    "tmYRLabelStride": {
        "prefix": "tmYRLabelStride",
        "body": "tmYRLabelStride"
    },
    "tmYRLabels": {
        "prefix": "tmYRLabels",
        "body": "tmYRLabels"
    },
    "tmYRLabelsOn": {
        "prefix": "tmYRLabelsOn",
        "body": "tmYRLabelsOn"
    },
    "tmYRMajorLengthF": {
        "prefix": "tmYRMajorLengthF",
        "body": "tmYRMajorLengthF"
    },
    "tmYRMajorLineColor": {
        "prefix": "tmYRMajorLineColor",
        "body": "tmYRMajorLineColor"
    },
    "tmYRMajorOutwardLengthF": {
        "prefix": "tmYRMajorOutwardLengthF",
        "body": "tmYRMajorOutwardLengthF"
    },
    "tmYRMajorThicknessF": {
        "prefix": "tmYRMajorThicknessF",
        "body": "tmYRMajorThicknessF"
    },
    "tmYRMaxLabelLenF": {
        "prefix": "tmYRMaxLabelLenF",
        "body": "tmYRMaxLabelLenF"
    },
    "tmYRMaxTicks": {
        "prefix": "tmYRMaxTicks",
        "body": "tmYRMaxTicks"
    },
    "tmYRMinLabelSpacingF": {
        "prefix": "tmYRMinLabelSpacingF",
        "body": "tmYRMinLabelSpacingF"
    },
    "tmYRMinorLengthF": {
        "prefix": "tmYRMinorLengthF",
        "body": "tmYRMinorLengthF"
    },
    "tmYRMinorLineColor": {
        "prefix": "tmYRMinorLineColor",
        "body": "tmYRMinorLineColor"
    },
    "tmYRMinorOn": {
        "prefix": "tmYRMinorOn",
        "body": "tmYRMinorOn"
    },
    "tmYRMinorOutwardLengthF": {
        "prefix": "tmYRMinorOutwardLengthF",
        "body": "tmYRMinorOutwardLengthF"
    },
    "tmYRMinorPerMajor": {
        "prefix": "tmYRMinorPerMajor",
        "body": "tmYRMinorPerMajor"
    },
    "tmYRMinorThicknessF": {
        "prefix": "tmYRMinorThicknessF",
        "body": "tmYRMinorThicknessF"
    },
    "tmYRMinorValues": {
        "prefix": "tmYRMinorValues",
        "body": "tmYRMinorValues"
    },
    "tmYRMode": {
        "prefix": "tmYRMode",
        "body": "tmYRMode"
    },
    "tmYROn": {
        "prefix": "tmYROn",
        "body": "tmYROn"
    },
    "tmYRPrecision": {
        "prefix": "tmYRPrecision",
        "body": "tmYRPrecision"
    },
    "tmYRStyle": {
        "prefix": "tmYRStyle",
        "body": "tmYRStyle"
    },
    "tmYRTickEndF": {
        "prefix": "tmYRTickEndF",
        "body": "tmYRTickEndF"
    },
    "tmYRTickSpacingF": {
        "prefix": "tmYRTickSpacingF",
        "body": "tmYRTickSpacingF"
    },
    "tmYRTickStartF": {
        "prefix": "tmYRTickStartF",
        "body": "tmYRTickStartF"
    },
    "tmYRValues": {
        "prefix": "tmYRValues",
        "body": "tmYRValues"
    },
    "tmYUseLeft": {
        "prefix": "tmYUseLeft",
        "body": "tmYUseLeft"
    },
    "trGridType": {
        "prefix": "trGridType",
        "body": "trGridType"
    },
    "Map": {
        "prefix": "Map",
        "body": "Map"
    },
    "LogLin": {
        "prefix": "LogLin",
        "body": "LogLin"
    },
    "Curvilinear": {
        "prefix": "Curvilinear",
        "body": "Curvilinear"
    },
    "Spherical": {
        "prefix": "Spherical",
        "body": "Spherical"
    },
    "TriangularMesh": {
        "prefix": "TriangularMesh",
        "body": "TriangularMesh"
    },
    "trLineInterpolationOn": {
        "prefix": "trLineInterpolationOn",
        "body": "trLineInterpolationOn"
    },
    "trXAxisType": {
        "prefix": "trXAxisType",
        "body": "trXAxisType"
    },
    "IrregularAxis": {
        "prefix": "IrregularAxis",
        "body": "IrregularAxis"
    },
    "LogAxis": {
        "prefix": "LogAxis",
        "body": "LogAxis"
    },
    "LinearAxis": {
        "prefix": "LinearAxis",
        "body": "LinearAxis"
    },
    "trXCoordPoints": {
        "prefix": "trXCoordPoints",
        "body": "trXCoordPoints"
    },
    "trXInterPoints": {
        "prefix": "trXInterPoints",
        "body": "trXInterPoints"
    },
    "trXLog": {
        "prefix": "trXLog",
        "body": "trXLog"
    },
    "trXMaxF": {
        "prefix": "trXMaxF",
        "body": "trXMaxF"
    },
    "trXMinF": {
        "prefix": "trXMinF",
        "body": "trXMinF"
    },
    "trXReverse": {
        "prefix": "trXReverse",
        "body": "trXReverse"
    },
    "trXSamples": {
        "prefix": "trXSamples",
        "body": "trXSamples"
    },
    "trXTensionF": {
        "prefix": "trXTensionF",
        "body": "trXTensionF"
    },
    "trYAxisType": {
        "prefix": "trYAxisType",
        "body": "trYAxisType"
    },
    "trYCoordPoints": {
        "prefix": "trYCoordPoints",
        "body": "trYCoordPoints"
    },
    "trYInterPoints": {
        "prefix": "trYInterPoints",
        "body": "trYInterPoints"
    },
    "trYLog": {
        "prefix": "trYLog",
        "body": "trYLog"
    },
    "trYMaxF": {
        "prefix": "trYMaxF",
        "body": "trYMaxF"
    },
    "trYMinF": {
        "prefix": "trYMinF",
        "body": "trYMinF"
    },
    "trYReverse": {
        "prefix": "trYReverse",
        "body": "trYReverse"
    },
    "trYSamples": {
        "prefix": "trYSamples",
        "body": "trYSamples"
    },
    "trYTensionF": {
        "prefix": "trYTensionF",
        "body": "trYTensionF"
    },
    "txAngleF": {
        "prefix": "txAngleF",
        "body": "txAngleF"
    },
    "txBackgroundFillColor": {
        "prefix": "txBackgroundFillColor",
        "body": "txBackgroundFillColor"
    },
    "txConstantSpacingF": {
        "prefix": "txConstantSpacingF",
        "body": "txConstantSpacingF"
    },
    "txDirection": {
        "prefix": "txDirection",
        "body": "txDirection"
    },
    "txFont": {
        "prefix": "txFont",
        "body": "txFont"
    },
    "txFontAspectF": {
        "prefix": "txFontAspectF",
        "body": "txFontAspectF"
    },
    "txFontColor": {
        "prefix": "txFontColor",
        "body": "txFontColor"
    },
    "txFontHeightF": {
        "prefix": "txFontHeightF",
        "body": "txFontHeightF"
    },
    "txFontOpacityF": {
        "prefix": "txFontOpacityF",
        "body": "txFontOpacityF"
    },
    "txFontQuality": {
        "prefix": "txFontQuality",
        "body": "txFontQuality"
    },
    "txFontThicknessF": {
        "prefix": "txFontThicknessF",
        "body": "txFontThicknessF"
    },
    "txFuncCode": {
        "prefix": "txFuncCode",
        "body": "txFuncCode"
    },
    "txJust": {
        "prefix": "txJust",
        "body": "txJust"
    },
    "txPerimColor": {
        "prefix": "txPerimColor",
        "body": "txPerimColor"
    },
    "txPerimDashLengthF": {
        "prefix": "txPerimDashLengthF",
        "body": "txPerimDashLengthF"
    },
    "txPerimDashPattern": {
        "prefix": "txPerimDashPattern",
        "body": "txPerimDashPattern"
    },
    "txPerimOn": {
        "prefix": "txPerimOn",
        "body": "txPerimOn"
    },
    "txPerimSpaceF": {
        "prefix": "txPerimSpaceF",
        "body": "txPerimSpaceF"
    },
    "txPerimThicknessF": {
        "prefix": "txPerimThicknessF",
        "body": "txPerimThicknessF"
    },
    "txPosXF": {
        "prefix": "txPosXF",
        "body": "txPosXF"
    },
    "txPosYF": {
        "prefix": "txPosYF",
        "body": "txPosYF"
    },
    "txString": {
        "prefix": "txString",
        "body": "txString"
    },
    "vcExplicitLabelBarLabelsOn": {
        "prefix": "vcExplicitLabelBarLabelsOn",
        "body": "vcExplicitLabelBarLabelsOn"
    },
    "vcFillArrowEdgeColor": {
        "prefix": "vcFillArrowEdgeColor",
        "body": "vcFillArrowEdgeColor"
    },
    "vcFillArrowEdgeThicknessF": {
        "prefix": "vcFillArrowEdgeThicknessF",
        "body": "vcFillArrowEdgeThicknessF"
    },
    "vcFillArrowFillColor": {
        "prefix": "vcFillArrowFillColor",
        "body": "vcFillArrowFillColor"
    },
    "vcFillArrowHeadInteriorXF": {
        "prefix": "vcFillArrowHeadInteriorXF",
        "body": "vcFillArrowHeadInteriorXF"
    },
    "vcFillArrowHeadMinFracXF": {
        "prefix": "vcFillArrowHeadMinFracXF",
        "body": "vcFillArrowHeadMinFracXF"
    },
    "vcFillArrowHeadMinFracYF": {
        "prefix": "vcFillArrowHeadMinFracYF",
        "body": "vcFillArrowHeadMinFracYF"
    },
    "vcFillArrowHeadXF": {
        "prefix": "vcFillArrowHeadXF",
        "body": "vcFillArrowHeadXF"
    },
    "vcFillArrowHeadYF": {
        "prefix": "vcFillArrowHeadYF",
        "body": "vcFillArrowHeadYF"
    },
    "vcFillArrowMinFracWidthF": {
        "prefix": "vcFillArrowMinFracWidthF",
        "body": "vcFillArrowMinFracWidthF"
    },
    "vcFillArrowWidthF": {
        "prefix": "vcFillArrowWidthF",
        "body": "vcFillArrowWidthF"
    },
    "vcFillArrowsOn": {
        "prefix": "vcFillArrowsOn",
        "body": "vcFillArrowsOn"
    },
    "vcFillOverEdge": {
        "prefix": "vcFillOverEdge",
        "body": "vcFillOverEdge"
    },
    "vcGlyphOpacityF": {
        "prefix": "vcGlyphOpacityF",
        "body": "vcGlyphOpacityF"
    },
    "vcGlyphStyle": {
        "prefix": "vcGlyphStyle",
        "body": "vcGlyphStyle"
    },
    "LineArrow": {
        "prefix": "LineArrow",
        "body": "LineArrow"
    },
    "FillArrow": {
        "prefix": "FillArrow",
        "body": "FillArrow"
    },
    "WindBarb": {
        "prefix": "WindBarb",
        "body": "WindBarb"
    },
    "CurlyVector": {
        "prefix": "CurlyVector",
        "body": "CurlyVector"
    },
    "vcLabelBarEndLabelsOn": {
        "prefix": "vcLabelBarEndLabelsOn",
        "body": "vcLabelBarEndLabelsOn"
    },
    "vcLabelFontColor": {
        "prefix": "vcLabelFontColor",
        "body": "vcLabelFontColor"
    },
    "vcLabelFontHeightF": {
        "prefix": "vcLabelFontHeightF",
        "body": "vcLabelFontHeightF"
    },
    "vcLabelsOn": {
        "prefix": "vcLabelsOn",
        "body": "vcLabelsOn"
    },
    "vcLabelsUseVectorColor": {
        "prefix": "vcLabelsUseVectorColor",
        "body": "vcLabelsUseVectorColor"
    },
    "vcLevelColors": {
        "prefix": "vcLevelColors",
        "body": "vcLevelColors"
    },
    "vcLevelCount": {
        "prefix": "vcLevelCount",
        "body": "vcLevelCount"
    },
    "vcLevelPalette": {
        "prefix": "vcLevelPalette",
        "body": "vcLevelPalette"
    },
    "vcLevelSelectionMode": {
        "prefix": "vcLevelSelectionMode",
        "body": "vcLevelSelectionMode"
    },
    "vcLevelSpacingF": {
        "prefix": "vcLevelSpacingF",
        "body": "vcLevelSpacingF"
    },
    "vcLevels": {
        "prefix": "vcLevels",
        "body": "vcLevels"
    },
    "vcLineArrowColor": {
        "prefix": "vcLineArrowColor",
        "body": "vcLineArrowColor"
    },
    "vcLineArrowHeadMaxSizeF": {
        "prefix": "vcLineArrowHeadMaxSizeF",
        "body": "vcLineArrowHeadMaxSizeF"
    },
    "vcLineArrowHeadMinSizeF": {
        "prefix": "vcLineArrowHeadMinSizeF",
        "body": "vcLineArrowHeadMinSizeF"
    },
    "vcLineArrowThicknessF": {
        "prefix": "vcLineArrowThicknessF",
        "body": "vcLineArrowThicknessF"
    },
    "vcMagnitudeFormat": {
        "prefix": "vcMagnitudeFormat",
        "body": "vcMagnitudeFormat"
    },
    "vcMagnitudeScaleFactorF": {
        "prefix": "vcMagnitudeScaleFactorF",
        "body": "vcMagnitudeScaleFactorF"
    },
    "vcMagnitudeScaleValueF": {
        "prefix": "vcMagnitudeScaleValueF",
        "body": "vcMagnitudeScaleValueF"
    },
    "vcMagnitudeScalingMode": {
        "prefix": "vcMagnitudeScalingMode",
        "body": "vcMagnitudeScalingMode"
    },
    "vcMapDirection": {
        "prefix": "vcMapDirection",
        "body": "vcMapDirection"
    },
    "vcMaxLevelCount": {
        "prefix": "vcMaxLevelCount",
        "body": "vcMaxLevelCount"
    },
    "vcMaxLevelValF": {
        "prefix": "vcMaxLevelValF",
        "body": "vcMaxLevelValF"
    },
    "vcMaxMagnitudeF": {
        "prefix": "vcMaxMagnitudeF",
        "body": "vcMaxMagnitudeF"
    },
    "vcMinAnnoAngleF": {
        "prefix": "vcMinAnnoAngleF",
        "body": "vcMinAnnoAngleF"
    },
    "vcMinAnnoArrowAngleF": {
        "prefix": "vcMinAnnoArrowAngleF",
        "body": "vcMinAnnoArrowAngleF"
    },
    "vcMinAnnoArrowEdgeColor": {
        "prefix": "vcMinAnnoArrowEdgeColor",
        "body": "vcMinAnnoArrowEdgeColor"
    },
    "vcMinAnnoArrowFillColor": {
        "prefix": "vcMinAnnoArrowFillColor",
        "body": "vcMinAnnoArrowFillColor"
    },
    "vcMinAnnoArrowLineColor": {
        "prefix": "vcMinAnnoArrowLineColor",
        "body": "vcMinAnnoArrowLineColor"
    },
    "vcMinAnnoArrowMinOffsetF": {
        "prefix": "vcMinAnnoArrowMinOffsetF",
        "body": "vcMinAnnoArrowMinOffsetF"
    },
    "vcMinAnnoArrowSpaceF": {
        "prefix": "vcMinAnnoArrowSpaceF",
        "body": "vcMinAnnoArrowSpaceF"
    },
    "vcMinAnnoArrowUseVecColor": {
        "prefix": "vcMinAnnoArrowUseVecColor",
        "body": "vcMinAnnoArrowUseVecColor"
    },
    "vcMinAnnoBackgroundColor": {
        "prefix": "vcMinAnnoBackgroundColor",
        "body": "vcMinAnnoBackgroundColor"
    },
    "vcMinAnnoConstantSpacingF": {
        "prefix": "vcMinAnnoConstantSpacingF",
        "body": "vcMinAnnoConstantSpacingF"
    },
    "vcMinAnnoExplicitMagnitudeF": {
        "prefix": "vcMinAnnoExplicitMagnitudeF",
        "body": "vcMinAnnoExplicitMagnitudeF"
    },
    "vcMinAnnoFont": {
        "prefix": "vcMinAnnoFont",
        "body": "vcMinAnnoFont"
    },
    "vcMinAnnoFontAspectF": {
        "prefix": "vcMinAnnoFontAspectF",
        "body": "vcMinAnnoFontAspectF"
    },
    "vcMinAnnoFontColor": {
        "prefix": "vcMinAnnoFontColor",
        "body": "vcMinAnnoFontColor"
    },
    "vcMinAnnoFontHeightF": {
        "prefix": "vcMinAnnoFontHeightF",
        "body": "vcMinAnnoFontHeightF"
    },
    "vcMinAnnoFontQuality": {
        "prefix": "vcMinAnnoFontQuality",
        "body": "vcMinAnnoFontQuality"
    },
    "vcMinAnnoFontThicknessF": {
        "prefix": "vcMinAnnoFontThicknessF",
        "body": "vcMinAnnoFontThicknessF"
    },
    "vcMinAnnoFuncCode": {
        "prefix": "vcMinAnnoFuncCode",
        "body": "vcMinAnnoFuncCode"
    },
    "vcMinAnnoJust": {
        "prefix": "vcMinAnnoJust",
        "body": "vcMinAnnoJust"
    },
    "vcMinAnnoOn": {
        "prefix": "vcMinAnnoOn",
        "body": "vcMinAnnoOn"
    },
    "vcMinAnnoOrientation": {
        "prefix": "vcMinAnnoOrientation",
        "body": "vcMinAnnoOrientation"
    },
    "vcMinAnnoOrthogonalPosF": {
        "prefix": "vcMinAnnoOrthogonalPosF",
        "body": "vcMinAnnoOrthogonalPosF"
    },
    "vcMinAnnoParallelPosF": {
        "prefix": "vcMinAnnoParallelPosF",
        "body": "vcMinAnnoParallelPosF"
    },
    "vcMinAnnoPerimColor": {
        "prefix": "vcMinAnnoPerimColor",
        "body": "vcMinAnnoPerimColor"
    },
    "vcMinAnnoPerimOn": {
        "prefix": "vcMinAnnoPerimOn",
        "body": "vcMinAnnoPerimOn"
    },
    "vcMinAnnoPerimSpaceF": {
        "prefix": "vcMinAnnoPerimSpaceF",
        "body": "vcMinAnnoPerimSpaceF"
    },
    "vcMinAnnoPerimThicknessF": {
        "prefix": "vcMinAnnoPerimThicknessF",
        "body": "vcMinAnnoPerimThicknessF"
    },
    "vcMinAnnoSide": {
        "prefix": "vcMinAnnoSide",
        "body": "vcMinAnnoSide"
    },
    "vcMinAnnoString1": {
        "prefix": "vcMinAnnoString1",
        "body": "vcMinAnnoString1"
    },
    "vcMinAnnoString1On": {
        "prefix": "vcMinAnnoString1On",
        "body": "vcMinAnnoString1On"
    },
    "vcMinAnnoString2": {
        "prefix": "vcMinAnnoString2",
        "body": "vcMinAnnoString2"
    },
    "vcMinAnnoString2On": {
        "prefix": "vcMinAnnoString2On",
        "body": "vcMinAnnoString2On"
    },
    "vcMinAnnoTextDirection": {
        "prefix": "vcMinAnnoTextDirection",
        "body": "vcMinAnnoTextDirection"
    },
    "vcMinAnnoZone": {
        "prefix": "vcMinAnnoZone",
        "body": "vcMinAnnoZone"
    },
    "vcMinDistanceF": {
        "prefix": "vcMinDistanceF",
        "body": "vcMinDistanceF"
    },
    "vcMinFracLengthF": {
        "prefix": "vcMinFracLengthF",
        "body": "vcMinFracLengthF"
    },
    "vcMinLevelValF": {
        "prefix": "vcMinLevelValF",
        "body": "vcMinLevelValF"
    },
    "vcMinMagnitudeF": {
        "prefix": "vcMinMagnitudeF",
        "body": "vcMinMagnitudeF"
    },
    "vcMonoFillArrowEdgeColor": {
        "prefix": "vcMonoFillArrowEdgeColor",
        "body": "vcMonoFillArrowEdgeColor"
    },
    "vcMonoFillArrowFillColor": {
        "prefix": "vcMonoFillArrowFillColor",
        "body": "vcMonoFillArrowFillColor"
    },
    "vcMonoLineArrowColor": {
        "prefix": "vcMonoLineArrowColor",
        "body": "vcMonoLineArrowColor"
    },
    "vcMonoWindBarbColor": {
        "prefix": "vcMonoWindBarbColor",
        "body": "vcMonoWindBarbColor"
    },
    "vcNoDataLabelOn": {
        "prefix": "vcNoDataLabelOn",
        "body": "vcNoDataLabelOn"
    },
    "vcNoDataLabelString": {
        "prefix": "vcNoDataLabelString",
        "body": "vcNoDataLabelString"
    },
    "vcPositionMode": {
        "prefix": "vcPositionMode",
        "body": "vcPositionMode"
    },
    "ArrowHead": {
        "prefix": "ArrowHead",
        "body": "ArrowHead"
    },
    "ArrowCenter": {
        "prefix": "ArrowCenter",
        "body": "ArrowCenter"
    },
    "ArrowTail": {
        "prefix": "ArrowTail",
        "body": "ArrowTail"
    },
    "vcRefAnnoAngleF": {
        "prefix": "vcRefAnnoAngleF",
        "body": "vcRefAnnoAngleF"
    },
    "vcRefAnnoArrowAngleF": {
        "prefix": "vcRefAnnoArrowAngleF",
        "body": "vcRefAnnoArrowAngleF"
    },
    "vcRefAnnoArrowEdgeColor": {
        "prefix": "vcRefAnnoArrowEdgeColor",
        "body": "vcRefAnnoArrowEdgeColor"
    },
    "vcRefAnnoArrowFillColor": {
        "prefix": "vcRefAnnoArrowFillColor",
        "body": "vcRefAnnoArrowFillColor"
    },
    "vcRefAnnoArrowLineColor": {
        "prefix": "vcRefAnnoArrowLineColor",
        "body": "vcRefAnnoArrowLineColor"
    },
    "vcRefAnnoArrowMinOffsetF": {
        "prefix": "vcRefAnnoArrowMinOffsetF",
        "body": "vcRefAnnoArrowMinOffsetF"
    },
    "vcRefAnnoArrowSpaceF": {
        "prefix": "vcRefAnnoArrowSpaceF",
        "body": "vcRefAnnoArrowSpaceF"
    },
    "vcRefAnnoArrowUseVecColor": {
        "prefix": "vcRefAnnoArrowUseVecColor",
        "body": "vcRefAnnoArrowUseVecColor"
    },
    "vcRefAnnoBackgroundColor": {
        "prefix": "vcRefAnnoBackgroundColor",
        "body": "vcRefAnnoBackgroundColor"
    },
    "vcRefAnnoConstantSpacingF": {
        "prefix": "vcRefAnnoConstantSpacingF",
        "body": "vcRefAnnoConstantSpacingF"
    },
    "vcRefAnnoExplicitMagnitudeF": {
        "prefix": "vcRefAnnoExplicitMagnitudeF",
        "body": "vcRefAnnoExplicitMagnitudeF"
    },
    "vcRefAnnoFont": {
        "prefix": "vcRefAnnoFont",
        "body": "vcRefAnnoFont"
    },
    "vcRefAnnoFontAspectF": {
        "prefix": "vcRefAnnoFontAspectF",
        "body": "vcRefAnnoFontAspectF"
    },
    "vcRefAnnoFontColor": {
        "prefix": "vcRefAnnoFontColor",
        "body": "vcRefAnnoFontColor"
    },
    "vcRefAnnoFontHeightF": {
        "prefix": "vcRefAnnoFontHeightF",
        "body": "vcRefAnnoFontHeightF"
    },
    "vcRefAnnoFontQuality": {
        "prefix": "vcRefAnnoFontQuality",
        "body": "vcRefAnnoFontQuality"
    },
    "vcRefAnnoFontThicknessF": {
        "prefix": "vcRefAnnoFontThicknessF",
        "body": "vcRefAnnoFontThicknessF"
    },
    "vcRefAnnoFuncCode": {
        "prefix": "vcRefAnnoFuncCode",
        "body": "vcRefAnnoFuncCode"
    },
    "vcRefAnnoJust": {
        "prefix": "vcRefAnnoJust",
        "body": "vcRefAnnoJust"
    },
    "vcRefAnnoOn": {
        "prefix": "vcRefAnnoOn",
        "body": "vcRefAnnoOn"
    },
    "vcRefAnnoOrientation": {
        "prefix": "vcRefAnnoOrientation",
        "body": "vcRefAnnoOrientation"
    },
    "vcRefAnnoOrthogonalPosF": {
        "prefix": "vcRefAnnoOrthogonalPosF",
        "body": "vcRefAnnoOrthogonalPosF"
    },
    "vcRefAnnoParallelPosF": {
        "prefix": "vcRefAnnoParallelPosF",
        "body": "vcRefAnnoParallelPosF"
    },
    "vcRefAnnoPerimColor": {
        "prefix": "vcRefAnnoPerimColor",
        "body": "vcRefAnnoPerimColor"
    },
    "vcRefAnnoPerimOn": {
        "prefix": "vcRefAnnoPerimOn",
        "body": "vcRefAnnoPerimOn"
    },
    "vcRefAnnoPerimSpaceF": {
        "prefix": "vcRefAnnoPerimSpaceF",
        "body": "vcRefAnnoPerimSpaceF"
    },
    "vcRefAnnoPerimThicknessF": {
        "prefix": "vcRefAnnoPerimThicknessF",
        "body": "vcRefAnnoPerimThicknessF"
    },
    "vcRefAnnoSide": {
        "prefix": "vcRefAnnoSide",
        "body": "vcRefAnnoSide"
    },
    "vcRefAnnoString1": {
        "prefix": "vcRefAnnoString1",
        "body": "vcRefAnnoString1"
    },
    "vcRefAnnoString1On": {
        "prefix": "vcRefAnnoString1On",
        "body": "vcRefAnnoString1On"
    },
    "vcRefAnnoString2": {
        "prefix": "vcRefAnnoString2",
        "body": "vcRefAnnoString2"
    },
    "vcRefAnnoString2On": {
        "prefix": "vcRefAnnoString2On",
        "body": "vcRefAnnoString2On"
    },
    "vcRefAnnoTextDirection": {
        "prefix": "vcRefAnnoTextDirection",
        "body": "vcRefAnnoTextDirection"
    },
    "vcRefAnnoZone": {
        "prefix": "vcRefAnnoZone",
        "body": "vcRefAnnoZone"
    },
    "vcRefLengthF": {
        "prefix": "vcRefLengthF",
        "body": "vcRefLengthF"
    },
    "vcRefMagnitudeF": {
        "prefix": "vcRefMagnitudeF",
        "body": "vcRefMagnitudeF"
    },
    "vcScalarFieldData": {
        "prefix": "vcScalarFieldData",
        "body": "vcScalarFieldData"
    },
    "vcScalarMissingValColor": {
        "prefix": "vcScalarMissingValColor",
        "body": "vcScalarMissingValColor"
    },
    "vcScalarValueFormat": {
        "prefix": "vcScalarValueFormat",
        "body": "vcScalarValueFormat"
    },
    "vcScalarValueScaleFactorF": {
        "prefix": "vcScalarValueScaleFactorF",
        "body": "vcScalarValueScaleFactorF"
    },
    "vcScalarValueScaleValueF": {
        "prefix": "vcScalarValueScaleValueF",
        "body": "vcScalarValueScaleValueF"
    },
    "vcScalarValueScalingMode": {
        "prefix": "vcScalarValueScalingMode",
        "body": "vcScalarValueScalingMode"
    },
    "vcSpanLevelPalette": {
        "prefix": "vcSpanLevelPalette",
        "body": "vcSpanLevelPalette"
    },
    "vcUseRefAnnoRes": {
        "prefix": "vcUseRefAnnoRes",
        "body": "vcUseRefAnnoRes"
    },
    "vcUseScalarArray": {
        "prefix": "vcUseScalarArray",
        "body": "vcUseScalarArray"
    },
    "vcVectorDrawOrder": {
        "prefix": "vcVectorDrawOrder",
        "body": "vcVectorDrawOrder"
    },
    "vcVectorFieldData": {
        "prefix": "vcVectorFieldData",
        "body": "vcVectorFieldData"
    },
    "vcWindBarbCalmCircleSizeF": {
        "prefix": "vcWindBarbCalmCircleSizeF",
        "body": "vcWindBarbCalmCircleSizeF"
    },
    "vcWindBarbColor": {
        "prefix": "vcWindBarbColor",
        "body": "vcWindBarbColor"
    },
    "vcWindBarbLineThicknessF": {
        "prefix": "vcWindBarbLineThicknessF",
        "body": "vcWindBarbLineThicknessF"
    },
    "vcWindBarbScaleFactorF": {
        "prefix": "vcWindBarbScaleFactorF",
        "body": "vcWindBarbScaleFactorF"
    },
    "vcWindBarbTickAngleF": {
        "prefix": "vcWindBarbTickAngleF",
        "body": "vcWindBarbTickAngleF"
    },
    "vcWindBarbTickLengthF": {
        "prefix": "vcWindBarbTickLengthF",
        "body": "vcWindBarbTickLengthF"
    },
    "vcWindBarbTickSpacingF": {
        "prefix": "vcWindBarbTickSpacingF",
        "body": "vcWindBarbTickSpacingF"
    },
    "vcZeroFLabelAngleF": {
        "prefix": "vcZeroFLabelAngleF",
        "body": "vcZeroFLabelAngleF"
    },
    "vcZeroFLabelBackgroundColor": {
        "prefix": "vcZeroFLabelBackgroundColor",
        "body": "vcZeroFLabelBackgroundColor"
    },
    "vcZeroFLabelConstantSpacingF": {
        "prefix": "vcZeroFLabelConstantSpacingF",
        "body": "vcZeroFLabelConstantSpacingF"
    },
    "vcZeroFLabelFont": {
        "prefix": "vcZeroFLabelFont",
        "body": "vcZeroFLabelFont"
    },
    "vcZeroFLabelFontAspectF": {
        "prefix": "vcZeroFLabelFontAspectF",
        "body": "vcZeroFLabelFontAspectF"
    },
    "vcZeroFLabelFontColor": {
        "prefix": "vcZeroFLabelFontColor",
        "body": "vcZeroFLabelFontColor"
    },
    "vcZeroFLabelFontHeightF": {
        "prefix": "vcZeroFLabelFontHeightF",
        "body": "vcZeroFLabelFontHeightF"
    },
    "vcZeroFLabelFontQuality": {
        "prefix": "vcZeroFLabelFontQuality",
        "body": "vcZeroFLabelFontQuality"
    },
    "vcZeroFLabelFontThicknessF": {
        "prefix": "vcZeroFLabelFontThicknessF",
        "body": "vcZeroFLabelFontThicknessF"
    },
    "vcZeroFLabelFuncCode": {
        "prefix": "vcZeroFLabelFuncCode",
        "body": "vcZeroFLabelFuncCode"
    },
    "vcZeroFLabelJust": {
        "prefix": "vcZeroFLabelJust",
        "body": "vcZeroFLabelJust"
    },
    "vcZeroFLabelOn": {
        "prefix": "vcZeroFLabelOn",
        "body": "vcZeroFLabelOn"
    },
    "vcZeroFLabelOrthogonalPosF": {
        "prefix": "vcZeroFLabelOrthogonalPosF",
        "body": "vcZeroFLabelOrthogonalPosF"
    },
    "vcZeroFLabelParallelPosF": {
        "prefix": "vcZeroFLabelParallelPosF",
        "body": "vcZeroFLabelParallelPosF"
    },
    "vcZeroFLabelPerimColor": {
        "prefix": "vcZeroFLabelPerimColor",
        "body": "vcZeroFLabelPerimColor"
    },
    "vcZeroFLabelPerimOn": {
        "prefix": "vcZeroFLabelPerimOn",
        "body": "vcZeroFLabelPerimOn"
    },
    "vcZeroFLabelPerimSpaceF": {
        "prefix": "vcZeroFLabelPerimSpaceF",
        "body": "vcZeroFLabelPerimSpaceF"
    },
    "vcZeroFLabelPerimThicknessF": {
        "prefix": "vcZeroFLabelPerimThicknessF",
        "body": "vcZeroFLabelPerimThicknessF"
    },
    "vcZeroFLabelSide": {
        "prefix": "vcZeroFLabelSide",
        "body": "vcZeroFLabelSide"
    },
    "vcZeroFLabelString": {
        "prefix": "vcZeroFLabelString",
        "body": "vcZeroFLabelString"
    },
    "vcZeroFLabelTextDirection": {
        "prefix": "vcZeroFLabelTextDirection",
        "body": "vcZeroFLabelTextDirection"
    },
    "vcZeroFLabelZone": {
        "prefix": "vcZeroFLabelZone",
        "body": "vcZeroFLabelZone"
    },
    "vfCopyData": {
        "prefix": "vfCopyData",
        "body": "vfCopyData"
    },
    "vfDataArray": {
        "prefix": "vfDataArray",
        "body": "vfDataArray"
    },
    "vfExchangeDimensions": {
        "prefix": "vfExchangeDimensions",
        "body": "vfExchangeDimensions"
    },
    "vfExchangeUVData": {
        "prefix": "vfExchangeUVData",
        "body": "vfExchangeUVData"
    },
    "vfMagMaxV": {
        "prefix": "vfMagMaxV",
        "body": "vfMagMaxV"
    },
    "vfMagMinV": {
        "prefix": "vfMagMinV",
        "body": "vfMagMinV"
    },
    "vfMissingUValueV": {
        "prefix": "vfMissingUValueV",
        "body": "vfMissingUValueV"
    },
    "vfMissingVValueV": {
        "prefix": "vfMissingVValueV",
        "body": "vfMissingVValueV"
    },
    "vfPolarData": {
        "prefix": "vfPolarData",
        "body": "vfPolarData"
    },
    "vfSingleMissingValue": {
        "prefix": "vfSingleMissingValue",
        "body": "vfSingleMissingValue"
    },
    "vfUDataArray": {
        "prefix": "vfUDataArray",
        "body": "vfUDataArray"
    },
    "vfUMaxV": {
        "prefix": "vfUMaxV",
        "body": "vfUMaxV"
    },
    "vfUMinV": {
        "prefix": "vfUMinV",
        "body": "vfUMinV"
    },
    "vfVDataArray": {
        "prefix": "vfVDataArray",
        "body": "vfVDataArray"
    },
    "vfVMaxV": {
        "prefix": "vfVMaxV",
        "body": "vfVMaxV"
    },
    "vfVMinV": {
        "prefix": "vfVMinV",
        "body": "vfVMinV"
    },
    "vfXArray": {
        "prefix": "vfXArray",
        "body": "vfXArray"
    },
    "vfXCActualEndF": {
        "prefix": "vfXCActualEndF",
        "body": "vfXCActualEndF"
    },
    "vfXCActualStartF": {
        "prefix": "vfXCActualStartF",
        "body": "vfXCActualStartF"
    },
    "vfXCEndIndex": {
        "prefix": "vfXCEndIndex",
        "body": "vfXCEndIndex"
    },
    "vfXCEndSubsetV": {
        "prefix": "vfXCEndSubsetV",
        "body": "vfXCEndSubsetV"
    },
    "vfXCEndV": {
        "prefix": "vfXCEndV",
        "body": "vfXCEndV"
    },
    "vfXCStartIndex": {
        "prefix": "vfXCStartIndex",
        "body": "vfXCStartIndex"
    },
    "vfXCStartSubsetV": {
        "prefix": "vfXCStartSubsetV",
        "body": "vfXCStartSubsetV"
    },
    "vfXCStartV": {
        "prefix": "vfXCStartV",
        "body": "vfXCStartV"
    },
    "vfXCStride": {
        "prefix": "vfXCStride",
        "body": "vfXCStride"
    },
    "vfYArray": {
        "prefix": "vfYArray",
        "body": "vfYArray"
    },
    "vfYCActualEndF": {
        "prefix": "vfYCActualEndF",
        "body": "vfYCActualEndF"
    },
    "vfYCActualStartF": {
        "prefix": "vfYCActualStartF",
        "body": "vfYCActualStartF"
    },
    "vfYCEndIndex": {
        "prefix": "vfYCEndIndex",
        "body": "vfYCEndIndex"
    },
    "vfYCEndSubsetV": {
        "prefix": "vfYCEndSubsetV",
        "body": "vfYCEndSubsetV"
    },
    "vfYCEndV": {
        "prefix": "vfYCEndV",
        "body": "vfYCEndV"
    },
    "vfYCStartIndex": {
        "prefix": "vfYCStartIndex",
        "body": "vfYCStartIndex"
    },
    "vfYCStartSubsetV": {
        "prefix": "vfYCStartSubsetV",
        "body": "vfYCStartSubsetV"
    },
    "vfYCStartV": {
        "prefix": "vfYCStartV",
        "body": "vfYCStartV"
    },
    "vfYCStride": {
        "prefix": "vfYCStride",
        "body": "vfYCStride"
    },
    "vpAnnoManagerId": {
        "prefix": "vpAnnoManagerId",
        "body": "vpAnnoManagerId"
    },
    "vpClipOn": {
        "prefix": "vpClipOn",
        "body": "vpClipOn"
    },
    "vpHeightF": {
        "prefix": "vpHeightF",
        "body": "vpHeightF"
    },
    "vpKeepAspect": {
        "prefix": "vpKeepAspect",
        "body": "vpKeepAspect"
    },
    "vpOn": {
        "prefix": "vpOn",
        "body": "vpOn"
    },
    "vpUseSegments": {
        "prefix": "vpUseSegments",
        "body": "vpUseSegments"
    },
    "vpWidthF": {
        "prefix": "vpWidthF",
        "body": "vpWidthF"
    },
    "vpXF": {
        "prefix": "vpXF",
        "body": "vpXF"
    },
    "vpYF": {
        "prefix": "vpYF",
        "body": "vpYF"
    },
    "wkAntiAlias": {
        "prefix": "wkAntiAlias",
        "body": "wkAntiAlias"
    },
    "On": {
        "prefix": "On",
        "body": "On"
    },
    "Off": {
        "prefix": "Off",
        "body": "Off"
    },
    "TextOnly": {
        "prefix": "TextOnly",
        "body": "TextOnly"
    },
    "wkBackgroundColor": {
        "prefix": "wkBackgroundColor",
        "body": "wkBackgroundColor"
    },
    "wkBackgroundOpacityF": {
        "prefix": "wkBackgroundOpacityF",
        "body": "wkBackgroundOpacityF"
    },
    "wkColorMapLen": {
        "prefix": "wkColorMapLen",
        "body": "wkColorMapLen"
    },
    "wkColorMap": {
        "prefix": "wkColorMap",
        "body": "wkColorMap"
    },
    "wkColorModel": {
        "prefix": "wkColorModel",
        "body": "wkColorModel"
    },
    "wkDashTableLength": {
        "prefix": "wkDashTableLength",
        "body": "wkDashTableLength"
    },
    "wkDefGraphicStyleId": {
        "prefix": "wkDefGraphicStyleId",
        "body": "wkDefGraphicStyleId"
    },
    "wkDeviceLowerX": {
        "prefix": "wkDeviceLowerX",
        "body": "wkDeviceLowerX"
    },
    "wkDeviceLowerY": {
        "prefix": "wkDeviceLowerY",
        "body": "wkDeviceLowerY"
    },
    "wkDeviceUpperX": {
        "prefix": "wkDeviceUpperX",
        "body": "wkDeviceUpperX"
    },
    "wkDeviceUpperY": {
        "prefix": "wkDeviceUpperY",
        "body": "wkDeviceUpperY"
    },
    "wkFileName": {
        "prefix": "wkFileName",
        "body": "wkFileName"
    },
    "wkFillTableLength": {
        "prefix": "wkFillTableLength",
        "body": "wkFillTableLength"
    },
    "wkForegroundColor": {
        "prefix": "wkForegroundColor",
        "body": "wkForegroundColor"
    },
    "wkFormat": {
        "prefix": "wkFormat",
        "body": "wkFormat"
    },
    "wkFullBackground": {
        "prefix": "wkFullBackground",
        "body": "wkFullBackground"
    },
    "wkGksWorkId": {
        "prefix": "wkGksWorkId",
        "body": "wkGksWorkId"
    },
    "wkHeight": {
        "prefix": "wkHeight",
        "body": "wkHeight"
    },
    "wkMarkerTableLength": {
        "prefix": "wkMarkerTableLength",
        "body": "wkMarkerTableLength"
    },
    "wkMetaName": {
        "prefix": "wkMetaName",
        "body": "wkMetaName"
    },
    "wkOrientation": {
        "prefix": "wkOrientation",
        "body": "wkOrientation"
    },
    "wkPDFFileName": {
        "prefix": "wkPDFFileName",
        "body": "wkPDFFileName"
    },
    "wkPDFFormat": {
        "prefix": "wkPDFFormat",
        "body": "wkPDFFormat"
    },
    "wkPDFResolution": {
        "prefix": "wkPDFResolution",
        "body": "wkPDFResolution"
    },
    "wkPSFileName": {
        "prefix": "wkPSFileName",
        "body": "wkPSFileName"
    },
    "wkPSFormat": {
        "prefix": "wkPSFormat",
        "body": "wkPSFormat"
    },
    "wkPSResolution": {
        "prefix": "wkPSResolution",
        "body": "wkPSResolution"
    },
    "wkPaperHeightF": {
        "prefix": "wkPaperHeightF",
        "body": "wkPaperHeightF"
    },
    "wkPaperSize": {
        "prefix": "wkPaperSize",
        "body": "wkPaperSize"
    },
    "wkPaperWidthF": {
        "prefix": "wkPaperWidthF",
        "body": "wkPaperWidthF"
    },
    "wkTopLevelViews": {
        "prefix": "wkTopLevelViews",
        "body": "wkTopLevelViews"
    },
    "wkViews": {
        "prefix": "wkViews",
        "body": "wkViews"
    },
    "wkVisualType": {
        "prefix": "wkVisualType",
        "body": "wkVisualType"
    },
    "wkWidth": {
        "prefix": "wkWidth",
        "body": "wkWidth"
    },
    "wsCurrentSize": {
        "prefix": "wsCurrentSize",
        "body": "wsCurrentSize"
    },
    "wsMaximumSize": {
        "prefix": "wsMaximumSize",
        "body": "wsMaximumSize"
    },
    "wsThresholdSize": {
        "prefix": "wsThresholdSize",
        "body": "wsThresholdSize"
    },
    "xyComputeXMax": {
        "prefix": "xyComputeXMax",
        "body": "xyComputeXMax"
    },
    "xyComputeXMin": {
        "prefix": "xyComputeXMin",
        "body": "xyComputeXMin"
    },
    "xyComputeYMax": {
        "prefix": "xyComputeYMax",
        "body": "xyComputeYMax"
    },
    "xyComputeYMin": {
        "prefix": "xyComputeYMin",
        "body": "xyComputeYMin"
    },
    "xyCoordData": {
        "prefix": "xyCoordData",
        "body": "xyCoordData"
    },
    "xyCoordDataSpec": {
        "prefix": "xyCoordDataSpec",
        "body": "xyCoordDataSpec"
    },
    "xyCurveDrawOrder": {
        "prefix": "xyCurveDrawOrder",
        "body": "xyCurveDrawOrder"
    },
    "xyDashPattern": {
        "prefix": "xyDashPattern",
        "body": "xyDashPattern"
    },
    "xyDashPatterns": {
        "prefix": "xyDashPatterns",
        "body": "xyDashPatterns"
    },
    "xyExplicitLabels": {
        "prefix": "xyExplicitLabels",
        "body": "xyExplicitLabels"
    },
    "xyExplicitLegendLabels": {
        "prefix": "xyExplicitLegendLabels",
        "body": "xyExplicitLegendLabels"
    },
    "xyLabelMode": {
        "prefix": "xyLabelMode",
        "body": "xyLabelMode"
    },
    "xyLineColor": {
        "prefix": "xyLineColor",
        "body": "xyLineColor"
    },
    "xyLineColors": {
        "prefix": "xyLineColors",
        "body": "xyLineColors"
    },
    "xyLineDashSegLenF": {
        "prefix": "xyLineDashSegLenF",
        "body": "xyLineDashSegLenF"
    },
    "xyLineLabelConstantSpacingF": {
        "prefix": "xyLineLabelConstantSpacingF",
        "body": "xyLineLabelConstantSpacingF"
    },
    "xyLineLabelFont": {
        "prefix": "xyLineLabelFont",
        "body": "xyLineLabelFont"
    },
    "xyLineLabelFontAspectF": {
        "prefix": "xyLineLabelFontAspectF",
        "body": "xyLineLabelFontAspectF"
    },
    "xyLineLabelFontColor": {
        "prefix": "xyLineLabelFontColor",
        "body": "xyLineLabelFontColor"
    },
    "xyLineLabelFontColors": {
        "prefix": "xyLineLabelFontColors",
        "body": "xyLineLabelFontColors"
    },
    "xyLineLabelFontHeightF": {
        "prefix": "xyLineLabelFontHeightF",
        "body": "xyLineLabelFontHeightF"
    },
    "xyLineLabelFontQuality": {
        "prefix": "xyLineLabelFontQuality",
        "body": "xyLineLabelFontQuality"
    },
    "xyLineLabelFontThicknessF": {
        "prefix": "xyLineLabelFontThicknessF",
        "body": "xyLineLabelFontThicknessF"
    },
    "xyLineLabelFuncCode": {
        "prefix": "xyLineLabelFuncCode",
        "body": "xyLineLabelFuncCode"
    },
    "xyLineOpacities": {
        "prefix": "xyLineOpacities",
        "body": "xyLineOpacities"
    },
    "xyLineOpacityF": {
        "prefix": "xyLineOpacityF",
        "body": "xyLineOpacityF"
    },
    "xyLineThicknessF": {
        "prefix": "xyLineThicknessF",
        "body": "xyLineThicknessF"
    },
    "xyLineThicknesses": {
        "prefix": "xyLineThicknesses",
        "body": "xyLineThicknesses"
    },
    "xyMarkLineMode": {
        "prefix": "xyMarkLineMode",
        "body": "xyMarkLineMode"
    },
    "Lines": {
        "prefix": "Lines",
        "body": "Lines"
    },
    "Markers": {
        "prefix": "Markers",
        "body": "Markers"
    },
    "MarkLines": {
        "prefix": "MarkLines",
        "body": "MarkLines"
    },
    "xyMarkLineModes": {
        "prefix": "xyMarkLineModes",
        "body": "xyMarkLineModes"
    },
    "xyMarker": {
        "prefix": "xyMarker",
        "body": "xyMarker"
    },
    "xyMarkerColor": {
        "prefix": "xyMarkerColor",
        "body": "xyMarkerColor"
    },
    "xyMarkerColors": {
        "prefix": "xyMarkerColors",
        "body": "xyMarkerColors"
    },
    "xyMarkerOpacities": {
        "prefix": "xyMarkerOpacities",
        "body": "xyMarkerOpacities"
    },
    "xyMarkerOpacityF": {
        "prefix": "xyMarkerOpacityF",
        "body": "xyMarkerOpacityF"
    },
    "xyMarkerSizeF": {
        "prefix": "xyMarkerSizeF",
        "body": "xyMarkerSizeF"
    },
    "xyMarkerSizes": {
        "prefix": "xyMarkerSizes",
        "body": "xyMarkerSizes"
    },
    "xyMarkerThicknessF": {
        "prefix": "xyMarkerThicknessF",
        "body": "xyMarkerThicknessF"
    },
    "xyMarkerThicknesses": {
        "prefix": "xyMarkerThicknesses",
        "body": "xyMarkerThicknesses"
    },
    "xyMarkers": {
        "prefix": "xyMarkers",
        "body": "xyMarkers"
    },
    "xyMonoDashPattern": {
        "prefix": "xyMonoDashPattern",
        "body": "xyMonoDashPattern"
    },
    "xyMonoLineColor": {
        "prefix": "xyMonoLineColor",
        "body": "xyMonoLineColor"
    },
    "xyMonoLineLabelFontColor": {
        "prefix": "xyMonoLineLabelFontColor",
        "body": "xyMonoLineLabelFontColor"
    },
    "xyMonoLineThickness": {
        "prefix": "xyMonoLineThickness",
        "body": "xyMonoLineThickness"
    },
    "xyMonoMarkLineMode": {
        "prefix": "xyMonoMarkLineMode",
        "body": "xyMonoMarkLineMode"
    },
    "xyMonoMarker": {
        "prefix": "xyMonoMarker",
        "body": "xyMonoMarker"
    },
    "xyMonoMarkerColor": {
        "prefix": "xyMonoMarkerColor",
        "body": "xyMonoMarkerColor"
    },
    "xyMonoMarkerSize": {
        "prefix": "xyMonoMarkerSize",
        "body": "xyMonoMarkerSize"
    },
    "xyMonoMarkerThickness": {
        "prefix": "xyMonoMarkerThickness",
        "body": "xyMonoMarkerThickness"
    },
    "xyXIrrTensionF": {
        "prefix": "xyXIrrTensionF",
        "body": "xyXIrrTensionF"
    },
    "xyXIrregularPoints": {
        "prefix": "xyXIrregularPoints",
        "body": "xyXIrregularPoints"
    },
    "xyXStyle": {
        "prefix": "xyXStyle",
        "body": "xyXStyle"
    },
    "xyYIrrTensionF": {
        "prefix": "xyYIrrTensionF",
        "body": "xyYIrrTensionF"
    },
    "xyYIrregularPoints": {
        "prefix": "xyYIrregularPoints",
        "body": "xyYIrregularPoints"
    },
    "xyYStyle": {
        "prefix": "xyYStyle",
        "body": "xyYStyle"
    },
    "amwg256": {
        "prefix": "amwg256",
        "body": "amwg256"
    },
    "BkBlAqGrYeOrReViWh200": {
        "prefix": "BkBlAqGrYeOrReViWh200",
        "body": "BkBlAqGrYeOrReViWh200"
    },
    "BlAqGrYeOrRe": {
        "prefix": "BlAqGrYeOrRe",
        "body": "BlAqGrYeOrRe"
    },
    "BlAqGrYeOrReVi200": {
        "prefix": "BlAqGrYeOrReVi200",
        "body": "BlAqGrYeOrReVi200"
    },
    "BlGrYeOrReVi200": {
        "prefix": "BlGrYeOrReVi200",
        "body": "BlGrYeOrReVi200"
    },
    "example": {
        "prefix": "example",
        "body": "example"
    },
    "GMT_seis": {
        "prefix": "GMT_seis",
        "body": "GMT_seis"
    },
    "GMT_wysiwygcont": {
        "prefix": "GMT_wysiwygcont",
        "body": "GMT_wysiwygcont"
    },
    "matlab_hsv": {
        "prefix": "matlab_hsv",
        "body": "matlab_hsv"
    },
    "matlab_jet": {
        "prefix": "matlab_jet",
        "body": "matlab_jet"
    },
    "MPL_gist_ncar": {
        "prefix": "MPL_gist_ncar",
        "body": "MPL_gist_ncar"
    },
    "MPL_gist_rainbow": {
        "prefix": "MPL_gist_rainbow",
        "body": "MPL_gist_rainbow"
    },
    "MPL_hsv": {
        "prefix": "MPL_hsv",
        "body": "MPL_hsv"
    },
    "MPL_jet": {
        "prefix": "MPL_jet",
        "body": "MPL_jet"
    },
    "MPL_rainbow": {
        "prefix": "MPL_rainbow",
        "body": "MPL_rainbow"
    },
    "MPL_Spectral": {
        "prefix": "MPL_Spectral",
        "body": "MPL_Spectral"
    },
    "NCV_bright": {
        "prefix": "NCV_bright",
        "body": "NCV_bright"
    },
    "NCV_jaisnd": {
        "prefix": "NCV_jaisnd",
        "body": "NCV_jaisnd"
    },
    "NCV_jet": {
        "prefix": "NCV_jet",
        "body": "NCV_jet"
    },
    "NCV_rainbow2": {
        "prefix": "NCV_rainbow2",
        "body": "NCV_rainbow2"
    },
    "ncview_default": {
        "prefix": "ncview_default",
        "body": "ncview_default"
    },
    "nice_gfdl": {
        "prefix": "nice_gfdl",
        "body": "nice_gfdl"
    },
    "rainbow": {
        "prefix": "rainbow",
        "body": "rainbow"
    },
    "rainbow+gray": {
        "prefix": "rainbow+gray",
        "body": "rainbow+gray"
    },
    "rainbow+white": {
        "prefix": "rainbow+white",
        "body": "rainbow+white"
    },
    "rainbow+white+gray": {
        "prefix": "rainbow+white+gray",
        "body": "rainbow+white+gray"
    },
    "tbr_240-300": {
        "prefix": "tbr_240-300",
        "body": "tbr_240-300"
    },
    "tbr_stdev_0-30": {
        "prefix": "tbr_stdev_0-30",
        "body": "tbr_stdev_0-30"
    },
    "tbr_var_0-500": {
        "prefix": "tbr_var_0-500",
        "body": "tbr_var_0-500"
    },
    "tbrAvg1": {
        "prefix": "tbrAvg1",
        "body": "tbrAvg1"
    },
    "tbrStd1": {
        "prefix": "tbrStd1",
        "body": "tbrStd1"
    },
    "tbrVar1": {
        "prefix": "tbrVar1",
        "body": "tbrVar1"
    },
    "temp1": {
        "prefix": "temp1",
        "body": "temp1"
    },
    "testcmap": {
        "prefix": "testcmap",
        "body": "testcmap"
    },
    "ViBlGrWhYeOrRe": {
        "prefix": "ViBlGrWhYeOrRe",
        "body": "ViBlGrWhYeOrRe"
    },
    "wh-bl-gr-ye-re": {
        "prefix": "wh-bl-gr-ye-re",
        "body": "wh-bl-gr-ye-re"
    },
    "WhBlGrYeRe": {
        "prefix": "WhBlGrYeRe",
        "body": "WhBlGrYeRe"
    },
    "WhiteBlueGreenYellowRed": {
        "prefix": "WhiteBlueGreenYellowRed",
        "body": "WhiteBlueGreenYellowRed"
    },
    "WhViBlGrYeOrRe": {
        "prefix": "WhViBlGrYeOrRe",
        "body": "WhViBlGrYeOrRe"
    },
    "WhViBlGrYeOrReWh": {
        "prefix": "WhViBlGrYeOrReWh",
        "body": "WhViBlGrYeOrReWh"
    },
    "amwg": {
        "prefix": "amwg",
        "body": "amwg"
    },
    "BlAqGrWh2YeOrReVi22": {
        "prefix": "BlAqGrWh2YeOrReVi22",
        "body": "BlAqGrWh2YeOrReVi22"
    },
    "cosam": {
        "prefix": "cosam",
        "body": "cosam"
    },
    "cosam12": {
        "prefix": "cosam12",
        "body": "cosam12"
    },
    "cyclic": {
        "prefix": "cyclic",
        "body": "cyclic"
    },
    "GHRSST_anomaly": {
        "prefix": "GHRSST_anomaly",
        "body": "GHRSST_anomaly"
    },
    "GMT_wysiwyg": {
        "prefix": "GMT_wysiwyg",
        "body": "GMT_wysiwyg"
    },
    "grads_rainbow": {
        "prefix": "grads_rainbow",
        "body": "grads_rainbow"
    },
    "gui_default": {
        "prefix": "gui_default",
        "body": "gui_default"
    },
    "prcp_1": {
        "prefix": "prcp_1",
        "body": "prcp_1"
    },
    "prcp_2": {
        "prefix": "prcp_2",
        "body": "prcp_2"
    },
    "prcp_3": {
        "prefix": "prcp_3",
        "body": "prcp_3"
    },
    "radar": {
        "prefix": "radar",
        "body": "radar"
    },
    "radar_1": {
        "prefix": "radar_1",
        "body": "radar_1"
    },
    "seaice_1": {
        "prefix": "seaice_1",
        "body": "seaice_1"
    },
    "seaice_2": {
        "prefix": "seaice_2",
        "body": "seaice_2"
    },
    "so4_21": {
        "prefix": "so4_21",
        "body": "so4_21"
    },
    "so4_23": {
        "prefix": "so4_23",
        "body": "so4_23"
    },
    "wgne15": {
        "prefix": "wgne15",
        "body": "wgne15"
    },
    "cmocean_deep": {
        "prefix": "cmocean_deep",
        "body": "cmocean_deep"
    },
    "cmp_haxby": {
        "prefix": "cmp_haxby",
        "body": "cmp_haxby"
    },
    "GMT_drywet": {
        "prefix": "GMT_drywet",
        "body": "GMT_drywet"
    },
    "GMT_globe": {
        "prefix": "GMT_globe",
        "body": "GMT_globe"
    },
    "GMT_haxby": {
        "prefix": "GMT_haxby",
        "body": "GMT_haxby"
    },
    "GMT_nighttime": {
        "prefix": "GMT_nighttime",
        "body": "GMT_nighttime"
    },
    "GMT_ocean": {
        "prefix": "GMT_ocean",
        "body": "GMT_ocean"
    },
    "GMT_relief": {
        "prefix": "GMT_relief",
        "body": "GMT_relief"
    },
    "GMT_relief_oceanonly": {
        "prefix": "GMT_relief_oceanonly",
        "body": "GMT_relief_oceanonly"
    },
    "GMT_topo": {
        "prefix": "GMT_topo",
        "body": "GMT_topo"
    },
    "MPL_BrBG": {
        "prefix": "MPL_BrBG",
        "body": "MPL_BrBG"
    },
    "MPL_gist_earth": {
        "prefix": "MPL_gist_earth",
        "body": "MPL_gist_earth"
    },
    "MPL_ocean": {
        "prefix": "MPL_ocean",
        "body": "MPL_ocean"
    },
    "MPL_terrain": {
        "prefix": "MPL_terrain",
        "body": "MPL_terrain"
    },
    "NCV_gebco": {
        "prefix": "NCV_gebco",
        "body": "NCV_gebco"
    },
    "OceanLakeLandSnow": {
        "prefix": "OceanLakeLandSnow",
        "body": "OceanLakeLandSnow"
    },
    "topo_15lev": {
        "prefix": "topo_15lev",
        "body": "topo_15lev"
    },
    "cmocean_algae": {
        "prefix": "cmocean_algae",
        "body": "cmocean_algae"
    },
    "cmocean_amp": {
        "prefix": "cmocean_amp",
        "body": "cmocean_amp"
    },
    "cmocean_balance": {
        "prefix": "cmocean_balance",
        "body": "cmocean_balance"
    },
    "cmocean_curl": {
        "prefix": "cmocean_curl",
        "body": "cmocean_curl"
    },
    "cmocean_delta": {
        "prefix": "cmocean_delta",
        "body": "cmocean_delta"
    },
    "cmocean_dense": {
        "prefix": "cmocean_dense",
        "body": "cmocean_dense"
    },
    "cmocean_gray": {
        "prefix": "cmocean_gray",
        "body": "cmocean_gray"
    },
    "cmocean_haline": {
        "prefix": "cmocean_haline",
        "body": "cmocean_haline"
    },
    "cmocean_ice": {
        "prefix": "cmocean_ice",
        "body": "cmocean_ice"
    },
    "cmocean_matter": {
        "prefix": "cmocean_matter",
        "body": "cmocean_matter"
    },
    "cmocean_oxy": {
        "prefix": "cmocean_oxy",
        "body": "cmocean_oxy"
    },
    "cmocean_phase": {
        "prefix": "cmocean_phase",
        "body": "cmocean_phase"
    },
    "cmocean_solar": {
        "prefix": "cmocean_solar",
        "body": "cmocean_solar"
    },
    "cmocean_speed": {
        "prefix": "cmocean_speed",
        "body": "cmocean_speed"
    },
    "cmocean_tempo": {
        "prefix": "cmocean_tempo",
        "body": "cmocean_tempo"
    },
    "cmocean_thermal": {
        "prefix": "cmocean_thermal",
        "body": "cmocean_thermal"
    },
    "cmocean_turbid": {
        "prefix": "cmocean_turbid",
        "body": "cmocean_turbid"
    },
    "BlueDarkOrange18": {
        "prefix": "BlueDarkOrange18",
        "body": "BlueDarkOrange18"
    },
    "BlueDarkRed18": {
        "prefix": "BlueDarkRed18",
        "body": "BlueDarkRed18"
    },
    "BlueGreen14": {
        "prefix": "BlueGreen14",
        "body": "BlueGreen14"
    },
    "BrownBlue12": {
        "prefix": "BrownBlue12",
        "body": "BrownBlue12"
    },
    "Cat12": {
        "prefix": "Cat12",
        "body": "Cat12"
    },
    "cb_9step": {
        "prefix": "cb_9step",
        "body": "cb_9step"
    },
    "cb_rainbow": {
        "prefix": "cb_rainbow",
        "body": "cb_rainbow"
    },
    "cb_rainbow_inv": {
        "prefix": "cb_rainbow_inv",
        "body": "cb_rainbow_inv"
    },
    "CBR_coldhot": {
        "prefix": "CBR_coldhot",
        "body": "CBR_coldhot"
    },
    "CBR_drywet": {
        "prefix": "CBR_drywet",
        "body": "CBR_drywet"
    },
    "CBR_wet": {
        "prefix": "CBR_wet",
        "body": "CBR_wet"
    },
    "cividis": {
        "prefix": "cividis",
        "body": "cividis"
    },
    "GreenMagenta16": {
        "prefix": "GreenMagenta16",
        "body": "GreenMagenta16"
    },
    "posneg_1": {
        "prefix": "posneg_1",
        "body": "posneg_1"
    },
    "posneg_2": {
        "prefix": "posneg_2",
        "body": "posneg_2"
    },
    "srip_reanalysis": {
        "prefix": "srip_reanalysis",
        "body": "srip_reanalysis"
    },
    "StepSeq25": {
        "prefix": "StepSeq25",
        "body": "StepSeq25"
    },
    "hotcold_18lev": {
        "prefix": "hotcold_18lev",
        "body": "hotcold_18lev"
    },
    "hotcolr_19lev": {
        "prefix": "hotcolr_19lev",
        "body": "hotcolr_19lev"
    },
    "mch_default": {
        "prefix": "mch_default",
        "body": "mch_default"
    },
    "perc2_9lev": {
        "prefix": "perc2_9lev",
        "body": "perc2_9lev"
    },
    "percent_11lev": {
        "prefix": "percent_11lev",
        "body": "percent_11lev"
    },
    "precip2_15lev": {
        "prefix": "precip2_15lev",
        "body": "precip2_15lev"
    },
    "precip2_17lev": {
        "prefix": "precip2_17lev",
        "body": "precip2_17lev"
    },
    "precip3_16lev": {
        "prefix": "precip3_16lev",
        "body": "precip3_16lev"
    },
    "precip4_11lev": {
        "prefix": "precip4_11lev",
        "body": "precip4_11lev"
    },
    "precip4_diff_19lev": {
        "prefix": "precip4_diff_19lev",
        "body": "precip4_diff_19lev"
    },
    "precip_11lev": {
        "prefix": "precip_11lev",
        "body": "precip_11lev"
    },
    "precip_diff_12lev": {
        "prefix": "precip_diff_12lev",
        "body": "precip_diff_12lev"
    },
    "precip_diff_1lev": {
        "prefix": "precip_diff_1lev",
        "body": "precip_diff_1lev"
    },
    "rh_19lev": {
        "prefix": "rh_19lev",
        "body": "rh_19lev"
    },
    "spread_15lev": {
        "prefix": "spread_15lev",
        "body": "spread_15lev"
    },
    "sunshine_9lev": {
        "prefix": "sunshine_9lev",
        "body": "sunshine_9lev"
    },
    "sunshine_diff_12lev": {
        "prefix": "sunshine_diff_12lev",
        "body": "sunshine_diff_12lev"
    },
    "t2m_29lev": {
        "prefix": "t2m_29lev",
        "body": "t2m_29lev"
    },
    "temp_19lev": {
        "prefix": "temp_19lev",
        "body": "temp_19lev"
    },
    "temp_diff_18lev": {
        "prefix": "temp_diff_18lev",
        "body": "temp_diff_18lev"
    },
    "temp_diff_1lev": {
        "prefix": "temp_diff_1lev",
        "body": "temp_diff_1lev"
    },
    "wind_17lev": {
        "prefix": "wind_17lev",
        "body": "wind_17lev"
    },
    "BlRe": {
        "prefix": "BlRe",
        "body": "BlRe"
    },
    "BlueRed": {
        "prefix": "BlueRed",
        "body": "BlueRed"
    },
    "BlueRedGray": {
        "prefix": "BlueRedGray",
        "body": "BlueRedGray"
    },
    "BlWhRe": {
        "prefix": "BlWhRe",
        "body": "BlWhRe"
    },
    "cmp_b2r": {
        "prefix": "cmp_b2r",
        "body": "cmp_b2r"
    },
    "GMT_polar": {
        "prefix": "GMT_polar",
        "body": "GMT_polar"
    },
    "GMT_split": {
        "prefix": "GMT_split",
        "body": "GMT_split"
    },
    "hotres": {
        "prefix": "hotres",
        "body": "hotres"
    },
    "MPL_bwr": {
        "prefix": "MPL_bwr",
        "body": "MPL_bwr"
    },
    "MPL_coolwarm": {
        "prefix": "MPL_coolwarm",
        "body": "MPL_coolwarm"
    },
    "MPL_RdBu": {
        "prefix": "MPL_RdBu",
        "body": "MPL_RdBu"
    },
    "MPL_seismic": {
        "prefix": "MPL_seismic",
        "body": "MPL_seismic"
    },
    "NCV_blu_red": {
        "prefix": "NCV_blu_red",
        "body": "NCV_blu_red"
    },
    "NCV_blue_red": {
        "prefix": "NCV_blue_red",
        "body": "NCV_blue_red"
    },
    "WhBlReWh": {
        "prefix": "WhBlReWh",
        "body": "WhBlReWh"
    },
    "GMT_gebco": {
        "prefix": "GMT_gebco",
        "body": "GMT_gebco"
    },
    "GSFC_landsat_udf_density": {
        "prefix": "GSFC_landsat_udf_density",
        "body": "GSFC_landsat_udf_density"
    },
    "MPL_BuGn": {
        "prefix": "MPL_BuGn",
        "body": "MPL_BuGn"
    },
    "MPL_GnBu": {
        "prefix": "MPL_GnBu",
        "body": "MPL_GnBu"
    },
    "MPL_PuBuGn": {
        "prefix": "MPL_PuBuGn",
        "body": "MPL_PuBuGn"
    },
    "MPL_viridis": {
        "prefix": "MPL_viridis",
        "body": "MPL_viridis"
    },
    "MPL_winter": {
        "prefix": "MPL_winter",
        "body": "MPL_winter"
    },
    "MPL_YlGnBu": {
        "prefix": "MPL_YlGnBu",
        "body": "MPL_YlGnBu"
    },
    "GMT_hot": {
        "prefix": "GMT_hot",
        "body": "GMT_hot"
    },
    "matlab_hot": {
        "prefix": "matlab_hot",
        "body": "matlab_hot"
    },
    "MPL_afmhot": {
        "prefix": "MPL_afmhot",
        "body": "MPL_afmhot"
    },
    "MPL_autumn": {
        "prefix": "MPL_autumn",
        "body": "MPL_autumn"
    },
    "MPL_gist_heat": {
        "prefix": "MPL_gist_heat",
        "body": "MPL_gist_heat"
    },
    "MPL_hot": {
        "prefix": "MPL_hot",
        "body": "MPL_hot"
    },
    "MPL_Oranges": {
        "prefix": "MPL_Oranges",
        "body": "MPL_Oranges"
    },
    "MPL_OrRd": {
        "prefix": "MPL_OrRd",
        "body": "MPL_OrRd"
    },
    "MPL_Reds": {
        "prefix": "MPL_Reds",
        "body": "MPL_Reds"
    },
    "MPL_YlOrBr": {
        "prefix": "MPL_YlOrBr",
        "body": "MPL_YlOrBr"
    },
    "MPL_YlOrRd": {
        "prefix": "MPL_YlOrRd",
        "body": "MPL_YlOrRd"
    },
    "WhiteYellowOrangeRed": {
        "prefix": "WhiteYellowOrangeRed",
        "body": "WhiteYellowOrangeRed"
    },
    "drought_severity": {
        "prefix": "drought_severity",
        "body": "drought_severity"
    },
    "GMT_red2green": {
        "prefix": "GMT_red2green",
        "body": "GMT_red2green"
    },
    "helix1": {
        "prefix": "helix1",
        "body": "helix1"
    },
    "MPL_RdYlGn": {
        "prefix": "MPL_RdYlGn",
        "body": "MPL_RdYlGn"
    },
    "SVG_fs2006": {
        "prefix": "SVG_fs2006",
        "body": "SVG_fs2006"
    },
    "GreenYellow": {
        "prefix": "GreenYellow",
        "body": "GreenYellow"
    },
    "MPL_summer": {
        "prefix": "MPL_summer",
        "body": "MPL_summer"
    },
    "MPL_YlGn": {
        "prefix": "MPL_YlGn",
        "body": "MPL_YlGn"
    },
    "MPL_gnuplot": {
        "prefix": "MPL_gnuplot",
        "body": "MPL_gnuplot"
    },
    "MPL_PuRd": {
        "prefix": "MPL_PuRd",
        "body": "MPL_PuRd"
    },
    "MPL_RdPu": {
        "prefix": "MPL_RdPu",
        "body": "MPL_RdPu"
    },
    "GMT_cool": {
        "prefix": "GMT_cool",
        "body": "GMT_cool"
    },
    "MPL_cool": {
        "prefix": "MPL_cool",
        "body": "MPL_cool"
    },
    "MPL_PRGn": {
        "prefix": "MPL_PRGn",
        "body": "MPL_PRGn"
    },
    "GMT_copper": {
        "prefix": "GMT_copper",
        "body": "GMT_copper"
    },
    "MPL_copper": {
        "prefix": "MPL_copper",
        "body": "MPL_copper"
    },
    "MPL_pink": {
        "prefix": "MPL_pink",
        "body": "MPL_pink"
    },
    "MPL_s3pcpn": {
        "prefix": "MPL_s3pcpn",
        "body": "MPL_s3pcpn"
    },
    "SVG_bhw3_22": {
        "prefix": "SVG_bhw3_22",
        "body": "SVG_bhw3_22"
    },
    "SVG_es_landscape_79": {
        "prefix": "SVG_es_landscape_79",
        "body": "SVG_es_landscape_79"
    },
    "amwg_blueyellowred": {
        "prefix": "amwg_blueyellowred",
        "body": "amwg_blueyellowred"
    },
    "BlueWhiteOrangeRed": {
        "prefix": "BlueWhiteOrangeRed",
        "body": "BlueWhiteOrangeRed"
    },
    "BlueYellowRed": {
        "prefix": "BlueYellowRed",
        "body": "BlueYellowRed"
    },
    "cmp_flux": {
        "prefix": "cmp_flux",
        "body": "cmp_flux"
    },
    "GMT_jet": {
        "prefix": "GMT_jet",
        "body": "GMT_jet"
    },
    "GMT_no_green": {
        "prefix": "GMT_no_green",
        "body": "GMT_no_green"
    },
    "GMT_panoply": {
        "prefix": "GMT_panoply",
        "body": "GMT_panoply"
    },
    "MPL_RdYlBu": {
        "prefix": "MPL_RdYlBu",
        "body": "MPL_RdYlBu"
    },
    "ncl_default": {
        "prefix": "ncl_default",
        "body": "ncl_default"
    },
    "nrl_sirkes": {
        "prefix": "nrl_sirkes",
        "body": "nrl_sirkes"
    },
    "nrl_sirkes_nowhite": {
        "prefix": "nrl_sirkes_nowhite",
        "body": "nrl_sirkes_nowhite"
    },
    "UKM_hadcrut": {
        "prefix": "UKM_hadcrut",
        "body": "UKM_hadcrut"
    },
    "MPL_Blues": {
        "prefix": "MPL_Blues",
        "body": "MPL_Blues"
    },
    "MPL_PuBu": {
        "prefix": "MPL_PuBu",
        "body": "MPL_PuBu"
    },
    "WhiteBlue": {
        "prefix": "WhiteBlue",
        "body": "WhiteBlue"
    },
    "MPL_BuPu": {
        "prefix": "MPL_BuPu",
        "body": "MPL_BuPu"
    },
    "MPL_Purples": {
        "prefix": "MPL_Purples",
        "body": "MPL_Purples"
    },
    "MPL_Greens": {
        "prefix": "MPL_Greens",
        "body": "MPL_Greens"
    },
    "WhiteGreen": {
        "prefix": "WhiteGreen",
        "body": "WhiteGreen"
    },
    "GMT_gray": {
        "prefix": "GMT_gray",
        "body": "GMT_gray"
    },
    "GrayWhiteGray": {
        "prefix": "GrayWhiteGray",
        "body": "GrayWhiteGray"
    },
    "gscyclic": {
        "prefix": "gscyclic",
        "body": "gscyclic"
    },
    "gsdtol": {
        "prefix": "gsdtol",
        "body": "gsdtol"
    },
    "gsltod": {
        "prefix": "gsltod",
        "body": "gsltod"
    },
    "MPL_gist_gray": {
        "prefix": "MPL_gist_gray",
        "body": "MPL_gist_gray"
    },
    "MPL_gist_yarg": {
        "prefix": "MPL_gist_yarg",
        "body": "MPL_gist_yarg"
    },
    "MPL_Greys": {
        "prefix": "MPL_Greys",
        "body": "MPL_Greys"
    },
    "MPL_RdGy": {
        "prefix": "MPL_RdGy",
        "body": "MPL_RdGy"
    },
    "wxpEnIR": {
        "prefix": "wxpEnIR",
        "body": "wxpEnIR"
    },
    "3gauss": {
        "prefix": "3gauss",
        "body": "3gauss"
    },
    "3saw": {
        "prefix": "3saw",
        "body": "3saw"
    },
    "detail": {
        "prefix": "detail",
        "body": "detail"
    },
    "extrema": {
        "prefix": "extrema",
        "body": "extrema"
    },
    "matlab_lines": {
        "prefix": "matlab_lines",
        "body": "matlab_lines"
    },
    "MPL_StepSeq": {
        "prefix": "MPL_StepSeq",
        "body": "MPL_StepSeq"
    },
    "NCV_banded": {
        "prefix": "NCV_banded",
        "body": "NCV_banded"
    },
    "NCV_manga": {
        "prefix": "NCV_manga",
        "body": "NCV_manga"
    },
    "NCV_roullet": {
        "prefix": "NCV_roullet",
        "body": "NCV_roullet"
    },
    "psgcap": {
        "prefix": "psgcap",
        "body": "psgcap"
    },
    "SVG_Gallet13": {
        "prefix": "SVG_Gallet13",
        "body": "SVG_Gallet13"
    },
    "SVG_Lindaa06": {
        "prefix": "SVG_Lindaa06",
        "body": "SVG_Lindaa06"
    },
    "SVG_Lindaa07": {
        "prefix": "SVG_Lindaa07",
        "body": "SVG_Lindaa07"
    },
    "uniform": {
        "prefix": "uniform",
        "body": "uniform"
    },
    "CBR_set3": {
        "prefix": "CBR_set3",
        "body": "CBR_set3"
    },
    "MPL_Accent": {
        "prefix": "MPL_Accent",
        "body": "MPL_Accent"
    },
    "MPL_Dark2": {
        "prefix": "MPL_Dark2",
        "body": "MPL_Dark2"
    },
    "MPL_Paired": {
        "prefix": "MPL_Paired",
        "body": "MPL_Paired"
    },
    "MPL_Pastel1": {
        "prefix": "MPL_Pastel1",
        "body": "MPL_Pastel1"
    },
    "MPL_Pastel2": {
        "prefix": "MPL_Pastel2",
        "body": "MPL_Pastel2"
    },
    "MPL_Set1": {
        "prefix": "MPL_Set1",
        "body": "MPL_Set1"
    },
    "MPL_Set2": {
        "prefix": "MPL_Set2",
        "body": "MPL_Set2"
    },
    "MPL_Set3": {
        "prefix": "MPL_Set3",
        "body": "MPL_Set3"
    },
    "SVG_feb_sunrise": {
        "prefix": "SVG_feb_sunrise",
        "body": "SVG_feb_sunrise"
    },
    "SVG_foggy_sunrise": {
        "prefix": "SVG_foggy_sunrise",
        "body": "SVG_foggy_sunrise"
    },
    "circular_0": {
        "prefix": "circular_0",
        "body": "circular_0"
    },
    "circular_1": {
        "prefix": "circular_1",
        "body": "circular_1"
    },
    "circular_2": {
        "prefix": "circular_2",
        "body": "circular_2"
    },
    "default": {
        "prefix": "default",
        "body": "default"
    },
    "helix": {
        "prefix": "helix",
        "body": "helix"
    },
    "hlu_default": {
        "prefix": "hlu_default",
        "body": "hlu_default"
    },
    "lithology": {
        "prefix": "lithology",
        "body": "lithology"
    },
    "thelix": {
        "prefix": "thelix",
        "body": "thelix"
    },
    "NEO_div_vegetation_a": {
        "prefix": "NEO_div_vegetation_a",
        "body": "NEO_div_vegetation_a"
    },
    "NEO_div_vegetation_b": {
        "prefix": "NEO_div_vegetation_b",
        "body": "NEO_div_vegetation_b"
    },
    "NEO_div_vegetation_c": {
        "prefix": "NEO_div_vegetation_c",
        "body": "NEO_div_vegetation_c"
    },
    "NEO_modis_ndvi": {
        "prefix": "NEO_modis_ndvi",
        "body": "NEO_modis_ndvi"
    },
    "NOC_ndvi": {
        "prefix": "NOC_ndvi",
        "body": "NOC_ndvi"
    },
    "vegetation_ClarkU": {
        "prefix": "vegetation_ClarkU",
        "body": "vegetation_ClarkU"
    },
    "vegetation_modis": {
        "prefix": "vegetation_modis",
        "body": "vegetation_modis"
    },
    "MPL_PiYG": {
        "prefix": "MPL_PiYG",
        "body": "MPL_PiYG"
    },
    "MPL_PuOr": {
        "prefix": "MPL_PuOr",
        "body": "MPL_PuOr"
    },
    "GMT_paired": {
        "prefix": "GMT_paired",
        "body": "GMT_paired"
    },
    "grads_default": {
        "prefix": "grads_default",
        "body": "grads_default"
    },
    "MPL_bone": {
        "prefix": "MPL_bone",
        "body": "MPL_bone"
    },
    "MPL_brg": {
        "prefix": "MPL_brg",
        "body": "MPL_brg"
    },
    "MPL_cubehelix": {
        "prefix": "MPL_cubehelix",
        "body": "MPL_cubehelix"
    },
    "MPL_flag": {
        "prefix": "MPL_flag",
        "body": "MPL_flag"
    },
    "MPL_gist_stern": {
        "prefix": "MPL_gist_stern",
        "body": "MPL_gist_stern"
    },
    "MPL_gnuplot2": {
        "prefix": "MPL_gnuplot2",
        "body": "MPL_gnuplot2"
    },
    "MPL_prism": {
        "prefix": "MPL_prism",
        "body": "MPL_prism"
    },
    "MPL_s3pcpn_l": {
        "prefix": "MPL_s3pcpn_l",
        "body": "MPL_s3pcpn_l"
    },
    "MPL_spring": {
        "prefix": "MPL_spring",
        "body": "MPL_spring"
    },
    "MPL_sstanom": {
        "prefix": "MPL_sstanom",
        "body": "MPL_sstanom"
    }
}